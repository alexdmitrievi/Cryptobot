import os
import logging
import asyncio
import threading
import time
import re
import json
import requests
import hmac
import hashlib
import base64
import csv
from datetime import datetime
from io import BytesIO

from telegram import (
    Update, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters, ConversationHandler
)

from config import (
    TELEGRAM_TOKEN, OPENAI_API_KEY, TON_API_TOKEN,
    CRYPTOCLOUD_API_KEY, CRYPTOCLOUD_SHOP_ID, API_SECRET
)
from openai import AsyncOpenAI
from PIL import Image

# üìä Google Sheets API
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# üî• Flask –¥–ª—è webhook –æ—Ç CryptoCloud POS
from flask import Flask, request, jsonify

# üîÑ AioCron –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
import aiocron

# ‚úÖ –î–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç rate limit Google Sheets
from tenacity import retry, wait_fixed, stop_after_attempt

global_bot = None

# üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö ENV –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
required_env = ["GOOGLE_CREDS", "TELEGRAM_TOKEN", "OPENAI_API_KEY"]
for var in required_env:
    if not os.getenv(var):
        raise EnvironmentError(f"üö® –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(os.getenv("GOOGLE_CREDS"))
creds_dict["private_key"] = creds_dict["private_key"].replace("\\n", "\n")
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gc = gspread.authorize(creds)

SPREADSHEET_ID = "1s_KQLyekb-lQjt3fMlBO39CTBuq0ayOIeKkXEhDjhbs"
sheet = gc.open_by_key(SPREADSHEET_ID).sheet1

# ‚úÖ Rate-limit safe append –¥–ª—è Sheets
@retry(wait=wait_fixed(2), stop=stop_after_attempt(5))
def safe_append_row(row):
    sheet.append_row(row)

def load_allowed_users():
    try:
        records = sheet.get_all_records()
        logging.info(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(records)} —Å—Ç—Ä–æ–∫ –∏–∑ Google Sheets.")
        
        users = set()
        for row in records:
            if "user_id" in row and row["user_id"]:
                try:
                    users.add(int(row["user_id"]))
                except ValueError:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å user_id: {row['user_id']}")
        
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º.")
        return users

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Google Sheets: {e}")
        return set()

# üöÄ ALLOWED_USERS —Å TTL cache
ALLOWED_USERS = set()
ALLOWED_USERS_TIMESTAMP = 0

def get_allowed_users():
    global ALLOWED_USERS, ALLOWED_USERS_TIMESTAMP
    if time.time() - ALLOWED_USERS_TIMESTAMP > 300:
        ALLOWED_USERS = load_allowed_users()
        ALLOWED_USERS_TIMESTAMP = time.time()
    return ALLOWED_USERS

client = AsyncOpenAI(api_key=OPENAI_API_KEY)
logging.basicConfig(level=logging.INFO)

TON_WALLET = "UQC4nBKWF5sO2UIP9sKl3JZqmmRlsGC5B7xM7ArruA61nTGR"
PENDING_USERS = {}
RECEIVED_MEMOS = set()

reply_keyboard = [
    ["üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è", "üöÄ –°–∏–≥–Ω–∞–ª", "üîç –ê–Ω–∞–ª–∏–∑"],
    ["üìñ –û–±—É—á–µ–Ω–∏–µ", "üå± –ü—Å–∏—Ö–æ–ª–æ–≥"],
    ["üìö –¢–µ—Ä–º–∏–Ω", "üéØ –†–∏—Å–∫"],
    ["üí∞ –ö—É–ø–∏—Ç—å", "‚ÑπÔ∏è –û –±–æ—Ç–µ"],
    ["üìå –°–µ—Ç–∞–ø"]
]
REPLY_MARKUP = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

CHAT_DISCUSS_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üí¨ –û–±—Å—É–¥–∏—Ç—å –≤ —á–∞—Ç–µ", url="https://t.me/ai4traders_chat")]
])

# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ username
RECEIVED_MEMOS = set()

INTERPRET_NEWS, ASK_EVENT, ASK_FORECAST, ASK_ACTUAL, GENERAL_QUESTION, FOLLOWUP_1, FOLLOWUP_2, FOLLOWUP_3 = range(8)
user_inputs = {}

WAITING_FOR_PHOTO = set()
WAITING_FOR_THERAPY_INPUT = 100

RISK_CALC_1, RISK_CALC_2, RISK_CALC_3 = range(101, 104)
SETUP_1, SETUP_2, SETUP_3, SETUP_4, SETUP_5 = range(301, 306)

async def setup_instrument(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["instrument"] = update.message.text.strip()
    await update.message.reply_text("üìâ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –æ–±–ª–∞—Å—Ç—å —Ä–∏—Å–∫–∞ (–∑–æ–Ω–∞ –ø–æ–∫—É–ø–∫–∏):")
    return SETUP_2

async def setup_risk_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["risk_area"] = update.message.text.strip()
    await update.message.reply_text("üéØ –ö–∞–∫–∏–µ —Ü–µ–ª–∏ (—Ç–µ–π–∫–∏) –ø–æ —Å–¥–µ–ª–∫–µ?")
    return SETUP_3

async def setup_targets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["targets"] = update.message.text.strip()
    await update.message.reply_text("üö® –ì–¥–µ —Å—Ç–æ–∏—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å?")
    return SETUP_4

async def setup_stoploss(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["stoploss"] = update.message.text.strip()
    await update.message.reply_text("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏ —Å–∫—Ä–∏–Ω —Å–µ—Ç–∞–ø–∞.")
    return SETUP_5

async def start_risk_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "üìä –í–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ $:",
        reply_markup=REPLY_MARKUP
    )
    return RISK_CALC_1

async def risk_calc_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["deposit"] = float(update.message.text.strip())
        await update.message.reply_text("üí° –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É (%):")
        return RISK_CALC_2
    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 1000")
        return RISK_CALC_1

async def risk_calc_risk_percent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["risk_percent"] = float(update.message.text.strip())
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å –ø–æ —Å–¥–µ–ª–∫–µ (%):")
        return RISK_CALC_3
    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 2")
        return RISK_CALC_2

async def risk_calc_stoploss(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        stoploss_percent = float(update.message.text.strip())
        deposit = context.user_data["deposit"]
        risk_percent = context.user_data["risk_percent"]

        risk_amount = deposit * risk_percent / 100
        position_size = risk_amount / (stoploss_percent / 100)

        await update.message.reply_text(
            f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
            f"‚Ä¢ –î–µ–ø–æ–∑–∏—Ç: ${deposit:.2f}\n"
            f"‚Ä¢ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {risk_percent:.2f}% (${risk_amount:.2f})\n"
            f"‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: {stoploss_percent:.2f}%\n\n"
            f"üìå –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–±—ä—ë–º –ø–æ–∑–∏—Ü–∏–∏: **${position_size:.2f}**",
            reply_markup=REPLY_MARKUP,
            parse_mode="Markdown"
        )
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 1.5")
        return RISK_CALC_3

async def check_access(update: Update):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ü–æ–¥–∫–ª—é—á–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞ –∑–∞ $25.", reply_markup=REPLY_MARKUP)
        return False
    return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª –≤ GPT-–¢—Ä–µ–π–¥–µ—Ä–∞ ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞—Ä–∞–≤–Ω–µ —Å —Ñ–æ–Ω–¥–∞–º–∏.\n\n"
        "üí• –°–µ–≥–æ–¥–Ω—è –∫—Ä–∏–ø—Ç—É —Å–∫—É–ø–∞—é—Ç BlackRock, Fidelity –∏ –∫—Ä—É–ø–Ω–µ–π—à–∏–µ —Ñ–æ–Ω–¥—ã —á–µ—Ä–µ–∑ ETF. "
        "–ê —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ö–æ–¥–∏—Ç—å —Ç—É–¥–∞ –∂–µ, –Ω–æ –±–µ–∑ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–æ–≤ –∏ —Å–æ —Å–≤–æ–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–æ–º.\n\n"
        "üß† –ß—Ç–æ —É–º–µ–µ—Ç GPT-–¢—Ä–µ–π–¥–µ—Ä:\n"
        "‚Ä¢ –î–µ–ª–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Ç–≤–æ–µ–º—É —Å–∫—Ä–∏–Ω—É –∑–∞ 10 —Å–µ–∫—É–Ω–¥\n"
        "‚Ä¢ –û–±—ä—è—Å–Ω—è–µ—Ç –º–∞–∫—Ä–æ-–Ω–æ–≤–æ—Å—Ç–∏ –∏ –¥–∞—ë—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏\n"
        "‚Ä¢ –î–∞—ë—Ç VIP-—Å–∏–≥–Ω–∞–ª—ã\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏—Ç –º–µ–º–æ–º, –µ—Å–ª–∏ —Ä—ã–Ω–æ–∫ –ø–æ–±—Ä–∏–ª üòÖ",
        reply_markup=REPLY_MARKUP
    )
    await update.message.reply_text(
        "üëá –í—ã–±–µ—Ä–∏, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=REPLY_MARKUP
    )
    return ConversationHandler.END

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    logging.info(f"[button_handler] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {query.data}")

    if query.data == "start_menu":
        await query.message.reply_text(
            "üöÄ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=REPLY_MARKUP
        )
        return

    if query.data == "market_crypto":
        context.user_data["selected_market"] = "crypto"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("Smart Money", callback_data="style_smc")],
            [InlineKeyboardButton("–ü–æ–∑–∏—Ü–∏–æ–Ω–∫–∞", callback_data="style_swing")],
            [InlineKeyboardButton("–ü—Ä–æ–±–æ–π", callback_data="style_breakout")]
        ])
        await query.edit_message_text("üìà –û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –∫—Ä–∏–ø—Ç—ã:", reply_markup=keyboard)

    elif query.data == "market_forex":
        context.user_data["selected_market"] = "forex"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("Smart Money", callback_data="style_smc")],
            [InlineKeyboardButton("–ü–æ–∑–∏—Ü–∏–æ–Ω–∫–∞", callback_data="style_swing")],
            [InlineKeyboardButton("–ü—Ä–æ–±–æ–π", callback_data="style_breakout")]
        ])
        await query.edit_message_text("üìà –û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Ñ–æ—Ä–µ–∫—Å–∞:", reply_markup=keyboard)

    elif query.data == "style_smc":
        context.user_data["selected_strategy"] = "smc"
        market = context.user_data.get("selected_market")
        text_msg = (
            "üìà Smart Money Concepts (SMC) –¥–ª—è –∫—Ä–∏–ø—Ç—ã\n\n"
            "üìå –í–∫–ª—é—á–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ:\n"
            "- Smart Money Concepts (SMC) Lux Algo\n"
            "- LazyScalp Board (DV > 200M)\n\n"
            "–ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω ‚Äî –¥–∞–º –ø–ª–∞–Ω –≤—Ö–æ–¥–∞, —Å—Ç–æ–ø –∏ —Ç–µ–π–∫–∏."
            if market == "crypto"
            else "üìà Smart Money Concepts (SMC) –¥–ª—è —Ñ–æ—Ä–µ–∫—Å–∞\n\n"
                 "üìå –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤–∫–ª—é—á—ë–Ω Smart Money Concepts (SMC) Lux Algo.\n"
                 "DV –Ω–µ –Ω—É–∂–µ–Ω.\n\n"
                 "–ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω ‚Äî —Å–¥–µ–ª–∞—é –∞–Ω–∞–ª–∏–∑ SMC."
        )
        await query.edit_message_text(text_msg)

    elif query.data == "style_swing":
        context.user_data["selected_strategy"] = "swing"
        market = context.user_data.get("selected_market")
        text_msg = (
            "üìà –ü–æ–∑–∏—Ü–∏–æ–Ω–∫–∞ (Swing) –¥–ª—è –∫—Ä–∏–ø—Ç—ã\n\n"
            "üìå –í–∫–ª—é—á–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ:\n"
            "- Lux Algo Levels\n"
            "- LazyScalp Board (DV > 200M)\n"
            "- Volume Profile\n\n"
            "–ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ swing."
            if market == "crypto"
            else "üìà –ü–æ–∑–∏—Ü–∏–æ–Ω–∫–∞ (Swing) –¥–ª—è —Ñ–æ—Ä–µ–∫—Å–∞\n\n"
                 "üìå –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤–∫–ª—é—á–µ–Ω—ã:\n"
                 "- Lux Algo Levels –∏–ª–∏ Auto Support & Resistance\n"
                 "- RSI / Stochastic\n\n"
                 "–ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω ‚Äî –¥–∞–º —Å—Ü–µ–Ω–∞—Ä–∏–π swing."
        )
        await query.edit_message_text(text_msg)

    elif query.data == "style_breakout":
        context.user_data["selected_strategy"] = "breakout"
        market = context.user_data.get("selected_market")
        text_msg = (
            "üìà –ü—Ä–æ–±–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (Breakout) –¥–ª—è –∫—Ä–∏–ø—Ç—ã\n\n"
            "üìå –í–∫–ª—é—á–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ:\n"
            "- Range Detection\n"
            "- LazyScalp Board (DV > 200M)\n\n"
            "–ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω ‚Äî –Ω–∞–π–¥—É –¥–∏–∞–ø–∞–∑–æ–Ω –∏ –¥–∞–º —Å—Ü–µ–Ω–∞—Ä–∏–∏."
            if market == "crypto"
            else "üìà –ü—Ä–æ–±–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (Breakout) –¥–ª—è —Ñ–æ—Ä–µ–∫—Å–∞\n\n"
                 "üìå –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤–∫–ª—é—á–µ–Ω—ã:\n"
                 "- Range Detection –∏–ª–∏ Lux Algo Levels\n"
                 "- RSI / Stochastic\n\n"
                 "–ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω ‚Äî –ø–æ—Å—Ç—Ä–æ—é –¥–≤–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è breakout."
        )
        await query.edit_message_text(text_msg)

    elif query.data == "forecast_by_image":
        await query.message.reply_text(
            "üì∏ –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –≥—Ä–∞—Ñ–∏–∫–∞ ‚Äî —è —Å–¥–µ–ª–∞—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –∏ –ø—Ä–æ–≥–Ω–æ–∑."
        )

    elif query.data == "get_email":
        context.user_data["awaiting_email"] = True
        await query.message.reply_text(
            "‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ PDF —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏:"
        )

    # ‚úÖ –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    elif query.data == "interpret_calendar":
        context.user_data["awaiting_news"] = "calendar"
        await query.message.reply_text(
            "üìÖ –û–ø–∏—à–∏ —Å–æ–±—ã—Ç–∏–µ –∏–∑ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "–°–æ–±—ã—Ç–∏–µ: ...\n"
            "–ü—Ä–æ–≥–Ω–æ–∑: ...\n"
            "–§–∞–∫—Ç: ...\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–°–æ–±—ã—Ç–∏–µ: –î–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤ –°–®–ê (CPI)\n"
            "–ü—Ä–æ–≥–Ω–æ–∑: 3.2%\n"
            "–§–∞–∫—Ç: 3.7%\n\n"
            "–ß–µ–º —è—Å–Ω–µ–µ –Ω–∞–ø–∏—à–µ—à—å, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –º–æ–π —Ä–∞–∑–±–æ—Ä."
        )

    elif query.data == "interpret_other":
        context.user_data["awaiting_news"] = "other"
        await query.message.reply_text(
            "üåê –û–ø–∏—à–∏ –Ω–æ–≤–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä—ã–Ω–æ–∫."
        )


async def grant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
        return

    args = context.args
    if len(args) < 2:
        await update.message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫: /grant user_id username")
        return

    try:
        target_user_id = int(args[0])
        target_username = args[1]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ ALLOWED_USERS
        ALLOWED_USERS.add(target_user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º TTL, —á—Ç–æ–±—ã –Ω–µ —Å–ª–µ—Ç–µ–ª–æ –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω
        global ALLOWED_USERS_TIMESTAMP
        ALLOWED_USERS_TIMESTAMP = time.time()

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
        log_payment(target_user_id, target_username)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await notify_user_payment(target_user_id)

        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} ({target_username}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ VIP –∏ —É–≤–µ–¥–æ–º–ª—ë–Ω."
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def reload_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
        return

    try:
        global ALLOWED_USERS
        ALLOWED_USERS = load_allowed_users()
        await update.message.reply_text(
            f"‚úÖ ALLOWED_USERS –æ–±–Ω–æ–≤–ª–µ–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ALLOWED_USERS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Google Sheets."
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        logging.error(f"[reload_users] –û—à–∏–±–∫–∞: {e}")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    photo = update.message.photo[-1]
    file = await photo.get_file()
    original_photo_bytes = await file.download_as_bytearray()

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 –¥–ª—è Vision
    image = Image.open(BytesIO(original_photo_bytes)).convert("RGB")
    buffer = BytesIO()
    image.save(buffer, format="JPEG", quality=80)
    image_base64 = base64.b64encode(buffer.getvalue()).decode()

    selected_market = context.user_data.get("selected_market")
    selected_style = context.user_data.get("selected_strategy")

    if not selected_market or not selected_style:
        await update.message.reply_text(
            "üìù –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ —Ä—ã–Ω–æ–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, –∫–∞–∫–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–±–µ –Ω—É–∂–µ–Ω."
        )
        return

    # üí™ –°–∞–º—ã–µ —Ç–≤—ë—Ä–¥—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∏–ª–µ–π
    if selected_style == "smc":
        if selected_market == "crypto":
            prompt_text = (
                "You are a world-class professional Smart Money Concepts (SMC) trader with 10+ years of experience in cryptocurrency markets. "
                "You deeply understand BOS, CHoCH, liquidity hunts, OTE, premium/discount zones.\n\n"
                "Look at the TradingView chart. Ensure it contains:\n"
                "- Smart Money Concepts (SMC) Lux Algo\n"
                "- LazyScalp Board showing DV (might be in M or B).\n\n"
                "‚ö†Ô∏è If DV < 200M or unclear, WARN but ALWAYS build a detailed SMC plan anyway. "
                "Never apologize or say you can't analyze ‚Äî ALWAYS provide Entry, StopLoss and TakeProfit levels, even if roughly estimated with a caution.\n\n"
                "Then structure your answer:\n"
                "1Ô∏è‚É£ Observations (BOS/CHoCH/liquidity)\n"
                "2Ô∏è‚É£ Trading plan:\n"
                "  üéØ Entry: $_____\n"
                "  üö® StopLoss: $_____\n"
                "  üí∞ TakeProfit: $_____\n"
                "3Ô∏è‚É£ Risk commentary on current DV.\n"
                "‚úÖ Finally, give a concise 2-line summary in Russian with emojis.\n"
                "IMPORTANT: Answer strictly in Russian."
            )
        else:
            prompt_text = (
                "You are a highly skilled Smart Money Concepts (SMC) trader on Forex with 10+ years of experience. "
                "You master BOS, CHoCH, OTE, liquidity zones and order flow.\n\n"
                "Ensure Smart Money Concepts Lux Algo is active. Note: DV might be in M or B.\n"
                "‚ö†Ô∏è If DV < 200M or uncertain, warn but ALWAYS build a full plan. Never say you can't ‚Äî ALWAYS give Entry, StopLoss and TakeProfit.\n\n"
                "Format:\n"
                "1Ô∏è‚É£ Observations\n"
                "2Ô∏è‚É£ Trading plan:\n"
                "  üéØ Entry / üö® StopLoss / üí∞ TakeProfit\n"
                "3Ô∏è‚É£ Short risk note.\n"
                "‚úÖ Finish with a concise 2-line Russian summary with emojis.\n"
                "IMPORTANT: Answer strictly in Russian."
            )
    elif selected_style == "swing":
        if selected_market == "crypto":
            prompt_text = (
                "You are a seasoned swing trader in cryptocurrency markets with over 10 years of experience. "
                "Specialize in accumulation, break structures, volume confluence.\n\n"
                "Chart must show:\n"
                "- Auto Support & Resistance or Lux Algo Levels\n"
                "- Volume Profile\n"
                "- LazyScalp Board (DV may be in M or B).\n"
                "‚ö†Ô∏è If DV < 200M or unclear, warn but ALWAYS continue with Entry, StopLoss, TakeProfit, even if approximate.\n\n"
                "Provide:\n"
                "1Ô∏è‚É£ Observations (zones & volume)\n"
                "2Ô∏è‚É£ Swing plan:\n"
                "  üéØ Entry / üö® StopLoss / üí∞ TakeProfit\n"
                "3Ô∏è‚É£ Quick risk note.\n"
                "‚úÖ Conclude with 2-line Russian summary with emojis.\n"
                "IMPORTANT: Answer strictly in Russian."
            )
        else:
            prompt_text = (
                "You are an advanced swing trader on Forex with over 10 years of expertise. "
                "You spot accumulation, momentum shifts.\n\n"
                "Ensure:\n"
                "- Auto Support & Resistance or Lux Algo Levels\n"
                "- Volume Profile if present\n"
                "- RSI or Stochastic.\n"
                "‚ö†Ô∏è If DV < 200M or missing, warn but ALWAYS build the full plan.\n\n"
                "Structure:\n"
                "1Ô∏è‚É£ Observations\n"
                "2Ô∏è‚É£ Plan:\n"
                "  üéØ Entry / üö® StopLoss / üí∞ TakeProfit\n"
                "3Ô∏è‚É£ Risk comment.\n"
                "‚úÖ End with 2-line Russian summary with emojis.\n"
                "IMPORTANT: Answer strictly in Russian."
            )
    elif selected_style == "breakout":
        if selected_market == "crypto":
            prompt_text = (
                "You are a scalper and intraday breakout trader in cryptocurrency with over 10 years of experience. "
                "You read consolidation, volume pushes, stop hunts.\n\n"
                "Chart should include:\n"
                "- Range Detection or Lux Algo\n"
                "- LazyScalp Board (DV may be in M or B).\n"
                "‚ö†Ô∏è If DV < 200M or data incomplete, WARN but ALWAYS give two breakout scenarios with Entry, StopLoss, TakeProfit.\n\n"
                "Answer format:\n"
                "- üìà Up:\n"
                "    üéØ Entry / üö® StopLoss / üí∞ TakeProfit\n"
                "- üìâ Down:\n"
                "    üéØ Entry / üö® StopLoss / üí∞ TakeProfit\n"
                "Short risk note.\n"
                "‚úÖ Then a concise 2-line Russian summary with emojis.\n"
                "IMPORTANT: Answer strictly in Russian."
            )
        else:
            prompt_text = (
                "You are a scalper and intraday breakout trader on Forex with 10+ years of expertise. "
                "Spot ranges, breakouts, liquidity traps.\n\n"
                "Ensure:\n"
                "- Range Detection or Lux Algo Levels\n"
                "- Volume Profile.\n"
                "‚ö†Ô∏è If DV < 200M or unclear, WARN but STILL build two scenarios.\n\n"
                "- üìà Up: Entry / StopLoss / TakeProfit\n"
                "- üìâ Down: Entry / StopLoss / TakeProfit\n"
                "Risk comment.\n"
                "‚úÖ Conclude with 2-line Russian summary with emojis.\n"
                "IMPORTANT: Answer strictly in Russian."
            )
    else:
        prompt_text = (
            "You are a professional trader with over 10 years in crypto and Forex. "
            "If DV < 200M or missing, WARN but ALWAYS proceed with the plan.\n\n"
            "Provide:\n"
            "- Observations (trend, accumulation, volume)\n"
            "- üéØ Entry / üö® StopLoss / üí∞ TakeProfit\n"
            "Short risk comment.\n"
            "‚úÖ Conclude with 2-line Russian summary with emojis.\n"
            "IMPORTANT: Answer strictly in Russian."
        )

    try:
        vision_response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{
                "role": "user",
                "content": [
                    {"type": "text", "text": prompt_text},
                    {"type": "image_url", "image_url": {
                        "url": f"data:image/jpeg;base64,{image_base64}"
                    }}
                ]
            }],
            max_tokens=900
        )

        analysis = vision_response.choices[0].message.content.strip()
        if not analysis:
            await update.message.reply_text(
                "‚ö†Ô∏è GPT –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–Ω."
            )
            return

        # –£–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π regex –¥–ª—è –ª—é–±–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ "‚âà3%", "~3%", "–æ—Ç 3% –¥–æ 5%", "3-5%"
        risk_match = re.search(
            r'(?:‚âà|~|–æ—Ç)?\s*(\d+(?:\.\d+)?)\s*(?:-|–¥–æ)?\s*(\d+(?:\.\d+)?)?\s*%',
            analysis,
            flags=re.IGNORECASE
        )
        if risk_match:
            if risk_match.group(2):
                risk_line = f"üìå –û–±–ª–∞—Å—Ç—å —Ä–∏—Å–∫–∞ ‚âà {risk_match.group(1)}-{risk_match.group(2)}%"
            else:
                risk_line = f"üìå –û–±–ª–∞—Å—Ç—å —Ä–∏—Å–∫–∞ ‚âà {risk_match.group(1)}%"
        else:
            risk_line = "üìå –û–±–ª–∞—Å—Ç—å —Ä–∏—Å–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ ‚Äî –æ—Ü–µ–Ω–∏–≤–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ."

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìè –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∏—Å–∫", callback_data="start_risk_calc")]
        ])

        await update.message.reply_text(
            f"üìâ –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n\n{analysis}\n\n{risk_line}",
            reply_markup=keyboard
        )

    except Exception as e:
        logging.error(f"[handle_photo] Vision error: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è GPT –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
            "–ù–∞ –≥–ª–∞–∑ –ø–æ —Ç–∞–∫–∏–º –≥—Ä–∞—Ñ–∏–∫–∞–º:\n"
            "- –ï—Å–ª–∏ —Ä—ã–Ω–æ–∫ —Ä–∞—Å—Ç—ë—Ç, –∏—â–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—é –∏ –æ–±—ä—ë–º.\n"
            "- –ï—Å–ª–∏ –ø–∞–¥–∞–µ—Ç, —Å–º–æ—Ç—Ä–∏ —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å—Ç–∞—Ä—ã–µ —É—Ä–æ–≤–Ω–∏.\n"
            "–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–∞–º –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞!"
        )


async def setup_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    photo = update.message.photo[-1]
    file = await photo.get_file()
    photo_bytes = await file.download_as_bytearray()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ BytesIO –¥–ª—è Telegram API
    image_stream = BytesIO(photo_bytes)
    image_stream.name = "setup.jpg"  # –≤–∞–∂–Ω–æ –¥–ª—è Telegram

    # –°–æ–±–∏—Ä–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ context.user_data
    instrument = context.user_data.get("instrument", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    risk_area = context.user_data.get("risk_area", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    targets = context.user_data.get("targets", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    stoploss = context.user_data.get("stoploss", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    caption = (
        f"üöÄ *–ù–æ–≤—ã–π —Å–µ—Ç–∞–ø –æ—Ç –∞–¥–º–∏–Ω–∞*\n\n"
        f"‚Ä¢ üìå *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:* {instrument}\n"
        f"‚Ä¢ üí∞ *–û–±–ª–∞—Å—Ç—å —Ä–∏—Å–∫–∞:* {risk_area}\n"
        f"‚Ä¢ üéØ *–¶–µ–ª–∏:* {targets}\n"
        f"‚Ä¢ üö® *–°—Ç–æ–ø-–ª–æ—Å—Å:* {stoploss}\n\n"
        f"üßÆ [–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é](https://t.me/ai4traders_bot)"
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        chat_id = '@ai4traders'
        message = await context.bot.send_photo(
            chat_id=chat_id,
            photo=image_stream,
            caption=caption,
            parse_mode="Markdown"
        )

        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º
        await context.bot.pin_chat_message(
            chat_id=chat_id,
            message_id=message.message_id,
            disable_notification=True
        )

        await update.message.reply_text("‚úÖ –°–µ—Ç–∞–ø –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –≤ –∫–∞–Ω–∞–ª–µ!", reply_markup=REPLY_MARKUP)

    except Exception as e:
        logging.error(f"[SETUP_PHOTO] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ—Ç–∞–ø. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ –∏ –ª–æ–≥–∏."
        )

    return ConversationHandler.END

def fetch_price_from_binance(symbol: str) -> float | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É —Å Binance —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π REST API.
    –ü—Ä–∏–º–µ—Ä: fetch_price_from_binance("BTC") –≤–µ—Ä–Ω—ë—Ç —Ü–µ–Ω—É BTCUSDT.
    """
    try:
        pair = symbol.upper() + "USDT"
        url = f"https://api.binance.com/api/v3/ticker/price?symbol={pair}"
        response = requests.get(url, timeout=10)
        data = response.json()
        return float(data["price"])
    except Exception as e:
        logging.warning(f"[BINANCE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
        return None


async def help_invest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text(
            "üîí –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ $25.",
            reply_markup=REPLY_MARKUP
        )
        return

    context.user_data.clear()
    context.user_data["awaiting_invest_question"] = True
    await update.message.reply_text(
        "üí° –ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—Ö–æ—á—É –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –Ω–∞ 3 –≥–æ–¥–∞¬ª –∏–ª–∏ ¬´–∫—É–¥–∞ –≤–ª–æ–∂–∏—Ç—å $5000 —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –Ω–∞ –ø–æ–ª–≥–æ–¥–∞¬ª)."
    )
    return

async def handle_invest_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_text = update.message.text.strip()

    # ü™ù –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ Binance –¥–ª—è BTC –∏ ETH
    try:
        btc_data = requests.get("https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT").json()
        eth_data = requests.get("https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT").json()
        btc_price = float(btc_data["price"])
        eth_price = float(eth_data["price"])
    except Exception as e:
        logging.error(f"[handle_invest_question] Binance price fetch error: {e}")
        btc_price = eth_price = None

    # üìù –§–æ—Ä–º–∏—Ä—É–µ–º prompt
    prompt = (
        "Imagine you are a top-tier investment strategist with over 20 years of experience in managing multi-asset portfolios, "
        "covering stocks, bonds, Forex, precious metals, and cryptocurrencies. "
        "You create robust, practical investment strategies specifically for clients from Russia who have access to Moscow Exchange (MOEX) instruments, "
        "Forex accounts through local brokers, and cryptocurrency exchanges.\n\n"
        f"Here is the client's question or goal: {user_text}\n\n"
    )

    # –ï—Å–ª–∏ —Ü–µ–Ω—ã –ø–æ–¥—Ç—è–Ω—É–ª–∏—Å—å ‚Äî –≤—Å—Ç–∞–≤–∏–º –∏—Ö –ø—Ä—è–º–æ –≤ prompt
    if btc_price and eth_price:
        prompt += (
            f"üìä For your reference, the current prices are:\n"
            f"- BTC: ${btc_price}\n"
            f"- ETH: ${eth_price}\n\n"
        )

    prompt += (
        "Your task is to provide a highly detailed, step-by-step personal investment strategy that feels like a professional, private consultation. "
        "Structure it clearly with short paragraphs, dashes and emojis ‚Äî do NOT use asterisks or long-winded paragraphs. "
        "Make your tone friendly and human, with simple explanations that a beginner can easily grasp, while still sounding like an expert.\n\n"
        "Be sure to cover these points exactly, without skipping:\n\n"
        "üëÄ Profile snapshot\n"
        "- Estimate the client's investment horizon (short, medium, long-term) and risk profile (aggressive, moderate, conservative) with a brief explanation.\n"
        "- Define their primary goal: capital growth, protection, or passive income.\n\n"
        "üìä Recommended portfolio breakdown\n"
        "- Suggest a balanced allocation only using instruments realistically available to Russian clients: MOEX stocks (Sberbank, Gazprom, etc.), OFZ bonds, Eurobonds, FinEx ETFs on MOEX, Forex pairs (EUR/USD, GBP/USD), cryptocurrencies (BTC, ETH, USDT), and protective assets like gold (XAU) and silver (XAG) via MOEX futures or bank metal accounts.\n"
        "- Give approximate percentages for each asset class, explain in simple terms why it‚Äôs included.\n"
        "- Highlight the role of gold and silver especially during uncertainty and crises.\n\n"
        "üí° Risk management & averaging tactics\n"
        "- Explain dollar-cost averaging (DCA) in plain language: buying gradually to smooth out prices.\n"
        "- Offer advice on partial profit taking (e.g. after +20-30% gains) and using simple stop-losses to protect capital.\n\n"
        "üåç Macro & market realities\n"
        "- List key macroeconomic and geopolitical risks relevant for Russian investors: Central Bank rates, inflation, RUB fluctuations, global tensions.\n"
        "- Explain in simple words how this portfolio helps protect against these risks.\n\n"
        "üöÄ Immediate next steps\n"
        "- Clearly state what the client should do now: open a brokerage account on MOEX, activate Forex, sign up on a crypto exchange.\n"
        "- How to set up automatic deposits or plan regular partial buys.\n"
        "- How often to review the portfolio (like every 3-6 months) and which metrics or events to watch.\n\n"
        "üìà Scenario playbook\n"
        "- What to do if markets rise: consider taking partial profits, maybe adding more positions.\n"
        "- What to do if markets drop: don‚Äôt panic, consider averaging down or holding.\n\n"
        "‚úÖ Final friendly summary\n"
        "- End with a short 2-3 line conclusion using emojis, such as: "
        "üöÄ Strategy for 3+ years, balanced risk, golden safety net, rebalance twice a year, building wealth step by step.\n\n"
        "IMPORTANT: Respond entirely in Russian. Be ultra-friendly, use plenty of emojis, keep sentences short and clear, explain all financial terms in plain words so even a total beginner can easily follow."
    )

    try:
        gpt_response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "user", "content": prompt}
            ],
            max_tokens=1000
        )

        analysis = gpt_response.choices[0].message.content.strip()
        if not analysis:
            await update.message.reply_text(
                "‚ö†Ô∏è GPT –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑."
            )
            return

        await update.message.reply_text(
            f"üíº –í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:\n\n{analysis}",
            reply_markup=REPLY_MARKUP
        )

    except Exception as e:
        logging.error(f"[handle_invest_question] GPT error: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è GPT –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
            "–ù–∞ –≥–ª–∞–∑: –¥–ª—è —É–º–µ—Ä–µ–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ –æ–±—ã—á–Ω–æ –¥–µ–ª–∞—é—Ç —Ç–∞–∫ üìä\n"
            "- 40-50% –∞–∫—Ü–∏–∏ MOEX (–°–±–µ—Ä, –ì–∞–∑–ø—Ä–æ–º –∏ –¥—Ä.)\n"
            "- 20-30% –æ–±–ª–∏–≥–∞—Ü–∏–∏ –û–§–ó –∏–ª–∏ –µ–≤—Ä–æ–æ–±–ª–∏–≥–∞—Ü–∏–∏\n"
            "- 10-15% –∑–æ–ª–æ—Ç–æ –∏ —Å–µ—Ä–µ–±—Ä–æ (XAU, XAG)\n"
            "- 10-15% –∫—Ä–∏–ø—Ç–∞ (BTC, ETH)\n"
            "- –∏ —á–∞—Å—Ç—å –≤ Forex (EUR/USD, GBP/USD) –¥–ª—è –≤–∞–ª—é—Ç–Ω–æ–π –ø–æ–¥—É—à–∫–∏.\n\n"
            "üìù –ü–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Ä–∞–∑ –≤ 6 –º–µ—Å—è—Ü–µ–≤, —É—Å—Ä–µ–¥–Ω—è–π –ø–æ–∫—É–ø–∫–∏ —á–∞—Å—Ç—è–º–∏ –∏ —Ñ–∏–∫—Å–∏—Ä—É–π —á–∞—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–∏ —Ä–æ—Å—Ç–µ +20-30%.\n"
            "–î–µ—Ç–∞–ª—å–Ω–µ–µ –ø–æ–¥—Å–∫–∞–∂—É –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞!"
        )
        context.user_data.clear()

async def generate_news_interpretation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # üîÑ –û—á–∏—Å—Ç–∏–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    news_type = context.user_data.pop("awaiting_news", None)
    user_text = update.message.text.strip()

    logging.info(f"[NEWS_INTERPRETATION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id}: {user_text}")

    context_label = (
        "üìÖ –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –∏–∑ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."
        if news_type == "calendar"
        else "üåê –≠—Ç–æ –æ–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –∏–ª–∏ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä—ã–Ω–∫–∏."
    )

    prompt = (
        "You are a senior market strategist with over 20 years of expertise in global macro analysis, "
        "covering economic calendar surprises, geopolitical shocks, and liquidity dynamics. "
        "You advise institutional funds, prop desks, and advanced retail traders. "
        "Your analysis is known for razor-sharp clarity, step-by-step logic, and real price level focus.\n\n"
        f"Event description provided by the user:\n{user_text}\n\n"
        f"{context_label}\n\n"
        "Create a comprehensive multi-part market analysis strictly in Russian. "
        "Structure it as a professional trading report with short paragraphs (1-3 sentences) for easy reading in Telegram.\n\n"

        "Your report must include:\n\n"
        "1Ô∏è‚É£ Brief clear summary of what this event means fundamentally. Is it positive or negative? Why?\n\n"
        "2Ô∏è‚É£ Deep dive into liquidity, volatility, and trader sentiment impact over the next 1-3 days.\n\n"
        "3Ô∏è‚É£ Two fully developed scenarios with nearby price levels:\n"
        "   ‚û°Ô∏è Bullish: triggers, stops fueling, resistance targets.\n"
        "   ‚û°Ô∏è Bearish: stop clusters, potential cascades, supports.\n\n"
        "4Ô∏è‚É£ Short historical parallel (1-2 sentences) from past 1-2 years.\n\n"
        "5Ô∏è‚É£ A final short direct actionable signal for traders' chat like:\n"
        "'LONG above $XXX, SL $YYY, TP $ZZZ ‚Äî wait for liquidity sweep.'\n\n"

        "‚ö†Ô∏è Do NOT use asterisks, underscores or any Markdown formatting. "
        "Write only in plain Russian text, with short paragraphs. "
        "Optionally use emojis to visually anchor sections if it feels natural. "
        "Never hedge with words like 'maybe', 'possibly' without strong justification. "
        "Every conclusion must be tied to logic, order flow or macro reasoning."
    )

    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )
        await update.message.reply_text(
            f"üìä –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏:\n\n{response.choices[0].message.content.strip()}",
            reply_markup=REPLY_MARKUP
        )
    except Exception as e:
        logging.error(f"[NEWS_INTERPRETATION] GPT error: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è GPT –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=REPLY_MARKUP
        )

async def teacher_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.strip() == "‚Ü©Ô∏è –í—ã–π—Ç–∏ –∏–∑ –æ–±—É—á–µ–Ω–∏—è":
        context.user_data.pop("awaiting_teacher_question", None)
        await update.message.reply_text(
            "üîô –¢—ã –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=REPLY_MARKUP
        )
        return

    user_text = update.message.text.strip()

    prompt = (
        "You are a professional trading and investing teacher with over 20 years of experience "
        "across cryptocurrency, forex, stock, and commodity markets. "
        "You have taught both retail traders and institutional clients. "
        "Your explanations are extremely clear, structured, and use simple language. "
        "You immediately explain any jargon with practical examples. "
        "You are patient and willing to break down complex ideas into simple terms.\n\n"
        f"Student's question:\n{user_text}\n\n"
        "Break your answer into structured steps with empty lines after each step or paragraph.\n\n"
        "Use emojis to visually anchor each section (like ‚û°Ô∏è, ‚ö†Ô∏è, ‚úÖ, üìà), but do NOT use asterisks or any Markdown-style bold or italics.\n\n"
        "Keep each paragraph short (1-3 sentences max) for easy reading in Telegram.\n\n"
        "1Ô∏è‚É£ Start with a short, direct thesis that answers the main question.\n\n"
        "2Ô∏è‚É£ Provide a detailed step-by-step explanation, with a blank line after each step.\n\n"
        "3Ô∏è‚É£ Include one example from the crypto market and one from forex or stocks.\n\n"
        "4Ô∏è‚É£ Point out the most common mistakes beginners make in this situation and how to avoid them.\n\n"
        "5Ô∏è‚É£ End with a short, practical tip (1-2 sentences) that the student can apply right now.\n\n"
        "‚ö†Ô∏è Never use empty words like 'maybe' or 'probably' without justification. "
        "Avoid clich√©s like 'don't worry' or 'everything will be fine'. "
        "Justify each conclusion with logic or examples.\n\n"
        "Respond STRICTLY in Russian."
    )

    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )

        education_keyboard = [["‚Ü©Ô∏è –í—ã–π—Ç–∏ –∏–∑ –æ–±—É—á–µ–Ω–∏—è"]]
        reply_markup = ReplyKeyboardMarkup(education_keyboard, resize_keyboard=True)

        await update.message.reply_text(
            f"üìñ –û–±—É—á–µ–Ω–∏–µ:\n\n{response.choices[0].message.content.strip()}",
            reply_markup=reply_markup
        )

    except Exception as e:
        logging.error(f"[TEACHER_RESPONSE] GPT error: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è GPT –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=REPLY_MARKUP
        )

async def handle_definition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop("awaiting_definition_term", None)
    term = update.message.text.strip()

    prompt = (
        f"You are a professional trader and educator with over 10 years of experience.\n\n"
        f"Explain in very simple terms what '{term}' means, as if teaching someone who is a complete beginner with zero trading experience.\n\n"
        "- Provide a short, clear definition in one or two sentences.\n"
        "- Then give a simple analogy (like comparing to a store, sports, or everyday life) so the concept becomes intuitive.\n"
        "- Finally, give a concrete example from trading practice where this term is used.\n\n"
        "Avoid unnecessary fluff and do not use professional jargon without immediately explaining it.\n"
        "Answer strictly in Russian."
    )

    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )
        await update.message.reply_text(
            f"üìò –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:\n{response.choices[0].message.content.strip()}",
            reply_markup=REPLY_MARKUP
        )
    except Exception as e:
        logging.error(f"[DEFINITION] GPT error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ—Ä–º–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def handle_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id

    logging.info(f"[handle_main] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {text}")

    if user_id not in ALLOWED_USERS and text not in ["üí∞ –ö—É–ø–∏—Ç—å", "‚ÑπÔ∏è –û –±–æ—Ç–µ"]:
        await update.message.reply_text(
            "üîí –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ $25.",
            reply_markup=REPLY_MARKUP
        )
        return

    reset_commands = [
        "üéØ –†–∏—Å–∫", "üå± –ü—Å–∏—Ö–æ–ª–æ–≥", "üîç –ê–Ω–∞–ª–∏–∑",
        "üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è", "üìö –¢–µ—Ä–º–∏–Ω",
        "üöÄ –°–∏–≥–Ω–∞–ª", "üìñ –û–±—É—á–µ–Ω–∏–µ",
        "üí∞ –ö—É–ø–∏—Ç—å", "‚ÑπÔ∏è –û –±–æ—Ç–µ", "üìå –°–µ—Ç–∞–ø"
    ]
    if text in reset_commands:
        saved_data = {k: v for k, v in context.user_data.items() if k in ("selected_market", "selected_strategy")}
        context.user_data.clear()
        context.user_data.update(saved_data)

    if text == "üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è":
        context.user_data["awaiting_invest_question"] = True
        await update.message.reply_text(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏ —Å–≤–æ—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—É—é —Ü–µ–ª—å, "
            "—á—Ç–æ–±—ã —è —Å–æ—Å—Ç–∞–≤–∏–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω BTC/ETH –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏."
        )
        return

    if text == "üéØ –†–∏—Å–∫":
        return await start_risk_calc(update, context)

    if text == "üå± –ü—Å–∏—Ö–æ–ª–æ–≥":
        return await start_therapy(update, context)

    if text == "üîç –ê–Ω–∞–ª–∏–∑":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="interpret_calendar")],
            [InlineKeyboardButton("–î—Ä—É–≥–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="interpret_other")]
        ])
        await update.message.reply_text(
            "–¢—ã —Ö–æ—á–µ—à—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è "
            "–∏–ª–∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä—ã–Ω–æ–∫?",
            reply_markup=keyboard
        )
        return

    if text == "üìñ –û–±—É—á–µ–Ω–∏–µ":
        context.user_data["awaiting_teacher_question"] = True
        await update.message.reply_text(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî —è –æ—Ç–≤–µ—á—É –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å 20+ –≥–æ–¥–∞–º–∏ –æ–ø—ã—Ç–∞ –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö."
        )
        return

    if text == "üìö –¢–µ—Ä–º–∏–Ω":
        context.user_data["awaiting_definition_term"] = True
        await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ—Ä–º–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å.")
        return

    if text == "üöÄ –°–∏–≥–Ω–∞–ª":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üíé Crypto", callback_data="market_crypto")],
            [InlineKeyboardButton("üí± Forex", callback_data="market_forex")]
        ])
        await update.message.reply_text(
            "‚ö° –î–ª—è –∫–∞–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ —Å–¥–µ–ª–∞—Ç—å –∞–Ω–∞–ª–∏–∑?",
            reply_markup=keyboard
        )
        return

    if text == "üí∞ –ö—É–ø–∏—Ç—å":
        if user_id in ALLOWED_USERS:
            await update.message.reply_text(
                "‚úÖ –£ —Ç–µ–±—è —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!",
                reply_markup=REPLY_MARKUP
            )
        else:
            await send_payment_link(update, context)
        return

    if text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        await update.message.reply_text(
            "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ CryptoCloud.\n"
            "–ù–∞–∂–º–∏ üí∞ –ö—É–ø–∏—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É.",
            reply_markup=REPLY_MARKUP
        )
        return

    if text == "üìå –°–µ—Ç–∞–ø":
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
            return
        await update.message.reply_text("‚úçÔ∏è –£–∫–∞–∂–∏ —Ç–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC/USDT):")
        return SETUP_1

    # üî• –£–º–Ω—ã–π —Å–±—Ä–æ—Å, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏/—Ä—ã–Ω–∫–∞
    if not any([
        context.user_data.get("awaiting_potential"),
        context.user_data.get("awaiting_email"),
        context.user_data.get("awaiting_invest_question"),
        context.user_data.get("awaiting_pro_question"),
        context.user_data.get("awaiting_teacher_question"),
        context.user_data.get("awaiting_definition_term"),
    ]):
        saved_data = {k: v for k, v in context.user_data.items() if k in ("selected_market", "selected_strategy")}
        context.user_data.clear()
        context.user_data.update(saved_data)
        await update.message.reply_text(
            "üîÑ –°–±—Ä–æ—Å –≤—Å–µ—Ö –æ–∂–∏–¥–∞–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π.",
            reply_markup=REPLY_MARKUP
        )

async def gpt_psychologist_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip()

    if user_text == "‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é":
        await update.message.reply_text("üîÅ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=REPLY_MARKUP)
        return ConversationHandler.END

    prompt = (
        "You are a GPT-psychologist for traders. "
        "You respond with warm irony and light humor, helping them cope with gambling addiction tendencies, losing streaks, and emotional swings. "
        "Avoid gender-specific words like 'bro' or 'girl', use neutral terms such as 'friend', 'colleague', or 'trader'.\n\n"
        f"User's message:\n{user_text}\n\n"
        "üìå Follow this exact structure:\n\n"
        "1Ô∏è‚É£ **React empathetically**, but without pity. Show you understand the feeling of losses.\n\n"
        "2Ô∏è‚É£ **Provide a metaphor** to help the trader realize that a drawdown isn't the end. "
        "For example: 'it's like pulling back a slingshot before it fires.'\n\n"
        "3Ô∏è‚É£ **Give a fact or story** showing that even top traders have losing streaks (like Soros or Druckenmiller). "
        "This builds confidence that everyone experiences losses.\n\n"
        "4Ô∏è‚É£ **Suggest one simple micro-action** to feel in control right now, like closing the terminal, journaling emotions, or stepping outside.\n\n"
        "5Ô∏è‚É£ **Finish with a trading meme or funny short quote**, e.g.: '‚Äî Are you holding a position? ‚Äî No, I'm holding back tears üò≠.'\n\n"
        "‚ö†Ô∏è Avoid generic phrases like 'don't worry' or 'everything will be fine'. Be specific, warm, and slightly ironic.\n"
        "Answer everything strictly in Russian."
    )

    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )

        therapy_keyboard = [["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(therapy_keyboard, resize_keyboard=True)

        await update.message.reply_text(
            f"üßò GPT-–ø—Å–∏—Ö–æ–ª–æ–≥:\n{response.choices[0].message.content.strip()}",
            reply_markup=reply_markup
        )
        return WAITING_FOR_THERAPY_INPUT

    except Exception as e:
        logging.error(f"[GPT_PSYCHOLOGIST] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        return WAITING_FOR_THERAPY_INPUT

async def start_therapy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    therapy_keyboard = [
        ["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]
    ]
    reply_markup = ReplyKeyboardMarkup(therapy_keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üòµ‚Äçüí´ –ù—É —á—Ç–æ, –æ–ø—è—Ç—å —Ä—ã–Ω–æ–∫ –ø–æ–±—Ä–∏–ª –∫–∞–∫ –±–∞—Ä–±–µ—Ä –≤ –ø—è—Ç–Ω–∏—Ü—É? –ë—ã–≤–∞–µ—Ç, –¥—Ä—É–∂–∏—â–µ.\n\n"
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å ‚Äî GPT-–ø—Å–∏—Ö–æ–ª–æ–≥ —Å –¥–æ–±—Ä–æ–π –∏—Ä–æ–Ω–∏–µ–π –≤—ã—Å–ª—É—à–∞–µ—Ç, –ø–æ–¥–±–æ–¥—Ä–∏—Ç –∏ –≤—Å—Ç–∞–≤–∏—Ç –º–µ–º.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ *¬´‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é¬ª*.",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    return WAITING_FOR_THERAPY_INPUT

# üöÄ –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ POS –¥–ª—è Telegram
async def send_payment_link(update, context):
    user_id = update.effective_user.id
    pay_link = (
        f"https://pay.cryptocloud.plus/pos/{CRYPTOCLOUD_SHOP_ID}"
        f"?amount=25&currency=USDT&network=TRC20&order_id=user_{user_id}&desc=GPT_Trader_Bot"
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoCloud", url=pay_link)]
    ])
    await update.message.reply_text(
        "üíµ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ GPT Trader Bot:",
        reply_markup=keyboard
    )

# üöÄ Flask webhook –¥–ª—è IPN –æ—Ç POS —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π HMAC
app_flask = Flask(__name__)

# ‚úÖ Healthcheck endpoint
@app_flask.route("/")
def index():
    return jsonify({"status": "ok", "allowed_users": len(get_allowed_users())})

# ‚úÖ Webhook –æ—Ç CryptoCloud
@app_flask.route("/cryptocloud_webhook", methods=["POST"])
def cryptocloud_webhook():
    body = request.get_data()
    signature = request.headers.get("X-Signature-SHA256")
    calc_sig = hmac.new(API_SECRET.encode(), body, hashlib.sha256).hexdigest()

    if signature != calc_sig:
        logging.warning(f"‚ö† –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å IPN: {signature} != {calc_sig}")
        return jsonify({"status": "invalid signature"})

    data = request.json
    logging.info(f"‚úÖ IPN –æ—Ç CryptoCloud:\n{json.dumps(data, indent=2, ensure_ascii=False)}")

    if data.get("status") == "paid":
        order_id = data.get("order_id")
        if order_id and order_id.startswith("user_"):
            try:
                user_id = int(order_id.split("_")[1])
            except (IndexError, ValueError):
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ user_id –≤ order_id: {order_id}")
                return jsonify({"status": "bad order_id"})

            username = order_id.split("_")[2] if len(order_id.split("_")) > 2 else ""

            # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–µ—à
            ALLOWED_USERS.add(user_id)
            # ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
            safe_append_row([str(user_id), username, datetime.now().strftime("%Y-%m-%d %H:%M:%S")])

            # ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram
            asyncio.run_coroutine_threadsafe(
                notify_user_payment(user_id),
                app_flask.loop
            )
            logging.info(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ POS!")

    return jsonify({"ok": True})

# üöÄ –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å loop
def run_flask(loop):
    app_flask.loop = loop
    port = int(os.environ.get("PORT", 5000))
    app_flask.run(host="0.0.0.0", port=port)

# üëá –í–°–¢–ê–í–¨ –ó–î–ï–°–¨:
ADMIN_IDS = {407721399}  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π user_id

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PHOTO_PATH = os.path.join(BASE_DIR, "GPT-–¢—Ä–µ–π–¥–µ—Ä –ø–æ–º–æ—â–Ω–∏–∫.png")

async def publish_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
        return

    caption = (
        "üöÄ *GPT-–¢—Ä–µ–π–¥–µ—Ä* ‚Äî —Ç–≤–æ–π Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä—ã–Ω–∫–∞ –∫—Ä–∏–ø—Ç—ã –∏ —Ñ–æ—Ä–µ–∫—Å–∞.\n\n"
        "üìä –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç?\n"
        "‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç –≤—Ö–æ–¥—ã, —Å—Ç–æ–ø—ã –∏ —Ü–µ–ª–∏ –ø–æ —Ç–≤–æ–∏–º —Å–∫—Ä–∏–Ω–∞–º –∑–∞ 10 —Å–µ–∫—É–Ω–¥\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç BOS, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å, –ø—Ä–æ–±–æ–∏, OTE (–ø–æ Smart Money)\n"
        "‚Ä¢ –°—Ç—Ä–æ–∏—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞ 1-2 –¥–Ω—è, –Ω–∞ –Ω–µ–¥–µ–ª—é –∏ –Ω–∞ –º–µ—Å—è—Ü\n"
        "‚Ä¢ –î–µ–ª–∞–µ—Ç –º–∞–∫—Ä–æ-–∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ –Ω–æ–≤–æ—Å—Ç–µ–π (–§–†–°, ETF, —Ö–∞—Ä–¥—Ñ–æ—Ä–∫–∏)\n"
        "‚Ä¢ –£—á–∏—Ç money-management –∏ –ø–æ–º–æ–≥–∞–µ—Ç –ø–µ—Ä–µ–∂–∏—Ç—å –º–∏–Ω—É—Å—ã —á–µ—Ä–µ–∑ GPT-–ø—Å–∏—Ö–æ–ª–æ–≥–∞ üòÖ\n\n"
        "üéØ –ü–ª—é—Å:\n"
        "‚Ä¢ VIP-—Å–µ—Ç–∞–ø—ã —Å —É—Ä–æ–≤–Ω—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª\n"
        "‚Ä¢ –ö—É—Ä—Å –ø–æ —Å–∫–∞–ª—å–ø–∏–Ω–≥—É –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∫–µ (10+ —É—Ä–æ–∫–æ–≤ –∏ PDF)\n\n"
        "üöÄ *–ü–æ–¥–∫–ª—é—á–∏ GPT-–¢—Ä–µ–π–¥–µ—Ä–∞ –≤—Å–µ–≥–æ –∑–∞ $25 –∏ –ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞.*\n\n"
        "üí∞ –ù–µ –ø–ª–∞—Ç–∏ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–π –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å.\n\n"
        "üí¨ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å üëâ [@zhbankov_alex](https://t.me/zhbankov_alex)\n"
        "üë• –ß–∞—Ç –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ üëâ [ai4traders_chat](https://t.me/ai4traders_chat)"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", url="https://t.me/Cripto_inter_bot")]
    ])

    try:
        chat_id = '@ai4traders'
        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –∑–∞–∫—Ä–µ–ø, –µ—Å–ª–∏ –µ—Å—Ç—å
        old_pins = await context.bot.get_chat(chat_id)
        if old_pins.pinned_message:
            await context.bot.unpin_chat_message(chat_id=chat_id, message_id=old_pins.pinned_message.message_id)

        # –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
        with open(PHOTO_PATH, "rb") as photo:
            message = await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=caption,
                parse_mode="Markdown",
                reply_markup=keyboard
            )

        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º
        await context.bot.pin_chat_message(
            chat_id=chat_id,
            message_id=message.message_id,
            disable_notification=True
        )

        await update.message.reply_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –≤ –∫–∞–Ω–∞–ª–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞.")
    except Exception as e:
        logging.error(f"[PUBLISH] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª, –ø—Ä–∞–≤–∞ –∏ –ª–æ–≥–∏.")


async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
        return

    args = context.args
    if not args:
        await update.message.reply_text("‚úçÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫:\n/broadcast –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è VIP –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        return

    message_text = " ".join(args)
    success_count = 0
    failed_users = []

    for vip_id in ALLOWED_USERS:
        try:
            await context.bot.send_message(
                chat_id=vip_id,
                text=f"üöÄ *VIP-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞:*\n\n{message_text}",
                parse_mode="Markdown"
            )
            success_count += 1
        except Exception as e:
            logging.error(f"[BROADCAST] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å VIP {vip_id}: {e}")
            failed_users.append(vip_id)

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        f"{'‚ö†Ô∏è –û—à–∏–±–∫–∏ —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.' if failed_users else ''}"
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
        return

    try:
        records = sheet.get_all_records()
        total_records = len(records)
        allowed_count = len(ALLOWED_USERS)

        last_entry = records[-1] if records else {}

        msg = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ ALLOWED_USERS: {allowed_count}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ Google Sheets: {total_records}\n\n"
            f"üìù –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å:\n"
            f"{json.dumps(last_entry, ensure_ascii=False, indent=2)}"
        )
        await update.message.reply_text(msg)
    except Exception as e:
        logging.error(f"[STATS] –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
        return

    try:
        records = sheet.get_all_records()

        from io import StringIO
        csv_file = StringIO()
        writer = csv.DictWriter(csv_file, fieldnames=["user_id", "username", "email", "date"])
        writer.writeheader()
        for row in records:
            writer.writerow({
                "user_id": row.get("user_id", ""),
                "username": row.get("username", ""),
                "email": row.get("email", ""),
                "date": row.get("date", "")
            })

        csv_file.seek(0)
        await update.message.reply_document(
            document=("users_export.csv", csv_file.getvalue()),
            filename="users_export.csv",
            caption="üì• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ email –∏–∑ Google Sheets"
        )
    except Exception as e:
        logging.error(f"[EXPORT] –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

async def unified_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    # ‚úÖ –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ "/start" –∏ "/restart"
    if text == "/start":
        await start(update, context)
        return
    elif text == "/restart":
        await restart(update, context)
        return

    # ‚úÖ –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ email
    if context.user_data.get("awaiting_email"):
        email = text
        if "@" in email and "." in email:
            try:
                sheet.append_row([
                    str(update.effective_user.id),
                    update.effective_user.username or "",
                    email
                ])
                await update.message.reply_text(
                    "‚úÖ Email —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ë–æ–Ω—É—Å –ø—Ä–∏–¥—ë—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                )
            except Exception as e:
                logging.error(f"[EMAIL_SAVE] {e}")
                await update.message.reply_text(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
                )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ email. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
            )
            return
        context.user_data.pop("awaiting_email", None)
        return

    # ‚úÖ –ë–ª–æ–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    elif context.user_data.get("awaiting_news"):
        await generate_news_interpretation(update, context)
        return

    # ‚úÖ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã
    elif context.user_data.get("awaiting_potential"):
        await handle_potential(update, context)
    elif context.user_data.get("awaiting_definition_term"):
        await handle_definition(update, context)
    elif context.user_data.get("awaiting_invest_question"):
        await handle_invest_question(update, context)
    elif context.user_data.get("awaiting_teacher_question"):
        await teacher_response(update, context)
    else:
        await handle_main(update, context)

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=REPLY_MARKUP)
    return ConversationHandler.END

async def post_init(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("restart", "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    ])

def main():
    global global_bot  # –æ–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π bot –¥–ª—è notify_user_payment

    # üöÄ –°–æ–∑–¥–∞—ë–º –≥–ª–∞–≤–Ω—ã–π asyncio loop
    loop = asyncio.get_event_loop()

    # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Flask webhook –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –ø–µ—Ä–µ–¥–∞—ë–º loop
    threading.Thread(target=run_flask, args=(loop,)).start()

    # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(post_init).build()
    logging.info("üöÄ GPT-–¢—Ä–µ–π–¥–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª!")

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º bot –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    global_bot = app.bot

    # ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π error handler
    async def error_handler(update, context):
        logging.error(f"‚ùå Exception: {context.error}")
        if update and update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    app.add_error_handler(error_handler)

    # üîÑ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ ENV cron
    CRON_TIME = os.getenv("CRON_TIME", "0 12 * * mon")
    @aiocron.crontab(CRON_TIME)
    async def weekly_broadcast():
        message_text = (
            "üöÄ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä:\n"
            "‚Ä¢ BTC —Å–µ–π—á–∞—Å –æ–∫–æ–ª–æ $108,700 ‚Äî –∑–æ–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞ $108,000‚Äì109,000.\n"
            "‚Ä¢ ETH –¥–µ—Ä–∂–∏—Ç—Å—è –Ω–∞ $2,576 ‚Äî –∏—â–µ–º –ø–æ–∫—É–ø–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ $2,520‚Äì2,600.\n"
            "‚Ä¢ –°—Ç–æ–ø—ã –¥–µ—Ä–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ, —Ü–µ–ª–∏ —Ñ–∏–∫—Å–∏—Ä—É–π –ø–æ R:R ~2:1."
        )
        success, fails = 0, []
        for vip_id in get_allowed_users():
            try:
                await app.bot.send_message(chat_id=vip_id, text=message_text)
                success += 1
            except Exception as e:
                logging.error(f"[WEEKLY BROADCAST] {vip_id}: {e}")
                fails.append(vip_id)
        logging.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success} —É—Å–ø–µ—Ö–æ–≤, {len(fails)} –æ—à–∏–±–æ–∫.")

    # üßò GPT-–ü—Å–∏—Ö–æ–ª–æ–≥
    therapy_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üßò –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ$"), start_therapy)],
        states={WAITING_FOR_THERAPY_INPUT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, gpt_psychologist_response)
        ]},
        fallbacks=[
            CommandHandler("start", start, block=False),
            CommandHandler("restart", restart, block=False),
            MessageHandler(filters.Regex("^üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), restart)
        ]
    )

    # üìè –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞
    risk_calc_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìè –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞$"), start_risk_calc)],
        states={
            RISK_CALC_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, risk_calc_deposit)],
            RISK_CALC_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, risk_calc_risk_percent)],
            RISK_CALC_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, risk_calc_stoploss)],
        },
        fallbacks=[
            CommandHandler("start", start, block=False),
            CommandHandler("restart", restart, block=False),
            MessageHandler(filters.Regex("^üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), restart)
        ]
    )

    # üìå –°–µ—Ç–∞–ø
    setup_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìå –°–µ—Ç–∞–ø$"), handle_main)],
        states={
            SETUP_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, setup_instrument)],
            SETUP_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, setup_risk_area)],
            SETUP_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, setup_targets)],
            SETUP_4: [MessageHandler(filters.TEXT & ~filters.COMMAND, setup_stoploss)],
            SETUP_5: [MessageHandler(filters.PHOTO, setup_photo)],
        },
        fallbacks=[
            CommandHandler("start", start, block=False),
            CommandHandler("restart", restart, block=False),
            MessageHandler(filters.Regex("^üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), restart)
        ]
    )

    # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandlers
    app.add_handler(therapy_handler)
    app.add_handler(risk_calc_handler)
    app.add_handler(setup_handler)

    # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start, block=False))
    app.add_handler(CommandHandler("restart", restart, block=False))
    app.add_handler(CommandHandler("publish", publish_post))
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(CommandHandler("grant", grant))
    app.add_handler(CommandHandler("reload_users", reload_users))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("export", export))

    # ‚úÖ –§–æ—Ç–æ, inline –∫–Ω–æ–ø–∫–∏ –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unified_text_handler))

    # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º polling
    app.run_polling()

def log_payment(user_id, username):
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        safe_append_row([str(user_id), username, timestamp])
        logging.info(f"üßæ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ Google Sheets: {user_id}, {username}, {timestamp}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

async def notify_user_payment(user_id):
    try:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="start_menu")],
            [InlineKeyboardButton("üéØ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", url="https://—Ç–≤–æ—è_—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è_—Å—Ç—Ä–∞–Ω–∏—Ü–∞.com")]
        ])

        await global_bot.send_message(
            chat_id=user_id,
            text=(
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞ üéâ\n\n"
                "ü§ñ GPT-–ø–æ–º–æ—â–Ω–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω: –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–≥—Ä—É–∂–∞–π –≥—Ä–∞—Ñ–∏–∫–∏, –ø–æ–ª—É—á–∞–π –ø—Ä–æ–≥–Ω–æ–∑—ã.\n\n"
                "üéÅ –¢–≤–æ–π –±–æ–Ω—É—Å ‚Äî –∫—É—Ä—Å –ø–æ —Å–∫–∞–ª—å–ø–∏–Ω–≥—É –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∫–µ:\n"
                "üëâ [–û—Ç–∫—Ä—ã—Ç—å –∫—É—Ä—Å –≤ Google Drive](https://drive.google.com/drive/folders/1EEryIr4RDtqM4WyiMTjVP1XiGYJVxktA?clckid=3f56c187)\n\n"
                "üéØ –ü–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–≥–æ–º –∏ –ø–æ–ª—É—á–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π PDF –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º!"
            ),
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        logging.info(f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

if __name__ == '__main__':
    main()











