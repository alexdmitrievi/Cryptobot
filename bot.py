import logging
import asyncio
import re
import requests
from telegram import Update, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, ConversationHandler
from config import TELEGRAM_TOKEN, OPENAI_API_KEY
from openai import AsyncOpenAI
from PIL import Image
import io
import base64

client = AsyncOpenAI(api_key=OPENAI_API_KEY)
logging.basicConfig(level=logging.INFO)

ALLOWED_USERS = {407721399, 592270446}  # —Å—é–¥–∞ –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª—è–π user_id –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
TEST_USERS = set()

reply_keyboard = [
    ["üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∞–∫—Ç–∏–≤—É", "üß† –ü–æ–º–æ—â—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞"],
    ["üìà –ì—Ä–∞—Ñ–∏–∫ —Å —É—Ä–æ–≤–Ω—è–º–∏", "üßò –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"],
    ["üìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞", "üìè –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞"],
    ["üí∞ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞ $25", "üíµ –û –ø–æ–¥–ø–∏—Å–∫–µ"],
    ["üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"]
]
REPLY_MARKUP = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

INTERPRET_NEWS, ASK_EVENT, ASK_FORECAST, ASK_ACTUAL, GENERAL_QUESTION, FOLLOWUP_1, FOLLOWUP_2, FOLLOWUP_3 = range(8)
user_inputs = {}

WAITING_FOR_PHOTO = set()
WAITING_FOR_THERAPY_INPUT = 100

RISK_CALC_1, RISK_CALC_2, RISK_CALC_3 = range(101, 104)

async def start_risk_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìä –í–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ $:")
    return RISK_CALC_1

async def risk_calc_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["deposit"] = float(update.message.text.strip())
        await update.message.reply_text("üí° –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É (%):")
        return RISK_CALC_2
    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 1000")
        return RISK_CALC_1

async def risk_calc_risk_percent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["risk_percent"] = float(update.message.text.strip())
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å –ø–æ —Å–¥–µ–ª–∫–µ (%):")
        return RISK_CALC_3
    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 2")
        return RISK_CALC_2

async def risk_calc_stoploss(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        stoploss_percent = float(update.message.text.strip())
        deposit = context.user_data["deposit"]
        risk_percent = context.user_data["risk_percent"]

        risk_amount = deposit * risk_percent / 100
        position_size = risk_amount / (stoploss_percent / 100)

        await update.message.reply_text(
            f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
            f"‚Ä¢ –î–µ–ø–æ–∑–∏—Ç: ${deposit:.2f}\n"
            f"‚Ä¢ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {risk_percent:.2f}% (${risk_amount:.2f})\n"
            f"‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: {stoploss_percent:.2f}%\n\n"
            f"üìå –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–±—ä—ë–º –ø–æ–∑–∏—Ü–∏–∏: **${position_size:.2f}**",
            reply_markup=REPLY_MARKUP,
            parse_mode="Markdown"
        )
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 1.5")
        return RISK_CALC_3

async def check_access(update: Update):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ê–∫—Ç–∏–≤–∏—Ä—É–π —Ç–µ—Å—Ç –∏–ª–∏ –æ–ø–ª–∞—Ç–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞.", reply_markup=REPLY_MARKUP)
        return False
    return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=REPLY_MARKUP)
    return ConversationHandler.END

async def help_pro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update): return ConversationHandler.END
    context.user_data.clear()  # <‚Äî –¥–æ–±–∞–≤—å —ç—Ç–æ
    await update.message.reply_text("–¢—ã —Ö–æ—á–µ—à—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å? (–¥–∞/–Ω–µ—Ç)", reply_markup=ReplyKeyboardRemove())
    return INTERPRET_NEWS

async def interpret_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    if text == "–¥–∞":
        await update.message.reply_text("–ß—Ç–æ –∑–∞ –Ω–æ–≤–æ—Å—Ç—å?")
        return ASK_EVENT
    elif text == "–Ω–µ—Ç":
        await update.message.reply_text("–•–æ—Ä–æ—à–æ. –î–ª—è —Ç–æ—á–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n1. –¢–≤–æ–π —Å—Ç–∏–ª—å —Ç–æ—Ä–≥–æ–≤–ª–∏? (—Å–∫–∞–ª—å–ø–∏–Ω–≥, –ø–æ–∑–∏—Ü–∏–æ–Ω–∫–∞ –∏–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏)")
        return FOLLOWUP_1
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")
        return INTERPRET_NEWS

async def followup_strategy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["style"] = update.message.text.strip()
    await update.message.reply_text("2. –ù–∞ –∫–∞–∫–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ —Ç—ã —á–∞—â–µ –≤—Å–µ–≥–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å —Å–¥–µ–ª–∫–∏?")
    return FOLLOWUP_2

async def followup_timeframe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["timeframe"] = update.message.text.strip()
    await update.message.reply_text("3. –ù–∞ –∫–∞–∫–æ–º —Ä—ã–Ω–∫–µ —Ç—ã —Ç–æ—Ä–≥—É–µ—à—å? (–∫—Ä–∏–ø—Ç–∞, —Ñ–æ—Ä–µ–∫—Å, —Ñ–æ–Ω–¥–æ–≤—ã–π, —Å—ã—Ä—å—ë –∏ —Ç.–¥.)")
    return FOLLOWUP_3

async def followup_market(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["market"] = update.message.text.strip()
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
    return GENERAL_QUESTION

async def ask_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_inputs[update.effective_user.id] = {"event": update.message.text.strip()}
    await update.message.reply_text("–ö–∞–∫–æ–π –±—ã–ª –ø—Ä–æ–≥–Ω–æ–∑?")
    return ASK_FORECAST

async def ask_actual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_inputs[update.effective_user.id]["forecast"] = update.message.text.strip()
    await update.message.reply_text("–ö–∞–∫–æ–π —Ñ–∞–∫—Ç? (—Ä–µ–∑—É–ª—å—Ç–∞—Ç)")
    return ASK_ACTUAL

async def generate_interpretation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_inputs[update.effective_user.id]["actual"] = update.message.text.strip()
    data = user_inputs[update.effective_user.id]
    prompt = (
        f"–°–æ–±—ã—Ç–∏–µ: {data['event']}\n"
        f"–ü—Ä–æ–≥–Ω–æ–∑: {data['forecast']}\n"
        f"–§–∞–∫—Ç: {data['actual']}\n\n"
        f"–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä —Å 10+ –≥–æ–¥–∞–º–∏ –æ–ø—ã—Ç–∞ –∏–º–µ–Ω–Ω–æ –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–µ.\n"
        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –µ—ë –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞, –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤ –∏ –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–∫–µ.\n"
        f"–î–∞–π –∫—Ä–∞—Ç–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –≤—ã–≤–æ–¥: —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è, —É—Ä–æ–≤–Ω–∏, —Ä–∏—Å–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º —Ç—Ä–µ–π–¥–µ—Ä–∞.\n"
        f"–ü–∏—à–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ, –∏–∑–±–µ–≥–∞–π —Ñ—Ä–∞–∑ '–≤–æ–∑–º–æ–∂–Ω–æ', '–ø–æ-–≤–∏–¥–∏–º–æ–º—É'."
    )
    
    response = await client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    await update.message.reply_text(f"üìö GPT:\n{response.choices[0].message.content.strip()}", reply_markup=REPLY_MARKUP)
    return ConversationHandler.END


async def general_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip()
    style = context.user_data.get("style", "—Ç—Ä–µ–π–¥–∏–Ω–≥")
    tf = context.user_data.get("timeframe", "–ª—é–±–æ–º")
    market = context.user_data.get("market", "–æ–±—â–∏–π")

    prompt = (
        f"–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä —Å 10+ –≥–æ–¥–∞–º–∏ –æ–ø—ã—Ç–∞. –û—Ç–≤–µ—á–∞–π —É–≤–µ—Ä–µ–Ω–Ω–æ, –∏–∑–±–µ–≥–∞–π —Ñ—Ä–∞–∑ '–≤–æ–∑–º–æ–∂–Ω–æ', '–ø–æ-–≤–∏–¥–∏–º–æ–º—É'.\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—Ä–≥—É–µ—Ç: {style}. –¢–∞–π–º—Ñ—Ä–µ–π–º: {tf}. –†—ã–Ω–æ–∫: {market}.\n"
        f"–í–æ–ø—Ä–æ—Å: {user_text}\n"
        f"–î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é, –ø—Ä–∞–∫—Ç–∏—á–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é."
    )
    response = await client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    await update.message.reply_text(f"üìö GPT:\n{response.choices[0].message.content.strip()}", reply_markup=REPLY_MARKUP)
    return ConversationHandler.END

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if query.data == "show_wallet":
        await query.edit_message_text(
            "üí∏ –û—Ç–ø—Ä–∞–≤—å USDT (TON) –Ω–∞ –∞–¥—Ä–µ—Å:\n\n"
            "`UQC4nBKWF5sO2UIP9sKl3JZqmmRlsGC5B7xM7ArruA61nTGR`\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å TX hash –∞–¥–º–∏–Ω—É –∏–ª–∏ –ø—Ä—è–º–æ —Å—é–¥–∞."
        )

    elif query.data == "forecast_by_image":
        WAITING_FOR_PHOTO.add(user_id)
        context.user_data["awaiting_macro_for_image"] = True
        await query.edit_message_text(
            "üì∏ –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω –≥—Ä–∞—Ñ–∏–∫–∞ (4H —Ç–∞–π–º—Ñ—Ä–µ–π–º), –∏ —è –¥–∞–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
        )

    elif query.data == "forecast_by_price":
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC, ETH, XRP –∏ —Ç.–¥.):"
        )
        context.user_data["awaiting_asset_name"] = True

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    photo = update.message.photo[-1]
    file = await photo.get_file()
    photo_bytes = await file.download_as_bytearray()

    # üìà –ì—Ä–∞—Ñ–∏–∫ —Å —É—Ä–æ–≤–Ω—è–º–∏
    if context.user_data.get("awaiting_chart"):
        context.user_data.pop("awaiting_chart")
        try:
            vision_response = await client.chat.completions.create(
                model="gpt-4o",
                messages=[{
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –û–ø—Ä–µ–¥–µ–ª–∏ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è, —Ç—Ä–µ–Ω–¥ –∏ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞."},
                        {"type": "image_url", "image_url": {
                            "url": f"data:image/jpeg;base64,{base64.b64encode(photo_bytes).decode()}"
                        }}
                    ]
                }],
                max_tokens=600
            )
            analysis = vision_response.choices[0].message.content.strip()
            await update.message.reply_text(f"üìâ –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞:\n{analysis}", reply_markup=REPLY_MARKUP)
        except Exception as e:
            logging.error(f"[awaiting_chart] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    # üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ —Å–∫—Ä–∏–Ω—É –≥—Ä–∞—Ñ–∏–∫–∞ (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
    if context.user_data.get("awaiting_macro_for_image"):
        context.user_data["graph_image_base64"] = base64.b64encode(photo_bytes).decode("utf-8")
        context.user_data["awaiting_macro_for_image"] = True
        await update.message.reply_text(
            "üß† –ß—Ç–æ —Å–µ–π—á–∞—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –º–∏—Ä–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, —Ä–µ—à–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–æ–≤ –∏ —Ç.–¥.)"
        )
        return

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ä–µ–∂–∏–º –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
    await update.message.reply_text("ü§ñ –ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

async def handle_macro_for_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_macro_for_image"):
        return

    del context.user_data["awaiting_macro_for_image"]
    macro = update.message.text.strip()
    image_base64 = context.user_data.pop("graph_image_base64", None)

    if not image_base64:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    prompt = (
        "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 10 –ª–µ—Ç.\n"
        "–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≥—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ 4H —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ.\n"
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: —É—Ä–æ–≤–Ω–∏, —Ç—Ä–µ–Ω–¥—ã, —Ñ–∏–≥—É—Ä—ã –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã.\n\n"
        f"–¢–∞–∫–∂–µ —É—á—Ç–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ñ–æ–Ω:\n{macro}\n\n"
        "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –≤—ã–≤–æ–¥: –≤–æ–∑–º–æ–∂–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Ä–∏—Å–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞.\n"
        "–û—Ç–≤–µ—á–∞–π —É–≤–µ—Ä–µ–Ω–Ω–æ, –∏–∑–±–µ–≥–∞–π —Ñ—Ä–∞–∑ '–≤–æ–∑–º–æ–∂–Ω–æ', '–ø–æ-–≤–∏–¥–∏–º–æ–º—É'."
    )

    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "user", "content": [
                    {"type": "text", "text": prompt},
                    {"type": "image_url", "image_url": {
                        "url": f"data:image/jpeg;base64,{image_base64}"
                    }}
                ]}
            ],
            max_tokens=600
        )

        await update.message.reply_text(
            f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É —Å —É—á—ë—Ç–æ–º —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞:\n{response.choices[0].message.content.strip()}",
            reply_markup=REPLY_MARKUP
        )

    except Exception as e:
        logging.error(f"[MACRO_GRAPH] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def handle_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id

    # üìç –ö–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    known_buttons = [
        "üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∞–∫—Ç–∏–≤—É", "üß† –ü–æ–º–æ—â—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞",
        "üìà –ì—Ä–∞—Ñ–∏–∫ —Å —É—Ä–æ–≤–Ω—è–º–∏", "üßò –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ",
        "üìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞", "üìè –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞",
        "üí∞ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞ $25", "üíµ –û –ø–æ–¥–ø–∏—Å–∫–µ", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    ]
    if text in known_buttons:
        context.user_data.clear()
        await update.message.reply_text("üîÑ –°–±—Ä–æ—Å –≤—Å–µ—Ö –æ–∂–∏–¥–∞–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π.", reply_markup=REPLY_MARKUP)
        return ConversationHandler.END

    # üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
    if text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        context.user_data.clear()
        await update.message.reply_text("üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=REPLY_MARKUP)
        return ConversationHandler.END

    # üìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞
    if text == "üìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞":
        await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ—Ä–º–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å. –ü—Ä–∏–º–µ—Ä: —à–æ—Ä—Ç")
        return

    # üìà –ì—Ä–∞—Ñ–∏–∫ —Å —É—Ä–æ–≤–Ω—è–º–∏
    if text == "üìà –ì—Ä–∞—Ñ–∏–∫ —Å —É—Ä–æ–≤–Ω—è–º–∏":
        await update.message.reply_text("üì∑ –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω –≥—Ä–∞—Ñ–∏–∫–∞ ‚Äî —è –Ω–∞–π–¥—É —É—Ä–æ–≤–Ω–∏ –∏ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É—é —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Ä—ã–Ω–∫–µ")
        context.user_data["awaiting_chart"] = True
        return

    # üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∞–∫—Ç–∏–≤—É
    if text == "üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∞–∫—Ç–∏–≤—É":
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üì∑ –ü—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω", callback_data="forecast_by_image"),
                InlineKeyboardButton("üî¢ –í–≤–µ—Å—Ç–∏ —Ü–µ–Ω—É", callback_data="forecast_by_price")
            ]
        ])
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=keyboard)
        return

    # üß† –ü–æ–º–æ—â—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞ (GPT-–∞–Ω–∞–ª–∏—Ç–∏–∫)
    if text == "üß† –ü–æ–º–æ—â—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞":
        if user_id not in ALLOWED_USERS:
            await update.message.reply_text("üîí –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ $25.", reply_markup=REPLY_MARKUP)
            return
        await update.message.reply_text(
            "üßë‚Äçüíº –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º –∏–ª–∏ –∞–Ω–∞–ª–∏–∑—É ‚Äî GPT-–∞–Ω–∞–ª–∏—Ç–∏–∫ –æ—Ç–≤–µ—Ç–∏—Ç.",
            reply_markup=REPLY_MARKUP
        )
        context.user_data["awaiting_pro_question"] = True
        return

    # üßò –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ
    if text == "üßò –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ":
        await update.message.reply_text(
            "üòµ –ù—É —á—Ç–æ, –æ–ø—è—Ç—å —Ä—ã–Ω–æ–∫ –ø–æ–±—Ä–∏–ª –∫–∞–∫ –±–∞—Ä–±–µ—Ä –≤ –ø—è—Ç–Ω–∏—Ü—É? –ë—ã–≤–∞–µ—Ç, –¥—Ä—É–∂–∏—â–µ.\n\n"
            "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å ‚Äî GPT-–ø—Å–∏—Ö–æ–ª–æ–≥ —Å –¥–æ–±—Ä–æ–π –∏—Ä–æ–Ω–∏–µ–π –≤—ã—Å–ª—É—à–∞–µ—Ç, –ø–æ–¥–±–æ–¥—Ä–∏—Ç –∏ –≤—Å—Ç–∞–≤–∏—Ç –º–µ–º.\n\n"
            "–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ¬´‚è© –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é¬ª.",
            reply_markup=ReplyKeyboardMarkup([["‚è© –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )
        context.user_data["awaiting_therapy"] = True
        return

    # üí∞ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞ $25
    if "–ü–æ–¥–∫–ª—é—á–∏—Ç—å" in text or "–û–ø–ª–∞—Ç–∏—Ç—å" in text:
        await update.message.reply_text(
            "üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: **–Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞ $25**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å USDT –≤ —Å–µ—Ç–∏ TON –Ω–∞ –∞–¥—Ä–µ—Å:\n\n"
            "`UQC4nBKWF5sO2UIP9sKl3JZqmmRlsGC5B7xM7ArruA61nTGR`\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏ TX hash –∞–¥–º–∏–Ω—É –∏–ª–∏ —Å—é–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
            reply_markup=REPLY_MARKUP,
            parse_mode="Markdown"
        )
        return

    # üíµ –û –ø–æ–¥–ø–∏—Å–∫–µ
    if "–û –ø–æ–¥–ø–∏—Å–∫–µ" in text:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ TON", callback_data="show_wallet")]
        ])
        await update.message.reply_text(
            "üîê **–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ—Å—Ç—É–ø–∞**\n\n"
            "‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞: **–Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞ $25**\n"
            "‚Ä¢ –û–ø–ª–∞—Ç–∞: USDT (TON)\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å—é–¥–∞.",
            reply_markup=keyboard
        )
        return

    # üìè –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞ (–≤–≤–æ–¥ –ø–æ —à–∞–≥–∞–º)
    if text == "üìè –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞":
        context.user_data["awaiting_deposit"] = True
        await update.message.reply_text("üìä –í–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ $:")
        return

    if context.user_data.get("awaiting_deposit"):
        try:
            deposit = float(text.replace(",", "."))
            context.user_data["deposit"] = deposit
            context.user_data["awaiting_deposit"] = False
            context.user_data["awaiting_risk"] = True
            await update.message.reply_text("üìâ –í–≤–µ–¥–∏ —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É –≤ %:")
        except:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 1000")
        return

    if context.user_data.get("awaiting_risk"):
        try:
            risk_percent = float(text.replace(",", "."))
            context.user_data["risk_percent"] = risk_percent
            context.user_data["awaiting_risk"] = False
            context.user_data["awaiting_sl"] = True
            await update.message.reply_text("üõë –í–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –≤ $:")
        except:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 1000")
        return

    if context.user_data.get("awaiting_sl"):
        try:
            sl = float(text.replace(",", "."))
            deposit = context.user_data.pop("deposit")
            risk_percent = context.user_data.pop("risk_percent")
            context.user_data.pop("awaiting_sl")

            risk_usd = deposit * risk_percent / 100
            position_size = risk_usd / sl

            await update.message.reply_text(
                f"üìè –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: `{position_size:.2f}$`\n"
                f"(—Ä–∏—Å–∫ {risk_percent:.2f}%, —Å—Ç–æ–ø {sl}$, –¥–µ–ø–æ–∑–∏—Ç {deposit}$)",
                reply_markup=REPLY_MARKUP,
                parse_mode="Markdown"
            )
        except:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 1000")
        return

    # üß† –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É
    if context.user_data.get("awaiting_pro_question"):
        context.user_data.pop("awaiting_pro_question")
        prompt = (
            f"–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ:\n\n"
            f"{text}\n\n"
            f"–û–±—ä—è—Å–Ω–∏ –∫—Ä–∞—Ç–∫–æ, –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –∏–∑–±–µ–≥–∞–π –≤–æ–¥—ã –∏ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑. –°—Ç–∏–ª—å ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π."
        )
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        await update.message.reply_text(
            f"üìò –û—Ç–≤–µ—Ç:\n{response.choices[0].message.content.strip()}",
            reply_markup=REPLY_MARKUP
        )
        return

    # üñºÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ —Å–∫—Ä–∏–Ω—É
    if context.user_data.get("awaiting_macro_for_image"):
        await handle_macro_for_image(update, context)
        return

    # üìò –ê–≤—Ç–æ–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞
    if 2 <= len(text) <= 40 and len(text.split()) <= 3 and all(c.isalnum() or c in "-_ " for c in text):
        prompt = (
            f"–¢—ã ‚Äî –∫—Ä–∏–ø—Ç–æ-—Ç—Ä–µ–π–¥–µ—Ä –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫. –û–±—ä—è—Å–Ω–∏ —Ç–µ—Ä–º–∏–Ω –∏–∑ –º–∏—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞:\n"
            f"{text.strip()}\n\n"
            f"üî∏ –û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç–æ, –±–µ–∑ –∞–∫–∞–¥–µ–º–∏—á–Ω–æ—Å—Ç–∏.\n"
            f"üî∏ –ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä –∏–∑ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞.\n"
            f"üî∏ –ò–∑–±–µ–≥–∞–π —Å–ª–∏—à–∫–æ–º –æ–±—â–µ–≥–æ —Å—Ç–∏–ª—è ‚Äî –¥–µ–ª–∞–π —É–ø–æ—Ä –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É —Ç—Ä–µ–π–¥–µ—Ä–∞."
        )
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        await update.message.reply_text(
            f"üìò –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n{response.choices[0].message.content.strip()}",
            reply_markup=REPLY_MARKUP
        )
        return

    # ü§ñ –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –≤–≤–æ–¥
    await update.message.reply_text("ü§ñ –Ø –Ω–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=REPLY_MARKUP)


async def gpt_psychologist_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip()

    if user_text == "‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é":
        await update.message.reply_text("üîÅ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=REPLY_MARKUP)
        return ConversationHandler.END

    prompt = (
        "–¢—ã ‚Äî GPT-–ø—Å–∏—Ö–æ–ª–æ–≥ —Å —é–º–æ—Ä–æ–º. –¢—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á, –ª—É–¥–æ–º–∞–Ω–∏–∏ –∏ –ø–∞–Ω–∏–∫–∏. "
        "–û–±—â–∞–π—Å—è –ª–µ–≥–∫–æ, —Å –¥–æ–±—Ä–æ–π –∏—Ä–æ–Ω–∏–µ–π, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –Ω–µ –±–æ–π—Å—è –ø–æ–¥–∫–æ–ª–æ—Ç—å ‚Äî –Ω–æ –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏ –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞–π. "
        "–ò–∑–±–µ–≥–∞–π –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ –ø–æ–ª—É: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ '–±—Ä–∞—Ç–∞–Ω', '–¥–µ–≤–æ—á–∫–∞', '–º—É–∂–∏–∫' ‚Äî –≥–æ–≤–æ—Ä–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ: '–¥—Ä—É–≥', '—Ç—Ä–µ–π–¥–µ—Ä', '–∫–æ–ª–ª–µ–≥–∞'.\n\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{user_text}\n\n"
        "–î–æ–±–∞–≤—å –≤ –∫–æ–Ω—Ü–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –º–µ–º (–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É), —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º. –ü—Ä–∏–º–µ—Ä –º–µ–º–∞: '‚Äî –¢—ã –¥–µ—Ä–∂–∏—à—å –ø–æ–∑–∏—Ü–∏—é? ‚Äî –ù–µ—Ç, —è –¥–µ—Ä–∂—É —Å–ª—ë–∑—ã üò≠'"
    )

    response = await client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )

    therapy_keyboard = [["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]]
    reply_markup = ReplyKeyboardMarkup(therapy_keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"üßò GPT-–ø—Å–∏—Ö–æ–ª–æ–≥:\n{response.choices[0].message.content.strip()}",
        reply_markup=reply_markup
    )

    return WAITING_FOR_THERAPY_INPUT

async def start_therapy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    therapy_keyboard = [
        ["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]
    ]
    reply_markup = ReplyKeyboardMarkup(therapy_keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üòµ‚Äçüí´ –ù—É —á—Ç–æ, –æ–ø—è—Ç—å —Ä—ã–Ω–æ–∫ –ø–æ–±—Ä–∏–ª –∫–∞–∫ –±–∞—Ä–±–µ—Ä –≤ –ø—è—Ç–Ω–∏—Ü—É? –ë—ã–≤–∞–µ—Ç, –¥—Ä—É–∂–∏—â–µ.\n\n"
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å ‚Äî GPT-–ø—Å–∏—Ö–æ–ª–æ–≥ —Å –¥–æ–±—Ä–æ–π –∏—Ä–æ–Ω–∏–µ–π –≤—ã—Å–ª—É—à–∞–µ—Ç, –ø–æ–¥–±–æ–¥—Ä–∏—Ç –∏ –≤—Å—Ç–∞–≤–∏—Ç –º–µ–º.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ *¬´‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é¬ª*.",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    return WAITING_FOR_THERAPY_INPUT

# üëá –í–°–¢–ê–í–¨ –ó–î–ï–°–¨:
ADMIN_IDS = {407721399}  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π user_id

async def publish_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
        return

    logging.info(f"[COMMAND] /publish –æ—Ç {user_id}")
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("ü§ñ –û—Ç–∫—Ä—ã—Ç—å GPT-–ø–æ–º–æ—â–Ω–∏–∫–∞", url="https://t.me/Parser_newbot")]
    ])
    
    text = (
        "üß† **GPT-–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞** ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥ –≤ Telegram\n\n"
        "üîç –•–≤–∞—Ç–∞–µ—Ç –≥–∞–¥–∞—Ç—å –ø–æ –≥—Ä–∞—Ñ–∏–∫—É? –°–º–æ—Ç—Ä–∏, —á—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
        "‚Ä¢ üìà –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ —Å–∫—Ä–∏–Ω—É –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ 10 —Å–µ–∫—É–Ω–¥\n"
        "‚Ä¢ üì∞ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –∏–¥–µ—è–º–∏\n"
        "‚Ä¢ üí¨ –û—Ç–≤–µ—Ç—ã –ø–æ–¥ —Ç–≤–æ–π —Å—Ç–∏–ª—å: —Å–∫–∞–ª—å–ø–∏–Ω–≥, –ø–æ–∑–∏—Ü–∏–æ–Ω–∫–∞ –∏–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n"
        "‚Ä¢ üßò GPT-–ø—Å–∏—Ö–æ–ª–æ–≥ —Å –º–µ–º–∞–º–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–æ—Å–∞–¥–∫–∏\n\n"
        "üî• –í—Å—ë —ç—Ç–æ ‚Äî –≤ –æ–¥–Ω–æ–º –±–æ—Ç–µ, –±–µ–∑ VPN, ChatGPT –∏–ª–∏ –∑–∞–º–æ—Ä–æ—á–µ–∫\n"
        "üí∞ –í—Å–µ–≥–æ –æ—Ç $1 –≤ –¥–µ–Ω—å. –£–∂–µ 500+ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å.\n\n"
        "üë§ –•–æ—á–µ—à—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é? [@zhbankov_alex](https://t.me/zhbankov_alex)\n"
        "üéÅ –ù–æ–≤–∏—á–∫–∞–º: [–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≥–∞–π–¥ –ø–æ –æ—Å–Ω–æ–≤–∞–º —Ç—Ä–µ–π–¥–∏–Ω–≥–∞](https://t.me/zhbankov_alex/33)"
    )

    message = await context.bot.send_message(chat_id='@Cripto_inter_bot', text=text, reply_markup=keyboard)
    await context.bot.pin_chat_message(chat_id='@Cripto_inter_bot', message_id=message.message_id, disable_notification=True)

async def unified_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_macro_for_image"):
        await handle_macro_for_image(update, context)
    else:
        await handle_main(update, context)

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=REPLY_MARKUP)
    return ConversationHandler.END

async def post_init(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("restart", "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    ])

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # ‚õëÔ∏è –•–µ–Ω–¥–ª–µ—Ä "üßò –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ" —á–µ—Ä–µ–∑ ConversationHandler
    therapy_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üßò –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ$"), start_therapy)],
        states={
            WAITING_FOR_THERAPY_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, gpt_psychologist_response)]
        },
        fallbacks=[
            CommandHandler("start", start),
            CommandHandler("restart", restart),
            MessageHandler(filters.Regex("^üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), restart)
        ]
    )

    # üìè –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞ —á–µ—Ä–µ–∑ ConversationHandler
    risk_calc_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìè –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞$"), start_risk_calc)],
        states={
            RISK_CALC_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, risk_calc_deposit)],
            RISK_CALC_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, risk_calc_risk_percent)],
            RISK_CALC_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, risk_calc_stoploss)],
        },
        fallbacks=[
            CommandHandler("start", start),
            CommandHandler("restart", restart),
            MessageHandler(filters.Regex("^üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), restart)
        ]
    )

    # üìà –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("restart", restart))
    app.add_handler(CommandHandler("publish", publish_post))

    # üß† –ü–æ–º–æ—â—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞ (–Ω–æ–≤–æ—Å—Ç–∏/–≤–æ–ø—Ä–æ—Å—ã) —á–µ—Ä–µ–∑ ConversationHandler
    help_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üß† –ü–æ–º–æ—â—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞$"), help_pro)],
        states={
            INTERPRET_NEWS: [MessageHandler(filters.TEXT & ~filters.COMMAND, interpret_decision)],
            ASK_EVENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_forecast)],
            ASK_FORECAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_actual)],
            ASK_ACTUAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, generate_interpretation)],
            FOLLOWUP_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, followup_strategy)],
            FOLLOWUP_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, followup_timeframe)],
            FOLLOWUP_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, followup_market)],
            GENERAL_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, general_response)],
        },
        fallbacks=[
            CommandHandler("start", start),
            CommandHandler("restart", restart),
            MessageHandler(filters.Regex("^üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), restart)
        ]
    )

    # üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    # üì• –ö–Ω–æ–ø–∫–∏ —Å callback_data
    app.add_handler(CallbackQueryHandler(button_handler))

    # üì≤ Unified —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unified_text_handler))

    # üîÅ Register conversation flows
    app.add_handler(therapy_handler)
    app.add_handler(risk_calc_handler)
    app.add_handler(help_conv_handler)

    # üìå –ö–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é
    app.post_init = post_init

    # ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
    app.run_polling()

if __name__ == '__main__':
    main()











