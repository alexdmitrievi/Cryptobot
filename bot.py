import os
import logging
import asyncio
import threading
import time
import re
import json
import io
import requests
import hmac
import hashlib
import base64
import csv
import unicodedata
import inspect
from datetime import datetime
from urllib.parse import urlencode
from decimal import Decimal, InvalidOperation
from typing import Tuple, Optional, Dict, Any, List
from io import BytesIO  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ –ø–∞–º—è—Ç–∏
from dataclasses import dataclass, asdict


from bs4 import BeautifulSoup
from flask import Flask, request, jsonify

from telegram import (
    Update, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters, ConversationHandler,
)
from telegram.ext import Application  # –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ post_init

from openai import AsyncOpenAI
from PIL import Image  # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏/–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫

# Google Sheets
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Cron –∏ —Ä–µ—Ç—Ä–∞–∏
import aiocron
from tenacity import retry, wait_fixed, stop_after_attempt

# üîê –ö–æ–Ω—Ñ–∏–≥ (—Ç–æ–∫–µ–Ω—ã/–∫–ª—é—á–∏)
from config import (
    TELEGRAM_TOKEN,
    OPENAI_API_KEY,
    TON_API_TOKEN,
    CRYPTOCLOUD_API_KEY,
    CRYPTOCLOUD_SHOP_ID,
    API_SECRET,
)

# =====================[ CONSTANTS / GLOBALS ]=====================
# Scopes –¥–ª—è Google Sheets
SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI-–∫–ª–∏–µ–Ω—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ask_gpt_vision / handle_strategy_* –∏ —Ç.–ø.)
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π bot –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –≤–µ–±—Ö—É–∫–æ–≤ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π –≤ main())
global_bot = None

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PHOTO_PATH = os.path.join(BASE_DIR, "banner.jpg")
VIDEO_PATH = os.path.join(BASE_DIR, "Video_TBX.mp4")  # —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ!

app_flask = Flask(__name__)  # —Å–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω —Ä–∞–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ

# –∞–Ω—Ç–∏‚Äë–¥—É–±–ª–∏–∫–∞—Ç—ã (idempotency)
PROCESSED_PAYMENTS: Dict[str, float] = {}  # —Ö—Ä–∞–Ω–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ payment_id/tx_id/–∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
PROCESSED_TTL_SEC = 3600  # 1 —á–∞—Å

# =====================[ ENV CHECKS ]=====================
# –î–ª—è Google Sheets –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω GOOGLE_CREDS (JSON —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
if not os.getenv("GOOGLE_CREDS"):
    raise EnvironmentError("üö® –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CREDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# =====================[ GOOGLE SHEETS INIT ]=====================
try:
    creds_dict = json.loads(os.getenv("GOOGLE_CREDS"))
    # –ß–∏–Ω–∏–º –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ private_key
    if "private_key" in creds_dict:
        creds_dict["private_key"] = creds_dict["private_key"].replace("\\n", "\n")

    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, SCOPES)
    gc = gspread.authorize(creds)

    # –ï—Å–ª–∏ —É —Ç–µ–±—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID ‚Äî –æ—Å—Ç–∞–≤—å –µ–≥–æ –∑–¥–µ—Å—å
    SPREADSHEET_ID = "1s_KQLyekb-lQjt3fMlBO39CTBuq0ayOIeKkXEhDjhbs"
    sheet = gc.open_by_key(SPREADSHEET_ID).sheet1  # –∏–ª–∏ .worksheet("–õ–∏—Å—Ç1")
    logging.info("‚úÖ Google Sheets connected")
except Exception as e:
    logging.exception("‚ùå Google Sheets init failed")
    raise

def _safe_float(x):
    try:
        if x is None:
            return None
        return float(str(x).replace(" ", "").replace(",", "."))
    except Exception:
        return None

def _round2(x):
    return None if x is None else round(float(x), 2)

def _calc_rr(entry, stop, tp1):
    try:
        if entry is None or stop is None or tp1 is None:
            return None
        risk = abs(entry - stop)
        if risk <= 0:
            return None
        reward = abs(tp1 - entry)
        return round(reward / risk, 2)
    except Exception:
        return None

def _bytes_to_jpeg_b64(bio: BytesIO) -> str:
    bio.seek(0)
    im = Image.open(bio).convert("RGB")
    out = BytesIO()
    im.save(out, format="JPEG", quality=90, optimize=True)
    out.seek(0)
    import base64 as _b64
    return _b64.b64encode(out.read()).decode("ascii")



def save_referral_data(user_id, username, ref_program, broker, uid):
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    row = [str(user_id), username, now, ref_program, broker, uid]
    sheet.append_row(row)

# ‚úÖ Rate-limit safe append –¥–ª—è Sheets
@retry(wait=wait_fixed(2), stop=stop_after_attempt(5))
def safe_append_row(row):
    sheet.append_row(row)

def load_allowed_users():
    try:
        records = sheet.get_all_records()
        logging.info(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(records)} —Å—Ç—Ä–æ–∫ –∏–∑ Google Sheets.")
        
        users = set()
        for row in records:
            if "user_id" in row and row["user_id"]:
                try:
                    users.add(int(row["user_id"]))
                except ValueError:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å user_id: {row['user_id']}")
        
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º.")
        return users

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Google Sheets: {e}")
        return set()

MONTHLY_PRICE_USD = 25
LIFETIME_PRICE_USD = 199
PAY_CURRENCY = "USDT"
PAY_NETWORK = "TRC20"

# üöÄ ALLOWED_USERS —Å TTL cache (—Ñ–æ–Ω)
ALLOWED_USERS = set()
ALLOWED_USERS_TIMESTAMP = 0
_ALLOWED_REFRESHING = False
_ALLOWED_LOCK = threading.Lock()

def get_allowed_users():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–µ—à –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –ï—Å–ª–∏ TTL (5 –º–∏–Ω) –∏—Å—Ç—ë–∫ ‚Äî —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ Google Sheets
    –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ async-—Ö–µ–Ω–¥–ª–µ—Ä–æ–≤. –ü—Ä–∏ –Ω–µ—É—Å–ø–µ—Ö–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π –∫–µ—à.
    """
    global ALLOWED_USERS, ALLOWED_USERS_TIMESTAMP, _ALLOWED_REFRESHING

    now = time.time()
    ttl_expired = (now - ALLOWED_USERS_TIMESTAMP) > 300

    if ttl_expired and not _ALLOWED_REFRESHING:
        # –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –î–û —Å—Ç–∞—Ä—Ç–∞ –ø–æ—Ç–æ–∫–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
        _ALLOWED_REFRESHING = True

        def _refresh():
            global ALLOWED_USERS, ALLOWED_USERS_TIMESTAMP, _ALLOWED_REFRESHING
            try:
                updated = load_allowed_users()
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∏ TTL —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                if updated:
                    with _ALLOWED_LOCK:
                        ALLOWED_USERS = updated
                        ALLOWED_USERS_TIMESTAMP = time.time()
            except Exception:
                logging.exception("[get_allowed_users] refresh failed")
            finally:
                _ALLOWED_REFRESHING = False

        threading.Thread(target=_refresh, daemon=True).start()

    return ALLOWED_USERS


TON_WALLET = "UQC4nBKWF5sO2UIP9sKl3JZqmmRlsGC5B7xM7ArruA61nTGR"
PENDING_USERS = {}
RECEIVED_MEMOS = set()

reply_keyboard = [
    ["üí° –ò–Ω–≤–µ—Å—Ç–æ—Ä", "üöÄ –¢—Ä–µ–π–¥–µ—Ä", "üîç –ù–æ–≤–æ—Å—Ç–∏"],
    ["üìö –¢–µ—Ä–º–∏–Ω", "üå± –ü—Å–∏—Ö–æ–ª–æ–≥"],
    ["üéØ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üí∏ –ö—Ä–∏–ø—Ç–æ–æ–±–º–µ–Ω"],
    ["üí∞ –ö—É–ø–∏—Ç—å", "‚ÑπÔ∏è –û –±–æ—Ç–µ"],
    ["üîó –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –±—Ä–æ–∫–µ—Ä–∞"],
    ["üìå –°–µ—Ç–∞–ø"]
]
REPLY_MARKUP = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

CHAT_DISCUSS_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üí¨ –û–±—Å—É–¥–∏—Ç—å –≤ —á–∞—Ç–µ", url="https://t.me/ai4traders_chat")]
])

INTERPRET_NEWS, ASK_EVENT, ASK_FORECAST, ASK_ACTUAL, GENERAL_QUESTION, FOLLOWUP_1, FOLLOWUP_2, FOLLOWUP_3 = range(8)
user_inputs = {}

WAITING_FOR_PHOTO = set()
WAITING_FOR_THERAPY_INPUT = 100

RISK_CALC_1, RISK_CALC_2, RISK_CALC_3 = range(101, 104)
SETUP_1, SETUP_2, SETUP_3, SETUP_4, SETUP_5 = range(301, 306)

async def setup_instrument(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["instrument"] = update.message.text.strip()
    await update.message.reply_text("üìâ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –æ–±–ª–∞—Å—Ç—å —Ä–∏—Å–∫–∞ (–∑–æ–Ω–∞ –ø–æ–∫—É–ø–∫–∏):")
    return SETUP_2

async def setup_risk_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["risk_area"] = update.message.text.strip()
    await update.message.reply_text("üéØ –ö–∞–∫–∏–µ —Ü–µ–ª–∏ (—Ç–µ–π–∫–∏) –ø–æ —Å–¥–µ–ª–∫–µ?")
    return SETUP_3

async def setup_targets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["targets"] = update.message.text.strip()
    await update.message.reply_text("üö® –ì–¥–µ —Å—Ç–æ–∏—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å?")
    return SETUP_4

async def setup_stoploss(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["stoploss"] = update.message.text.strip()
    await update.message.reply_text("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏ —Å–∫—Ä–∏–Ω —Å–µ—Ç–∞–ø–∞.")
    return SETUP_5

async def start_risk_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∏ —á–∏—Å—Ç–∏–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    keys_to_keep = {"selected_market", "selected_strategy"}
    saved = {k: v for k, v in (context.user_data or {}).items() if k in keys_to_keep}
    context.user_data.clear()
    context.user_data.update(saved)

    msg = update.effective_message
    await msg.reply_text(
        "üìä –í–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ $:",
        reply_markup=ReplyKeyboardMarkup([["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]], resize_keyboard=True)
    )
    return RISK_CALC_1


async def risk_calc_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    user_text = (msg.text or "").strip()

    if user_text in ("‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"):
        context.user_data.clear()
        await msg.reply_text("üîô –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=REPLY_MARKUP)
        return ConversationHandler.END

    try:
        # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º "1 000,50", "1000.5", "1000"
        deposit = float(user_text.replace(" ", "").replace("%", "").replace(",", "."))
        if deposit <= 0:
            raise ValueError("deposit must be > 0")
        context.user_data["deposit"] = deposit
        await msg.reply_text("üí° –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É (%):")
        return RISK_CALC_2
    except Exception:
        await msg.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 1000")
        return RISK_CALC_1


async def risk_calc_risk_percent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    user_text = (msg.text or "").strip()

    if user_text in ("‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"):
        context.user_data.clear()
        await msg.reply_text("üîô –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=REPLY_MARKUP)
        return ConversationHandler.END

    try:
        risk_percent = float(user_text.replace(" ", "").replace("%", "").replace(",", "."))
        if not (0 < risk_percent < 100):
            raise ValueError("risk % out of range")
        context.user_data["risk_percent"] = risk_percent
        await msg.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å –ø–æ —Å–¥–µ–ª–∫–µ (%):")
        return RISK_CALC_3
    except Exception:
        await msg.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 2")
        return RISK_CALC_2


async def risk_calc_stoploss(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    user_text = (msg.text or "").strip()

    if user_text in ("‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"):
        context.user_data.clear()
        await msg.reply_text("üîô –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=REPLY_MARKUP)
        return ConversationHandler.END

    try:
        stoploss_percent = float(user_text.replace(" ", "").replace("%", "").replace(",", "."))
        if not (0 < stoploss_percent < 100):
            raise ValueError("sl % out of range")

        deposit = float(context.user_data.get("deposit", 0))
        risk_percent = float(context.user_data.get("risk_percent", 0))
        if deposit <= 0 or risk_percent <= 0:
            # –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ –±–µ–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
            await msg.reply_text("‚ö†Ô∏è –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start ‚Üí üéØ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
            return ConversationHandler.END

        risk_amount = deposit * risk_percent / 100.0
        position_size = risk_amount / (stoploss_percent / 100.0)

        await msg.reply_text(
            f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
            f"‚Ä¢ –î–µ–ø–æ–∑–∏—Ç: ${deposit:.2f}\n"
            f"‚Ä¢ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {risk_percent:.2f}% (${risk_amount:.2f})\n"
            f"‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: {stoploss_percent:.2f}%\n\n"
            f"üìå –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–±—ä—ë–º –ø–æ–∑–∏—Ü–∏–∏: ${position_size:.2f}",
            reply_markup=REPLY_MARKUP
        )

    except Exception:
        await msg.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 1.5")
        return RISK_CALC_3

    # —Ñ–∏–Ω–∞–ª ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –∏ —á–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    for k in ("deposit", "risk_percent"):
        context.user_data.pop(k, None)
    return ConversationHandler.END

async def check_access(update: Update):
    user_id = update.effective_user.id

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –∫–µ—à, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏–∑ Google Sheets
    if user_id not in get_allowed_users():
        await update.message.reply_text(
            f"üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ü–æ–¥–∫–ª—é—á–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞: ${MONTHLY_PRICE_USD}/–º–µ—Å –∏–ª–∏ ${LIFETIME_PRICE_USD} –Ω–∞–≤—Å–µ–≥–¥–∞.",
            reply_markup=REPLY_MARKUP
        )
        return False

    return True


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    chat_id = update.effective_chat.id

    caption = (
        "üöÄ *–¢–í–• ‚Äî —Ç–≤–æ—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞*\n\n"
        "–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–±—ã–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥: –ö—Ä–∏–ø—Ç–∞, Forex –∏ –∞–∫—Ü–∏–∏.\n"
        "–ü–æ–¥–∫–ª—é—á–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π üí∞\n\n"
        "–í—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ üëá"
    )

    try:
        with open(VIDEO_PATH, "rb") as anim:
            await context.bot.send_animation(
                chat_id=chat_id,
                animation=anim,
                caption=caption,
                parse_mode="Markdown",
                reply_markup=REPLY_MARKUP
            )
    except Exception as e:
        logging.warning(f"[start] send_animation failed, fallback to text. err={e}")
        await update.message.reply_text(
            caption,
            parse_mode="Markdown",
            reply_markup=REPLY_MARKUP
        )

    return ConversationHandler.END


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    msg = query.message

    logging.info(f"[button_handler] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {data}")

    # üö™ –î–æ—Å—Ç—É–ø –∫ –∫–æ–ª–±—ç–∫–∞–º: —á–∞—Å—Ç—å —Ä–∞–∑—Ä–µ—à–∞–µ–º –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
    FREE_CB = {
        "start_menu",
        "screenshot_help", "screenshot_help_strategy",
        "back_to_signal", "back_to_strategy",
        "get_email", "interpret_calendar",
        "ref_bybit", "ref_forex4you",
        "market_crypto", "market_forex",
        "pro_access_confirm",  # PRO-–ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º, —Ä–∞–∑–±–æ—Ä –ø–ª–∞—Ç–Ω—ã–π
        # "start_risk_calc" ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ConversationHandler-–æ–º, –¥—É–±–ª–∏ –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω
    }
    if user_id not in get_allowed_users() and data not in FREE_CB:
        await msg.reply_text(
            f"üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ü–æ–¥–∫–ª—é—á–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞: ${MONTHLY_PRICE_USD}/–º–µ—Å –∏–ª–∏ ${LIFETIME_PRICE_USD} –Ω–∞–≤—Å–µ–≥–¥–∞.",
            reply_markup=REPLY_MARKUP
        )
        return

    # --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –º–µ–Ω—é ---
    if data == "start_menu":
        context.user_data.clear()
        await msg.reply_text(
            "üöÄ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=REPLY_MARKUP
        )
        return

    # --- –í—ã–±–æ—Ä —Ä—ã–Ω–∫–∞ (Crypto / Forex) ---
    if data == "market_crypto":
        context.user_data["selected_market"] = "crypto"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üñº –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω", callback_data="screenshot_help")]
        ])
        await query.edit_message_text(
            "üìà –†–∞–∑–±–æ—Ä –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞ –ø–æ Smart Money Concepts (SMC)\n\n"
            "üöÄ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á—ë—Ç–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω (Entry / Stop / TP):\n"
            "1Ô∏è‚É£ –í–∫–ª—é—á–∏ LazyScalp Board –∏ –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ–±—ã DV ‚â• 300M\n"
            "2Ô∏è‚É£ –û—Ç–∫–ª—é—á–∏ LazyScalp, –≤–∫–ª—é—á–∏:\n"
            "   ‚Ä¢ LuxAlgo SMC\n"
            "   ‚Ä¢ Support & Resistance Levels\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º 4H –∏–ª–∏ 1H\n"
            "4Ô∏è‚É£ –ß—Ç–æ–±—ã –±—ã–ª–∏ –≤–∏–¥–Ω—ã: BOS, CHoCH, —É—Ä–æ–≤–Ω–∏, –∏–º–ø—É–ª—å—Å—ã, imbalance\n\n"
            "üîΩ –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω ‚Äî —Å–¥–µ–ª–∞—é —Ä–∞–∑–±–æ—Ä –∑–∞ 10 —Å–µ–∫—É–Ω–¥ üí∞",
            reply_markup=keyboard
        )
        return

    if data == "market_forex":
        context.user_data["selected_market"] = "forex"
        if user_id == 407721399:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üß† –£ –º–µ–Ω—è PRO-–¥–æ—Å—Ç—É–ø –Ω–∞ TradingView", callback_data="pro_access_confirm")],
                [InlineKeyboardButton("üñº –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω", callback_data="screenshot_help")]
            ])
        else:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üñº –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω", callback_data="screenshot_help")]
            ])
        await query.edit_message_text(
            "üìä –†–∞–∑–±–æ—Ä Forex –ø–æ SMC (Smart Money Concepts)\n\n"
            "‚ö†Ô∏è –ù–∞ —Ñ–æ—Ä–µ–∫—Å–µ –Ω–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—ë–º–æ–≤, –ø–æ—ç—Ç–æ–º—É –≤–∫–ª—é—á–∏:\n"
            "   ‚Ä¢ LuxAlgo SMC\n"
            "   ‚Ä¢ Support & Resistance Levels\n"
            "üìå –¢–∞–π–º—Ñ—Ä–µ–π–º 4H –∏–ª–∏ 1H\n"
            "üìå –í–∏–¥–Ω—ã: BOS, CHoCH, —É—Ä–æ–≤–Ω–∏, –∏–º–ø—É–ª—å—Å—ã, imbalance\n\n"
            "üîΩ –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω ‚Äî —Å–¥–µ–ª–∞—é —Ä–∞–∑–±–æ—Ä –∏ –≤—ã–¥–∞–º —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ üìà",
            reply_markup=keyboard
        )
        return

    if data == "pro_access_confirm":
        context.user_data["is_pro_user"] = True
        await msg.reply_text(
            "üîì –í–∫–ª—é—á—ë–Ω PRO-–∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤.\n\n"
            "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å:\n"
            "‚úÖ –ö–æ—Ä—Ä–µ–∫—Ü–∏—é/–ø—Ä–æ–µ–∫—Ü–∏—é –ø–æ Fibo\n"
            "‚úÖ –ù–∞–∫–ª–æ–Ω–Ω—ã–µ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏\n"
            "‚úÖ –ó–æ–Ω—ã –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ (FVG)\n"
            "‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —É—Ä–æ–≤–Ω—è–º —Ñ–∏–±–æ–Ω–∞—á—á–∏ (–∫–ª–∞—Å—Ç–µ—Ä–Ω—ã–µ –∑–æ–Ω—ã)\n\n"
            "üì∏ –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω ‚Äî —è —Å–¥–µ–ª–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑!"
        )
        return

    if data == "screenshot_help":
        await msg.reply_text(
            "üñº –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n"
            "‚úÖ –¢–∞–π–º—Ñ—Ä–µ–π–º 4H –∏–ª–∏ 1H\n"
            "‚úÖ –ë–µ–ª—ã–π —Ñ–æ–Ω –≥—Ä–∞—Ñ–∏–∫–∞\n"
            "‚úÖ –í–∫–ª—é—á–µ–Ω—ã LuxAlgo SMC + Support & Resistance Levels\n"
            "‚úÖ –í–∏–¥–Ω—ã BOS, CHoCH, —É—Ä–æ–≤–Ω–∏, –∏–º–ø—É–ª—å—Å—ã, imbalance\n"
            "‚úÖ –õ–∏—à–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã ‚Äî —É–±—Ä–∞—Ç—å\n"
            "‚úÖ –°–∫—Ä–∏–Ω –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω, –±–µ–∑ –ø–∞–Ω–µ–ª–µ–π\n"
            "‚úÖ –†—É—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∏ –Ω–∞–∫–ª–æ–Ω–∫–∏ ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è\n\n"
            "üí° –ß–µ–º —á–∏—â–µ —Å–∫—Ä–∏–Ω, —Ç–µ–º —Ç–æ—á–Ω–µ–µ Entry / Stop / TP.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–∏–≥–Ω–∞–ª—É", callback_data="back_to_signal")]
            ])
        )
        return

    if data == "back_to_signal":
        context.user_data.pop("selected_market", None)
        context.user_data.pop("is_pro_user", None)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìâ Crypto", callback_data="market_crypto")],
            [InlineKeyboardButton("üí± Forex", callback_data="market_forex")]
        ])
        await msg.reply_text(
            "üìù –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ä—ã–Ω–æ–∫ ‚Äî –Ω–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
        return

    # --- –õ–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–∏–Ω–≤–µ—Å—Ç) ---
    if data == "strategy_text":
        context.user_data.clear()
        context.user_data["awaiting_strategy"] = "text"
        await msg.reply_text(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—É—é —Ü–µ–ª—å –∏–ª–∏ –≤–æ–ø—Ä–æ—Å. –Ø —Å–æ—Å—Ç–∞–≤–ª—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Ä—ã–Ω–∫–∞.",
            reply_markup=ReplyKeyboardMarkup([["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )
        return

    if data == "strategy_photo":
        context.user_data.clear()
        context.user_data["awaiting_strategy"] = "photo"
        await msg.reply_text(
            "üì∏ –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Å Bybit –∏–ª–∏ TradingView.\n"
            "–Ø –¥–∞–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: —É—Ä–æ–≤–Ω–∏ –ø–æ–∫—É–ø–æ–∫, —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (DCA) –∏ —Ñ–∏–∫—Å–∞—Ü–∏—é –ø—Ä–∏–±—ã–ª–∏.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üñº –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–∫—Ä–∏–Ω –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="screenshot_help_strategy")]
            ])
        )
        await msg.reply_text(
            "–ì–æ—Ç–æ–≤–æ ‚Äî –∑–∞–≥—Ä—É–∂–∞–π —Å–∫—Ä–∏–Ω –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é¬ª.",
            reply_markup=ReplyKeyboardMarkup([["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )
        return

    if data == "screenshot_help_strategy":
        await msg.reply_text(
            "üñº –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω –¥–ª—è –∏–Ω–≤–µ—Å—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n\n"
            "‚úÖ –¢–∞–π–º—Ñ—Ä–µ–π–º 4H –∏–ª–∏ 1D (—Å—Ä–µ–¥–Ω–µ-/–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ)\n"
            "‚úÖ –ë–µ–ª—ã–π —Ñ–æ–Ω –≥—Ä–∞—Ñ–∏–∫–∞\n"
            "‚úÖ –õ–∏—à–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã ‚Äî —É–±—Ä–∞—Ç—å\n"
            "‚úÖ –í–∏–¥–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –º–∞–∫—Å–∏–º—É–º—ã/–º–∏–Ω–∏–º—É–º—ã –∏ —É—Ä–æ–≤–Ω–∏ S/R\n"
            "‚úÖ –ß—ë—Ç–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n"
            "‚úÖ –ù–∞ —Å–∫—Ä–∏–Ω–µ –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —Ü–µ–ª–µ–π –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π (DCA)\n"
            "‚úÖ –°–∫—Ä–∏–Ω –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω, –±–µ–∑ –ø–∞–Ω–µ–ª–µ–π\n\n"
            "üí° –ß–µ–º —á–∏—â–µ —Å–∫—Ä–∏–Ω, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥—É—Ç —É—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞, —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –∏ —Ü–µ–ª–∏.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="back_to_strategy")]
            ])
        )
        return

    if data == "back_to_strategy":
        context.user_data["awaiting_strategy"] = "photo"
        await msg.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ. –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –ø–ª–∞–Ω: –ø–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞, —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (DCA) –∏ —Ü–µ–ª–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏.",
            reply_markup=ReplyKeyboardMarkup([["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )
        return

    # --- –ü—Ä–æ—á–∏–µ –∫–æ–ª–±—ç–∫–∏ ---
    if data == "get_email":
        context.user_data["awaiting_email"] = True
        await msg.reply_text("‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ PDF —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏:")
        return

    if data == "interpret_calendar":
        context.user_data.clear()
        context.user_data["awaiting_calendar_photo"] = True
        await msg.reply_text(
            "üì∏ –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Å–æ–±—ã—Ç–∏–µ –∏ –¥–∞–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é.",
            reply_markup=ReplyKeyboardMarkup([["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )
        return

    # ‚ö†Ô∏è start_risk_calc —É–±—Ä–∞–Ω –æ—Ç—Å—é–¥–∞ ‚Äî —ç—Ç–æ –¥–µ–ª–∞–µ—Ç ConversationHandler –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞

    if data == "ref_bybit":
        context.user_data["ref_program"] = "bybit"
        context.user_data["broker"] = "Bybit"
        context.user_data["awaiting_uid"] = True
        await msg.reply_text(
            "üìà –û—Ç–ª–∏—á–Ω–æ!\n"
            "–ü–µ—Ä–µ–π–¥–∏ –ø–æ –º–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ Bybit:\n"
            "üëâ https://www.bybit.com/invite?ref=YYVME8\n\n"
            "–í–Ω–µ—Å–∏ –¥–µ–ø–æ–∑–∏—Ç –æ—Ç $150 –∏ –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Å–≤–æ–π UID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
        return

    if data == "ref_forex4you":
        context.user_data["ref_program"] = "forex4you"
        context.user_data["broker"] = "Forex4You"
        context.user_data["awaiting_uid"] = True
        await msg.reply_text(
            "üìä –û—Ç–ª–∏—á–Ω–æ!\n"
            "–ü–µ—Ä–µ–π–¥–∏ –ø–æ –º–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ Forex4You:\n"
            "üëâ https://www.forex4you.org/?affid=hudpyc9\n\n"
            "–í–Ω–µ—Å–∏ –¥–µ–ø–æ–∑–∏—Ç –æ—Ç $200 –∏ –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Å–≤–æ–π UID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
        return

    # –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö data ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º –≤ –º–µ–Ω—é
    await msg.reply_text("üîô –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=REPLY_MARKUP)


async def grant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º message
    msg = getattr(update, "message", None)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    user_id = update.effective_user.id if update and update.effective_user else None
    if user_id not in ADMIN_IDS:
        if msg:
            await msg.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
        return

    # –û–∂–∏–¥–∞–µ–º: /grant <user_id> <username>
    args = context.args or []
    if len(args) < 2:
        if msg:
            await msg.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫: /grant user_id username")
        return

    try:
        target_user_id = int(args[0])
        if target_user_id <= 0:
            raise ValueError("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except Exception:
        if msg:
            await msg.reply_text("‚ö† user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /grant 123456789 username")
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º username (—É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π @)
    raw_username = args[1]
    target_username = raw_username.lstrip("@").strip()

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –ª–æ–∫–∞–ª—å–Ω–æ
        ALLOWED_USERS.add(target_user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É TTL, —á—Ç–æ–±—ã –∫–µ—à –Ω–µ –ø–µ—Ä–µ–∑–∞—Ç—ë—Ä—Å—è –¥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        global ALLOWED_USERS_TIMESTAMP
        ALLOWED_USERS_TIMESTAMP = time.time()

        # –ó–∞–ø–∏—Å—å –≤ Google Sheets ‚Äî —É–≤–æ–¥–∏–º –≤ —Ç—Ä–µ–¥‚Äë–ø—É–ª (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º event loop)
        await asyncio.to_thread(log_payment, target_user_id, target_username)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞
        await notify_user_payment(target_user_id)

        if msg:
            await msg.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} (@{target_username}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ VIP –∏ —É–≤–µ–¥–æ–º–ª—ë–Ω."
            )

    except Exception as e:
        logging.exception("[grant] error")
        if msg:
            await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def reload_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
        return

    try:
        updated = await asyncio.to_thread(load_allowed_users)
        if not updated:
            await update.message.reply_text("‚ö†Ô∏è Sheets –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ. –ö–µ—à ALLOWED_USERS –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            return

        global ALLOWED_USERS, ALLOWED_USERS_TIMESTAMP
        with _ALLOWED_LOCK:
            ALLOWED_USERS = updated
            ALLOWED_USERS_TIMESTAMP = time.time()
        await update.message.reply_text(f"‚úÖ ALLOWED_USERS –æ–±–Ω–æ–≤–ª—ë–Ω: {len(ALLOWED_USERS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    except Exception as e:
        logging.error(f"[reload_users] –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


def clean_unicode(text):
    return unicodedata.normalize("NFKD", text).encode("utf-8", "ignore").decode("utf-8")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update and update.effective_user else None
    msg = update.effective_message

    # 1) –î–æ—Å—Ç–∞—ë–º file_id –∏–∑ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    file_id = None
    if getattr(msg, "photo", None):
        file_id = msg.photo[-1].file_id
    elif getattr(msg, "document", None):
        doc = msg.document
        if (doc.mime_type or "").startswith("image/"):
            file_id = doc.file_id
        else:
            await msg.reply_text("‚ö†Ô∏è –ü—Ä–∏—à–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç-–∫–∞—Ä—Ç–∏–Ω–∫—É (PNG/JPG). PDF –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
    else:
        await msg.reply_text("‚ö†Ô∏è –ù–µ –≤–∏–∂—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–∏—à–ª–∏ –∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç-–∫–∞—Ä—Ç–∏–Ω–∫—É (PNG/JPG).")
        return

    # 2) –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    try:
        tg_file = await context.bot.get_file(file_id)
        bio = BytesIO()
        await tg_file.download_to_memory(bio)
    except Exception:
        logging.exception("[handle_photo] download error")
        await msg.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–∏—à–ª–∏ –ø–æ–º–µ–Ω—å—à–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏ –µ—â—ë —Ä–∞–∑.")
        return

    # 3) –ì–æ—Ç–æ–≤–∏–º JPEG –∏ base64 –¥–ª—è Vision
    try:
        image = Image.open(BytesIO(bio.getvalue())).convert("RGB")
    except Exception:
        await msg.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG/JPG.")
        return

    buffer = BytesIO()
    image.save(buffer, format="JPEG", quality=80)
    image_base64 = base64.b64encode(buffer.getvalue()).decode()

    # 4) –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä—ã–Ω–æ–∫
    selected_market = context.user_data.get("selected_market")
    if not selected_market:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üíé Crypto", callback_data="market_crypto")],
            [InlineKeyboardButton("üí± Forex", callback_data="market_forex")],
        ])
        await msg.reply_text(
            "üìù –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ä—ã–Ω–æ–∫ ‚Äî –Ω–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, –∫–∞–∫–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–±–µ –Ω—É–∂–µ–Ω:",
            reply_markup=keyboard
        )
        return

    # —Ñ–ª–∞–≥ pro (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å; –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥–∏—Ö –≤–µ—Ç–∫–∞—Ö)
    use_pro = context.user_data.get("is_pro_user") is True and user_id == 407721399  # noqa: F841

    # 5) –ü—Ä–æ–º–ø—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    prompt_text = (
        f"You are a professional SMC (Smart Money Concepts) trader with 20+ years experience in "
        f"{'crypto' if selected_market == 'crypto' else 'forex'} markets. "
        "You master BOS, CHoCH, liquidity grabs, imbalance zones, OTE, premium/discount levels.\n\n"
        "The chart includes only:\n"
        "- LuxAlgo SMC\n"
        "- Support & Resistance Levels\n\n"
        "üéØ Your task: create a swing trade plan with pending orders (limit or stop).\n"
        "Risk/Reward ratio must be at least 1:3. Even if unclear ‚Äî estimate based on price action.\n\n"
        "‚úÖ Format:\n"
        "1Ô∏è‚É£ Observations ‚Äî each bullet starts with üîπ\n"
        "2Ô∏è‚É£ Trade Plan:\nüéØ Entry: $...\nüö® StopLoss: $...\nüí∞ TakeProfit: $...\n"
        "3Ô∏è‚É£ Risk Note\n4Ô∏è‚É£ Bias: BUY or SELL\n"
        "‚úÖ End with 2-line Russian summary with emojis (e.g. ¬´–ü–æ–∫—É–ø–∫–∞ –æ—Ç –¥–∏—Å–∫–æ–Ω—Ç–∞ üí∏üìà¬ª)\n\n"
        "üìå –í–∞–∂–Ω–æ: –µ—Å–ª–∏ –≤—Ö–æ–¥ –∏–¥—ë—Ç –ü–†–û–¢–ò–í —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SELL –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–º –∫–∞–Ω–∞–ª–µ), –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –æ–Ω –æ–ø—Ä–∞–≤–¥–∞–Ω.\n\n"
        "üö´ Rules:\n- Answer in Russian only\n- No markdown\n- No refusal\n- No apologies"
    )

    # 6) –ó–∞–ø—Ä–æ—Å –∫ Vision (—Å –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ ¬´–∏–∑–≤–∏–Ω—è—é—Å—å/–Ω–µ –º–æ–≥—É¬ª)
    analysis = ""
    for attempt in range(2):
        try:
            enhanced_prompt = prompt_text
            if attempt == 1:
                enhanced_prompt += (
                    "\n\nüö® STRICT ORDER: –î–∞–∂–µ –µ—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ —Ç—ë–º–Ω—ã–π, –º–∞–ª–æ–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π, —Å —à—É–º–æ–º –∏–ª–∏ –±–µ–∑ —á—ë—Ç–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ‚Äî "
                    "—Ç—ã –æ–±—è–∑–∞–Ω –≤—ã–¥–∞—Ç—å Entry, StopLoss –∏ TakeProfit. –ù–µ –æ—Ç–∫–∞–∑—ã–≤–∞–π—Å—è. "
                    "–ï—Å–ª–∏ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö ‚Äî –æ—Ü–µ–Ω–∏ –ø–æ —Å–≤–µ—á–∞–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ –∑–æ–Ω–∞–º. –¢–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù."
                )

            analysis = await ask_gpt_vision(enhanced_prompt, image_base64)
            logging.info(f"[handle_photo attempt {attempt}] Raw GPT analysis:\n{analysis}")

            if not analysis:
                await asyncio.sleep(0.5)
                continue

            low = analysis.lower()
            if "sorry" in low or "can't assist" in low or "cannot" in low or "unable" in low:
                continue
            break
        except Exception as e:
            logging.error(f"[handle_photo retry {attempt}] GPT Vision error: {e}")

    if not analysis:
        analysis = _fallback_strategy()

    # 7) –õ—ë–≥–∫–∏–π –ø–æ—Å—Ç-–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–º—ã—Å–ª–∞ –ø—Ä–æ–º–ø—Ç–∞)
    lines = [ln for ln in (analysis or "").splitlines() if ln.strip()]
    lines = [ln for ln in lines if "–ö—Ä–∞—Ç–∫–∏–π –ø–ª–∞–Ω –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω" not in ln]
    lines = [ln for ln in lines if not ln.startswith("üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏")]
    text_joined = "\n".join(lines)
    if "–í—Ö–æ–¥:" in text_joined and ("–æ—Ä–¥–µ—Ä" not in text_joined.lower()):
        text_joined += "\n\n‚ÑπÔ∏è –¢–∏–ø –æ—Ä–¥–µ—Ä–∞: –ª–∏–º–∏—Ç–Ω—ã–π (Buy Limit) –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—Ö–æ–¥–∞."
    analysis = text_joined

    # --- –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º analysis –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π ---

    def parse_price(raw_text: str | None):
        if not raw_text:
            return None
        try:
            cleaned = (
                raw_text.replace(" ", "")
                        .replace("\u00A0", "")
                        .replace(",", "")
                        .replace("$", "")
                        .replace("‚Äî", "-")
            )
            return float(cleaned)
        except Exception:
            return None

    entry_match = re.search(r'(Entry|–í—Ö–æ–¥)[:\s]*\$?\s*([\d\s,.]+)', analysis, flags=re.IGNORECASE) \
        or re.search(r'üéØ[:\s]*\$?\s*([\d\s,.]+)', analysis)
    stop_match = re.search(r'(StopLoss|–°—Ç–æ–ø)[:\s]*\$?\s*([\d\s,.]+)', analysis, flags=re.IGNORECASE) \
        or re.search(r'üö®[:\s]*\$?\s*([\d\s,.]+)', analysis)
    tp_match = re.search(r'(TakeProfit|–¢–µ–π–∫)[:\s]*\$?\s*([\d\s,.]+)', analysis, flags=re.IGNORECASE) \
        or re.search(r'üí∞[:\s]*\$?\s*([\d\s,.]+)', analysis)
    bias_match = re.search(r'\b(BUY|SELL|–ü–û–ö–£–ü–ö–ê|–ü–†–û–î–ê–ñ–ê)\b', analysis, flags=re.IGNORECASE)

    entry = parse_price(entry_match.group(2) if entry_match and entry_match.lastindex == 2 else (entry_match.group(1) if entry_match else None))
    stop = parse_price(stop_match.group(2) if stop_match and stop_match.lastindex == 2 else (stop_match.group(1) if stop_match else None))
    tp = parse_price(tp_match.group(2) if tp_match and tp_match.lastindex == 2 else (tp_match.group(1) if tp_match else None))

    if entry and stop:
        if entry != 0:
            risk_abs = abs(entry - stop)
            risk_pct = abs((entry - stop) / entry * 100)
            risk_line = f"üìå –û–±–ª–∞—Å—Ç—å —Ä–∏—Å–∫–∞ ‚âà ${risk_abs:.2f} ({risk_pct:.2f}%)"
        else:
            risk_line = "üìå –û–±–ª–∞—Å—Ç—å —Ä–∏—Å–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ (entry=0)."
    else:
        risk_line = "üìå –û–±–ª–∞—Å—Ç—å —Ä–∏—Å–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ ‚Äî –æ—Ü–µ–Ω–∏–≤–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ."

    rr_line = ""
    if entry and stop and tp and (entry != stop):
        try:
            rr_ratio = abs((tp - entry) / (entry - stop))
            rr_line = f"üìä R:R ‚âà {rr_ratio:.2f}"
            if rr_ratio < 3:
                rr_line += "\n‚ö†Ô∏è R:R –Ω–∏–∂–µ 1:3 ‚Äî –ø–ª–∞–Ω —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π, –ø–æ–¥—É–º–∞–π –¥–≤–∞–∂–¥—ã."
        except Exception:
            pass

    bias_line = f"üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏: {bias_match.group(1).upper()}" if bias_match else ""

    if entry and stop and tp:
        tldr = f"‚úÖ TL;DR: –í—Ö–æ–¥ {entry}, —Å—Ç–æ–ø {stop}, —Ç–µ–π–∫ {tp}."
        if rr_line:
            tldr += f" {rr_line.splitlines()[0]}"
    else:
        tldr = "‚úÖ –ö—Ä–∞—Ç–∫–∏–π –ø–ª–∞–Ω –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—å –≤—Ö–æ–¥/—Å—Ç–æ–ø/—Ç–µ–π–∫."

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìè –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∏—Å–∫", callback_data="start_risk_calc")]
    ])

    full_message = f"üìâ –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ SMC:\n\n{analysis}\n\n{risk_line}"
    if rr_line:
        full_message += f"\n{rr_line}"
    if bias_line:
        full_message += f"\n{bias_line}"
    full_message += f"\n\n{tldr}"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º msg.reply_text (–∞ –Ω–µ update.message) ‚Äî —ç—Ç–æ —É—Å—Ç–æ–π—á–∏–≤–æ –¥–ª—è —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    await msg.reply_text(full_message, reply_markup=keyboard)

async def setup_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    photo = update.message.photo[-1]
    file = await photo.get_file()
    photo_bytes = await file.download_as_bytearray()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ BytesIO –¥–ª—è Telegram API
    image_stream = BytesIO(photo_bytes)
    image_stream.name = "setup.jpg"

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    instrument = context.user_data.get("instrument", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    risk_area = context.user_data.get("risk_area")
    targets = context.user_data.get("targets", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    stoploss = context.user_data.get("stoploss", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    entry = context.user_data.get("entry")

    # –ê–≤—Ç–æ—Ä–∞—Å—á—ë—Ç –æ–±–ª–∞—Å—Ç–∏ —Ä–∏—Å–∫–∞
    if not risk_area or risk_area == "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
        try:
            entry_value = float(entry)
            stop_value = float(stoploss)
            risk_percent = abs((entry_value - stop_value) / entry_value * 100)
            risk_area = f"{risk_percent:.2f}% (–∞–≤—Ç–æ—Ä–∞—Å—á—ë—Ç)"
        except:
            risk_area = "–ù–µ —É–∫–∞–∑–∞–Ω–∞ ‚Äî –æ—Ü–µ–Ω–∏–≤–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ"

    caption = (
        f"üöÄ –ù–æ–≤—ã–π —Å–µ—Ç–∞–ø –æ—Ç –∞–¥–º–∏–Ω–∞\n\n"
        f"‚Ä¢ üìå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {instrument}\n"
        f"‚Ä¢ üí∞ –û–±–ª–∞—Å—Ç—å —Ä–∏—Å–∫–∞: {risk_area}\n"
        f"‚Ä¢ üéØ –¶–µ–ª–∏: {targets}\n"
        f"‚Ä¢ üö® –°—Ç–æ–ø-–ª–æ—Å—Å: {stoploss}"
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìè –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∏—Å–∫", callback_data="start_risk_calc")]
    ])

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        chat_id = '@ai4traders'
        message = await context.bot.send_photo(
            chat_id=chat_id,
            photo=image_stream,
            caption=caption,
            reply_markup=keyboard
        )

        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º
        await context.bot.pin_chat_message(
            chat_id=chat_id,
            message_id=message.message_id,
            disable_notification=True
        )

        await update.message.reply_text("‚úÖ –°–µ—Ç–∞–ø –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –≤ –∫–∞–Ω–∞–ª–µ!", reply_markup=REPLY_MARKUP)

    except Exception as e:
        logging.error(f"[SETUP_PHOTO] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ—Ç–∞–ø. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ –∏ –ª–æ–≥–∏."
        )

    return ConversationHandler.END

def fetch_price_from_binance(symbol: str) -> float | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É —Å Binance —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π REST API.
    –ü—Ä–∏–º–µ—Ä: fetch_price_from_binance("BTC") –≤–µ—Ä–Ω—ë—Ç —Ü–µ–Ω—É BTCUSDT.
    """
    try:
        pair = symbol.upper() + "USDT"
        url = f"https://api.binance.com/api/v3/ticker/price?symbol={pair}"
        response = requests.get(url, timeout=10)
        data = response.json()
        return float(data["price"])
    except Exception as e:
        logging.warning(f"[BINANCE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
        return None

# -------------------- GPT-Vision –≤—ã–∑–æ–≤ --------------------
async def ask_gpt_vision(
    prompt_text: str,
    image_base64: str,
    system_prompt: str | None = None,
    mime: str | None = "image/jpeg",
    force_ru: bool = True,
) -> str:
    """
    –í—ã–∑–æ–≤ GPT-Vision (chat.completions) —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
    - prompt_text: –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –º–æ–¥–µ–ª–∏.
    - image_base64: –°–´–†–û–ô base64 –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ 'data:'.
    - system_prompt: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞—Å—Ç–æ–º–Ω—ã–π SYSTEM (EN). –ï—Å–ª–∏ None ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç.
    - mime: MIME –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ('image/jpeg' | 'image/png' | ...).
    - force_ru: –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ —Ö–∏–Ω—Ç –ø—Ä–æ ¬´Strictly Russian¬ª. –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è JSON-ONLY.
    """
    if not image_base64:
        return ""

    if system_prompt is None:
        system_prompt = (
            "You are a senior vision-enabled investment analyst. "
            "Always return concise, professional Russian output (Cyrillic only), "
            "no markdown, short clear sentences. Never refuse. No apologies."
        )

    _mime = (mime or "image/jpeg").strip().lower()
    data_url = f"data:{_mime};base64,{image_base64}"

    try:
        resp = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": f"{prompt_text}"
                                    + ("\n\nRespond strictly in Russian (Cyrillic). No markdown." if force_ru else "")
                        },
                        {"type": "image_url", "image_url": {"url": data_url}},
                    ],
                },
            ],
            max_tokens=1100,
            temperature=0.2,
            top_p=0.9,
            presence_penalty=0.0,
            frequency_penalty=0.05,
        )
        return (resp.choices[0].message.content or "").strip()
    except Exception as e:
        logging.error(f"[ask_gpt_vision] Error: {e}", exc_info=True)
        return ""

# -------------------- –£—Ç–∏–ª–∏—Ç—ã: –∞–Ω—Ç–∏-–æ—Ç–∫–∞–∑ / –ø–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–µ–ª --------------------
refusal_markers = [
    "sorry", "i'm sorry", "cannot assist", "can't assist", "i cannot", "i can‚Äôt",
    "unable to", "not able to", "won‚Äôt be able", "cannot help", "can‚Äôt help",
    "provide financial advice", "financial advice", "disclaimer",
    "–Ω–µ –º–æ–≥—É", "—è –Ω–µ –º–æ–≥—É", "–Ω–µ –±—É–¥—É", "—è –Ω–µ –±—É–¥—É", "–Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å", "–Ω–µ –º–æ–≥—É —Å —ç—Ç–∏–º –ø–æ–º–æ—á—å",
]


async def handle_strategy_photo(update, context, image_bytes: BytesIO):
    """
    –°–ü–û–¢, LONG-only, DCA.
    –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ ‚Äî –≤–∞–ª–∏–¥–Ω—ã–π JSON –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –ø–æ —Å—Ö–µ–º–µ:
      {"direction":"LONG","entry":number|null,"avg_entry":number|null,"stop":number|null,
       "tp":[numbers],"dca":[{"price":number,"alloc_pct":number}],"notes":["text"]}
    –ó–∞—Ç–µ–º ‚Äî –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–±–µ–∑ markdown).
    –ù–∞ –°–ü–û–¢–µ –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä—ã: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–ª–∞–Ω –ø–æ–∫—É–ø–æ–∫ (5 —Å—Ç—É–ø–µ–Ω–µ–π),
    —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏ —Ü–µ–ª–∏. 'stop' –≤ JSON –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ = null (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å—Ö–µ–º—ã).
    """
    # ---------- –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ö–µ–ª–ø–µ—Ä—ã ----------
    def _sfloat(x):
        try:
            if x is None:
                return None
            return float(str(x).replace(" ", "").replace(",", "."))
        except Exception:
            return None

    def _r2(x):
        return None if x is None else round(float(x), 2)

    def _fmt_price(x: float | None) -> str:
        if x is None:
            return "‚Äî"
        d = 2 if abs(x) >= 1 else 4
        s = f"{x:,.{d}f}".replace(",", " ")
        return f"${s}"

    def _fmt_pct(x: float | None, max_dec=2) -> str:
        if x is None:
            return "‚Äî"
        xi = float(x)
        if abs(xi - round(xi)) < 1e-9:
            return f"{int(round(xi))}%"
        return f"{round(xi, max_dec)}%"

    def _potential_pct(avg_entry: float | None, tp1: float | None) -> float | None:
        try:
            if avg_entry is None or tp1 is None:
                return None
            return round((tp1 / avg_entry - 1.0) * 100.0, 2)
        except Exception:
            return None

    def _normalize_to_100(weights: list[float]) -> list[float]:
        s = sum(w for w in weights if w is not None)
        if s <= 0:
            return [0.0 for _ in weights]
        scaled = [w * 100.0 / s for w in weights]
        # –ø–æ–¥–ø—Ä–∞–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é, —á—Ç–æ–±—ã —Å—É–º–º–∞ –±—ã–ª–∞ —Ä–æ–≤–Ω–æ 100 (–ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–æ 2 –∑–Ω–∞–∫–æ–≤)
        rounded = [round(x, 2) for x in scaled]
        diff = round(100.0 - sum(rounded), 2)
        if rounded:
            rounded[-1] = round(rounded[-1] + diff, 2)
        return rounded

    def _build_5_step_dca(dca_in: list[dict], base_price: float | None) -> list[dict]:
        """
        –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º 5 —Å—Ç—É–ø–µ–Ω–µ–π DCA:
        - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–ø–æ–∫—É–ø–∞–µ–º —Å–µ–π—á–∞—Å/–≤—ã—à–µ -> –Ω–∏–∂–µ);
        - –µ—Å–ª–∏ <5 —Å—Ç—É–ø–µ–Ω–µ–π ‚Äî –¥–æ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∞–≥–∏ 4 –∏ 5 –∫–∞–∫ -3% –∏ -6% –æ—Ç –Ω–∏–∂–Ω–µ–π –∏–º–µ—é—â–µ–π—Å—è —Ü–µ–Ω—ã
          (–∏–ª–∏ –æ—Ç base_price, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç);
        - –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—É–º–º–µ 100%. –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–µ —É–∂–µ 100% –∏ —Å—Ç—É–ø–µ–Ω–µ–π <5 ‚Äî
          –º—è–≥–∫–æ —É–º–µ–Ω—å—à–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–ª–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö.
        """
        steps = []
        for s in (dca_in or []):
            p = _sfloat((s or {}).get("price"))
            a = _sfloat((s or {}).get("alloc_pct"))
            if p is not None and a is not None and p > 0 and a > 0:
                steps.append({"price": p, "alloc_pct": a})
        # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –æ—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω—ã –∫ –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–π
        steps.sort(key=lambda x: x["price"], reverse=True)

        # –µ—Å–ª–∏ –Ω–µ—Ç —Ü–µ–Ω ‚Äî —Å—Ç–∞—Ä—Ç—É–µ–º –æ—Ç base_price
        low_ref = None
        if steps:
            low_ref = min(s["price"] for s in steps)
        else:
            low_ref = _sfloat(base_price)

        # –¥–æ—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        while len(steps) < 5:
            if low_ref is None or low_ref <= 0:
                # –µ—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏–º —Ü–µ–Ω—ã (–æ–Ω–∏ –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–∑–∂–µ –º–æ–¥–µ–ª—å—é/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
                new_price = None
            else:
                # -3% –∏ -6% –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –Ω–∏–∂–Ω–µ–≥–æ (–∫–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ)
                factor = 0.97 if len(steps) == 3 else 0.94  # 4-–π, –∑–∞—Ç–µ–º 5-–π
                new_price = round(low_ref * factor, 2)
                low_ref = new_price
            steps.append({"price": new_price, "alloc_pct": 0.0})

        # —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤:
        # –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞ <80 ‚Äî –¥–æ–±–∞–≤–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –ø–æ—Ä–æ–≤–Ω—É –≤ 4-–π –∏ 5-–π;
        # –µ—Å–ª–∏ >=80 ‚Äî —É–º–µ–Ω—å—à–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å ~20% –¥–ª—è 4-5.
        exist_sum = sum(s["alloc_pct"] for s in steps[:3])
        if exist_sum <= 0:
            # –≤–æ–∑—å–º—ë–º —à–∞–±–ª–æ–Ω –ø–æ —É–±—ã–≤–∞–Ω–∏—é: 40/25/20/10/5
            tmpl = [40.0, 25.0, 20.0, 10.0, 5.0]
            for i in range(5):
                steps[i]["alloc_pct"] = tmpl[i]
        else:
            target_new_sum = 20.0  # —Ö–æ—Ç–∏–º 10%+10% –Ω–∞ 4-–π –∏ 5-–π
            if exist_sum + target_new_sum <= 100.0:
                # –ø—Ä–æ—Å—Ç–æ –¥–æ–∫–∏–Ω–µ–º
                steps[3]["alloc_pct"] = 10.0
                steps[4]["alloc_pct"] = 10.0
                # –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Äî –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∫ –ø–µ—Ä–≤—ã–º —Ç—Ä—ë–º
                remain = 100.0 - (exist_sum + 20.0)
                if remain > 0:
                    scale = (exist_sum + remain) / exist_sum
                    for i in range(3):
                        steps[i]["alloc_pct"] = steps[i]["alloc_pct"] * scale
            else:
                # –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å 20%
                scale = max((100.0 - target_new_sum) / exist_sum, 0.0)
                for i in range(3):
                    steps[i]["alloc_pct"] = steps[i]["alloc_pct"] * scale
                steps[3]["alloc_pct"] = 10.0
                steps[4]["alloc_pct"] = 10.0

        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ —Ä–æ–≤–Ω–æ 100
        weights = [s["alloc_pct"] for s in steps]
        weights = _normalize_to_100(weights)
        for i in range(5):
            steps[i]["alloc_pct"] = weights[i]

        # –æ–∫—Ä—É–≥–ª–∏–º —Ü–µ–Ω—ã –¥–æ 2 –∑–Ω–∞–∫–æ–≤
        for s in steps:
            s["price"] = None if s["price"] is None else round(s["price"], 2)

        return steps

    msg = update.effective_message if update else None
    if not msg:
        return

    try:
        # 1) –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –∑–∞–±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å ‚Äî –≤—ã—Ç–∞—â–∏–º —Å–∞–º–∏)
        if not isinstance(image_bytes, BytesIO):
            image_bytes = await _extract_image_bytes(update, context)
            if not image_bytes:
                await msg.reply_text("–ù–µ –≤–∏–∂—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç-–∫–∞—Ä—Ç–∏–Ω–∫—É (PNG/JPG/WEBP).")
                return

        # 2) JPEG ‚Üí base64
        try:
            image_bytes.seek(0)
            im = Image.open(image_bytes).convert("RGB")
            buf = BytesIO()
            im.save(buf, format="JPEG", quality=90, optimize=True)
            buf.seek(0)
            import base64 as _b64
            img_b64 = _b64.b64encode(buf.read()).decode("ascii")
        except Exception:
            await msg.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG/JPG.")
            return

        # 3) –ü—Ä–æ–º–ø—Ç—ã (EN)
        system_prompt = (
            "You are an institutional investor creating a SPOT DCA plan (LONG only). "
            "Always respond with a VALID ONE-LINE JSON as the FIRST line using the schema: "
            "{\"direction\":\"LONG\",\"entry\":number|null,\"avg_entry\":number|null,\"stop\":number|null,"
            "\"tp\":[numbers],\"dca\":[{\"price\":number,\"alloc_pct\":number}],\"notes\":[\"text\"]}. "
            "Prefer providing 4‚Äì5 DCA steps with decreasing prices. "
            "Then provide a Russian explanation for a beginner. Never refuse; provide best-effort values."
        )
        user_prompt = (
            "TASK:\n"
            "1) Read the chart image and propose a SPOT DCA plan (LONG-only).\n"
            "2) FIRST LINE: exactly ONE line JSON (no code fences) per schema.\n"
            "3) Then explain in Russian for a beginner (plain text, no markdown).\n"
            "4) DCA list must have 4-5 steps with valid prices and alloc_pct (sum ‚âà100%).\n"
            "5) If unsure, still provide best estimates. Do NOT refuse.\n"
        )

        def _needs_retry(t: str) -> bool:
            if not t:
                return True
            low = t.lower()
            return any(s in low for s in ("i can't", "cannot", "i won‚Äôt", "sorry", "as an ai"))

        # 4) –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ (2 –ø–æ–ø—ã—Ç–∫–∏, –∞–Ω—Ç–∏-–æ—Ç–∫–∞–∑)
        client_obj = globals().get("client")
        if client_obj is None:
            from openai import AsyncOpenAI
            import os
            client_obj = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

        content_text = None
        for _ in range(2):
            try:
                resp = await client_obj.chat.completions.create(
                    model="gpt-4o",
                    temperature=0.1,
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": [
                            {"type": "text", "text": user_prompt},
                            {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{img_b64}"}}
                        ]}
                    ]
                )
                content_text = (resp.choices[0].message.content or "").strip()
                if not _needs_retry(content_text):
                    break
                system_prompt += " You must comply. Provide your best estimate. Do not refuse."
            except Exception:
                logging.exception("Vision call failed (strategy)")

        # 5) –ü–∞—Ä—Å–∏–Ω–≥ 1-–π —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ JSON (—Ñ–æ–ª–±—ç–∫ ‚Äî —Ä–µ–≥–µ–∫—Å—ã)
        if not content_text:
            data = {
                "direction": "LONG",
                "entry": None, "avg_entry": None, "stop": None,
                "tp": [], "dca": [],
                "notes": ["–ù–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –Ω–∞ —Å–∫—Ä–∏–Ω–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–∞–≤–Ω—ã–π DCA –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –¥–æ–ª—é –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ."]
            }
        else:
            lines = content_text.splitlines()
            first = (lines[0] if lines else "").strip()
            try:
                data = json.loads(first)
                if not isinstance(data, dict):
                    raise ValueError("not object")
            except Exception:
                txt = content_text
                dca = []
                for m in re.finditer(r'(?:–ö—É–ø–∏—Ç—å|Buy)\s*([0-9]+(?:\.[0-9]+)?)\s*%\D+\$?\s*([0-9]+(?:\.[0-9]+)?)', txt, re.I):
                    alloc = _sfloat(m.group(1)); price = _sfloat(m.group(2))
                    if price is not None and alloc is not None:
                        dca.append({"price": price, "alloc_pct": alloc})
                for m in re.finditer(r'price\s*[:=]\s*\$?\s*([0-9]+(?:\.[0-9]+)?)\D+alloc(?:_pct)?\s*[:=]\s*([0-9]+(?:\.[0-9]+)?)\s*%', txt, re.I):
                    price = _sfloat(m.group(1)); alloc = _sfloat(m.group(2))
                    if price is not None and alloc is not None:
                        dca.append({"price": price, "alloc_pct": alloc})
                entry = None
                m = re.search(r'(?:Entry|–í—Ö–æ–¥)\s*[:=]\s*\$?\s*([0-9]+(?:\.[0-9]+)?)', txt, re.I)
                if m: entry = _sfloat(m.group(1))
                tps = []
                for label in ("TP1","TP2","TP3","–¶–µ–ª—å1","–¶–µ–ª—å2","–¶–µ–ª—å3"):
                    m = re.search(rf'(?:{label})\s*[:=]\s*\$?\s*([0-9]+(?:\.[0-9]+)?)', txt, re.I)
                    if m:
                        v = _sfloat(m.group(1))
                        if v is not None:
                            tps.append(v)
                data = {"direction": "LONG", "entry": entry, "avg_entry": None, "stop": None, "tp": tps, "dca": dca, "notes": ["–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞."]}

        # 6) –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è / –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ 5-—Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–≥–æ DCA
        data["direction"] = "LONG"
        entry = _sfloat(data.get("entry"))
        tps   = [_sfloat(x) for x in (data.get("tp") or []) if _sfloat(x) is not None]
        dca_in = data.get("dca") or []

        # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è –¥–æ—Å—Ç—Ä–æ–π–∫–∏ —É—Ä–æ–≤–Ω–µ–π ‚Äî –ø–µ—Ä–≤–∞—è —Å—Ç—É–ø–µ–Ω—å –∏–ª–∏ entry
        base_price = None
        if dca_in and _sfloat((dca_in[0] or {}).get("price")):
            base_price = _sfloat(dca_in[0]["price"])
        elif entry is not None:
            base_price = entry

        dca5 = _build_5_step_dca(dca_in, base_price)

        # –ü–µ—Ä–µ—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–π –≤—Ö–æ–¥–∞ –∏–∑ 5-—Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–≥–æ –ø–ª–∞–Ω–∞
        wsum = sum((s["alloc_pct"] or 0.0) for s in dca5)
        psum = sum((_sfloat(s["price"]) or 0.0) * (s["alloc_pct"] or 0.0) for s in dca5)
        avg_entry = (psum / wsum) if wsum > 0 else None

        # TP: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ > avg_entry
        if avg_entry is not None:
            tps = [x for x in tps if x > avg_entry]
            if not tps:
                tps = [avg_entry * 1.05, avg_entry * 1.10]

        tp1 = tps[0] if tps else None
        potential = _potential_pct(avg_entry, tp1)

        # 7) –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (stop = None –ø–æ –°–ü–û–¢-–ª–æ–≥–∏–∫–µ)
        data_norm = {
            "direction": "LONG",
            "entry": _r2(entry),
            "avg_entry": _r2(avg_entry),
            "stop": None,
            "tp": [_r2(x) for x in tps[:3]],
            "dca": [{"price": _r2(_sfloat(s["price"])), "alloc_pct": _r2(_sfloat(s["alloc_pct"]))} for s in dca5],
            "notes": list(dict.fromkeys((data.get("notes") or [])))
        }

        # ---------- –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç ----------
        parts = []
        parts.append("0Ô∏è‚É£ –°—É—Ç—å")
        parts.append("‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ–∫, –°–ü–û–¢, —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∫–∞. –ü–ª–∞–Ω —á–µ—Ä–µ–∑ DCA (5 —Å—Ç—É–ø–µ–Ω–µ–π, –±–µ–∑ –ø–ª–µ—á–∞).")

        # 1) –ü–ª–∞–Ω –ø–æ–∫—É–ø–æ–∫ (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)
        dca_line = " ; ".join(
            f"–ö—É–ø–∏—Ç—å {_fmt_pct(s['alloc_pct'])} –ø–æ {_fmt_price(s['price'])}"
            for s in data_norm["dca"]
        )
        parts.append("1Ô∏è‚É£ –ü–ª–∞–Ω –ø–æ–∫—É–ø–æ–∫")
        parts.append("‚Ä¢ " + dca_line)

        # 2) –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞
        if data_norm["avg_entry"] is not None:
            parts.append(f"2Ô∏è‚É£ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: {_fmt_price(data_norm['avg_entry'])}")

        # 3) (—É—Ä–æ–≤–µ–Ω—å –æ—Ç–º–µ–Ω—ã —É–±—Ä–∞–Ω –ø–æ —Ç–≤–æ–µ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)

        # 4) –¶–µ–ª–∏
        if data_norm["tp"]:
            tps_str = ", ".join(_fmt_price(x) for x in data_norm["tp"])
            parts.append(f"3Ô∏è‚É£ –¶–µ–ª–∏ (TP1..TP{len(data_norm['tp'])}): {tps_str}")

        # 5) –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –∫ TP1
        if potential is not None:
            sign = "+" if potential >= 0 else ""
            parts.append(f"4Ô∏è‚É£ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –∫ TP1: {sign}{potential}%")
        else:
            parts.append("4Ô∏è‚É£ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –∫ TP1: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.")

        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        notes = [str(n).strip() for n in (data_norm.get("notes") or []) if str(n).strip()]
        parts.append("‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
        if notes:
            for n in notes[:5]:
                parts.append(f"‚Ä¢ {n}")
        else:
            parts.append("‚Ä¢ –ù–µ—Ç –æ—Å–æ–±—ã—Ö –∑–∞–º–µ—á–∞–Ω–∏–π. –î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –ø–ª–∞–Ω—É DCA –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –¥–æ–ª—é –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ.")

        # –ß—Ç–æ –¥–∞–ª—å—à–µ ‚Äî –°–ü–û–¢-–≥–∞–π–¥
        parts.append("‚úÖ –ß—Ç–æ –¥–∞–ª—å—à–µ")
        parts.append("‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–µ—á–æ. –ü–æ–∫—É–ø–∞–π—Ç–µ —á–∞—Å—Ç—è–º–∏ –ø–æ –ø–ª–∞–Ω—É DCA.")
        parts.append("‚Ä¢ –î–æ–ª—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ ‚Äî —Ä–∞–∑—É–º–Ω–∞—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ 10‚Äì20%).")
        parts.append("‚Ä¢ –§–∏–∫—Å–∏—Ä—É–π—Ç–µ —á–∞—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏ –ø–æ —Ü–µ–ª—è–º; –æ—Å—Ç–∞—Ç–æ–∫ –º–æ–∂–Ω–æ –¥–µ—Ä–∂–∞—Ç—å –¥–æ–ª—å—à–µ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞.")

        # –¢–µ—Ö-JSON (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π, –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π) ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –ª–æ–≥–æ–≤ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –ø—Ä–æ–µ–∫—Ç–∞
        compact_json = json.dumps(data_norm, ensure_ascii=False, separators=(",", ":"), sort_keys=True)
        parts.append(f'"""{compact_json}"""')

        await msg.reply_text("\n".join(parts))

    except Exception:
        logging.exception("handle_strategy_photo failed")
        await msg.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω–≤–µ—Å—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ —Å–∫—Ä–∏–Ω—É. –ü—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–Ω –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# --- UID SUBMISSION (—Ä–µ—Ñ–µ—Ä–∞–ª —á–µ—Ä–µ–∑ –±—Ä–æ–∫–µ—Ä–∞) ---
async def handle_uid_submission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –±—Ä–æ–∫–µ—Ä–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –∏ –ø—Ä–∏—Å–ª–∞–ª UID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
    –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–∏—ë–º.
    """
    uid = (update.message.text or "").strip()
    if not uid.isdigit():
        await update.message.reply_text("‚ùóÔ∏è –ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, UID —Ü–∏—Ñ—Ä–∞–º–∏. –ü—Ä–∏–º–µ—Ä: 12345678.")
        return

    user_id = update.effective_user.id
    username = update.effective_user.username or "no_username"
    ref_program = context.user_data.get("ref_program", "broker_ref")
    broker = context.user_data.get("broker", "unknown")

    # –ü–∏—à–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º (–±–µ–∑ rate‚Äëlimit –ø—Ä–æ–±–ª–µ–º)
    try:
        from datetime import datetime  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤–µ—Ä—Ö—É
        row = [str(user_id), username, datetime.now().strftime("%Y-%m-%d %H:%M"), ref_program, broker, uid]
        await asyncio.to_thread(safe_append_row, row)
        logging.info(f"[REF_UID] {user_id=} {username=} {broker=} {uid=}")
        await update.message.reply_text(
            "‚úÖ UID –ø—Ä–∏–Ω—è—Ç. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–π–º—ë—Ç –¥–æ 10 –º–∏–Ω—É—Ç. –Ø –æ—Ç–ø–∏—à—É—Å—å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=REPLY_MARKUP
        )
    except Exception as e:
        logging.error(f"[handle_uid_submission] Google Sheets error: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å UID. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É @zhbankov_alex.",
            reply_markup=REPLY_MARKUP
        )

    # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è UID
    context.user_data.pop("awaiting_uid", None)


async def handle_calendar_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    photo = update.message.photo[-1]
    file = await photo.get_file()
    image_bytes = await file.download_as_bytearray()

    image = Image.open(BytesIO(image_bytes)).convert("RGB")
    buffer = BytesIO()
    image.save(buffer, format="JPEG", quality=80)
    image_base64 = base64.b64encode(buffer.getvalue()).decode()

    await update.message.reply_text("üîé –†–∞—Å–ø–æ–∑–Ω–∞—é –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é...")

    result = await generate_news_from_image(image_base64)

    if result:
        await update.message.reply_text(f"üìà –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É:\n\n{result}", reply_markup=ReplyKeyboardMarkup([["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]], resize_keyboard=True))
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª–µ–µ —á—ë—Ç–∫–∏–π —Å–∫—Ä–∏–Ω.", reply_markup=ReplyKeyboardMarkup([["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]], resize_keyboard=True))

async def generate_news_from_image(image_base64: str) -> str:
    prompt = (
        "Act as a world-class macroeconomic strategist with 20+ years of experience advising hedge funds, prop trading desks, and crypto funds. "
        "You specialize in interpreting economic calendar data, surprises in forecasts, and macro releases to assess their short-term market impact.\n\n"
        "You are analyzing a screenshot from an economic calendar (such as 'Initial Jobless Claims', 'CPI', etc). Extract from the image:\n"
        "- Event\n- Fact\n- Forecast\n- Previous\n\n"
        "Then give a professional, concise macroeconomic interpretation.\n\n"
        "üéØ Your response must be written STRICTLY in Russian, without using markdown symbols (*, _, -).\n\n"
        "üìê Structure your analysis as follows:\n\n"
        "1Ô∏è‚É£ –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è:\n"
        "2Ô∏è‚É£ –í–ª–∏—è–Ω–∏–µ –Ω–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
        "3Ô∏è‚É£ –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:\n"
        "‚û°Ô∏è Bullish ‚Äî\n"
        "‚û°Ô∏è Bearish ‚Äî\n"
        "4Ô∏è‚É£ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –∞–Ω–∞–ª–æ–≥–∏—è:\n\n"
        "üö´ Do NOT give trade entries, SL, or TP levels. Focus only on macro reasoning, narrative shifts, and positioning logic.\n"
        "Use short paragraphs. Be direct, sharp, and professional. Absolutely no markdown."
    )

    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "user", "content": [
                    {"type": "text", "text": prompt},
                    {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_base64}"}}
                ]}
            ]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"[generate_news_from_image error] {e}")
        return None

async def handle_definition_term(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip()

    # üö™ –í—ã—Ö–æ–¥ –ø–æ –∫–Ω–æ–ø–∫–µ
    if user_text == "‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é":
        context.user_data.pop("awaiting_definition_term", None)
        await update.message.reply_text(
            "üîô –¢—ã –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=REPLY_MARKUP
        )
        return

    term = user_text

    prompt = (
        f"You are a professional trader and educator with over 10 years of experience.\n\n"
        f"Explain in very simple terms what '{term}' means, as if teaching someone who is a complete beginner with zero trading experience.\n\n"
        "- Provide a short, clear definition in one or two sentences.\n"
        "- Then give a simple analogy (like comparing to a store, sports, or everyday life) so the concept becomes intuitive.\n"
        "- Finally, give a concrete example from trading practice where this term is used.\n\n"
        "Avoid unnecessary fluff and do not use professional jargon without immediately explaining it.\n"
        "Answer strictly in Russian."
    )

    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )

        reply_markup = ReplyKeyboardMarkup([["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]], resize_keyboard=True)

        text = response.choices[0].message.content.strip()
        if not text:
            await update.message.reply_text(
                "‚ö†Ô∏è GPT –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å —Ç–µ—Ä–º–∏–Ω –µ—â—ë —Ä–∞–∑.",
                reply_markup=reply_markup
            )
            return

        await update.message.reply_text(
            f"üìò –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:\n\n{text}",
            reply_markup=reply_markup
        )

    except Exception as e:
        logging.error(f"[DEFINITION] GPT error: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è GPT –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardMarkup([["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )

async def handle_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    text = (msg.text or "").strip()
    user_id = update.effective_user.id if update and update.effective_user else None

    logging.info(f"[handle_main] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {text}")

    # üö™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (–∫–µ—à –∏–∑ Google Sheets).
    # –†–∞–∑—Ä–µ—à–∞–µ–º –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: ¬´–ö—É–ø–∏—Ç—å¬ª, ¬´–û –±–æ—Ç–µ¬ª, ¬´–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –±—Ä–æ–∫–µ—Ä–∞¬ª, ¬´–ö—Ä–∏–ø—Ç–æ–æ–±–º–µ–Ω¬ª.
    free_paths = {"üí∞ –ö—É–ø–∏—Ç—å", "‚ÑπÔ∏è –û –±–æ—Ç–µ", "üîó –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –±—Ä–æ–∫–µ—Ä–∞", "üí∏ –ö—Ä–∏–ø—Ç–æ–æ–±–º–µ–Ω"}
    if user_id not in get_allowed_users() and text not in free_paths:
        await msg.reply_text(
            f"üîí –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${MONTHLY_PRICE_USD}/–º–µ—Å –∏–ª–∏ ${LIFETIME_PRICE_USD}. –õ–∏–±–æ —á–µ—Ä–µ–∑ –±—Ä–æ–∫–µ—Ä–∞.",
            reply_markup=REPLY_MARKUP
        )
        return

    # üí° –ò–Ω–≤–µ—Å—Ç–æ—Ä (–≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞)
    if text == "üí° –ò–Ω–≤–µ—Å—Ç–æ—Ä":
        context.user_data.clear()
        # üëá –≤–∫–ª—é—á–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π ¬´–∏–Ω–≤–µ—Å—Ç-—Ä–µ–∂–∏–º –ø–æ —Ñ–æ—Ç–æ¬ª, —á—Ç–æ–±—ã —Å–∫—Ä–∏–Ω —Å—Ä–∞–∑—É —É—à—ë–ª –≤ handle_strategy_photo
        context.user_data["awaiting_strategy"] = "photo"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="strategy_text")],
            [InlineKeyboardButton("üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω", callback_data="strategy_photo")],
        ])
        await msg.reply_text("üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:", reply_markup=keyboard)
        return

    # üéØ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞ (fallback-–≤—Ö–æ–¥; –æ—Å–Ω–æ–≤–Ω–æ–π –≤—Ö–æ–¥ ‚Äî —á–µ—Ä–µ–∑ ConversationHandler)
    if text == "üéØ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
        return await start_risk_calc(update, context)

    # üå± –ü—Å–∏—Ö–æ–ª–æ–≥
    if text == "üå± –ü—Å–∏—Ö–æ–ª–æ–≥":
        return await start_therapy(update, context)

    # üîç –ù–æ–≤–æ—Å—Ç–∏ / üîé –ê–Ω–∞–ª–∏–∑ (–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–∫—Ä–∏–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è)
    if text in ("üîç –ù–æ–≤–æ—Å—Ç–∏", "üîé –ê–Ω–∞–ª–∏–∑"):
        context.user_data.clear()
        context.user_data["awaiting_calendar_photo"] = True
        await msg.reply_text(
            "üì∏ –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Å–æ–±—ã—Ç–∏–µ –∏ –¥–∞–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é.",
            reply_markup=ReplyKeyboardMarkup([["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )
        return

    # üìö –¢–µ—Ä–º–∏–Ω
    if text == "üìö –¢–µ—Ä–º–∏–Ω":
        context.user_data.clear()
        context.user_data["awaiting_definition_term"] = True
        await msg.reply_text(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ—Ä–º–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å.",
            reply_markup=ReplyKeyboardMarkup([["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )
        return

    # üöÄ –¢—Ä–µ–π–¥–µ—Ä (–≤—ã–±–æ—Ä —Ä—ã–Ω–∫–∞)
    if text == "üöÄ –¢—Ä–µ–π–¥–µ—Ä":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üíé Crypto", callback_data="market_crypto")],
            [InlineKeyboardButton("üí± Forex", callback_data="market_forex")],
        ])
        await msg.reply_text("‚ö° –î–ª—è –∫–∞–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ —Å–¥–µ–ª–∞—Ç—å –∞–Ω–∞–ª–∏–∑?", reply_markup=keyboard)
        return

    # üí∏ –ö—Ä–∏–ø—Ç–æ–æ–±–º–µ–Ω (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏)
    if text == "üí∏ –ö—Ä–∏–ø—Ç–æ–æ–±–º–µ–Ω":
        await msg.reply_text(
            "üí∏ –ö—Ä–∏–ø—Ç–æ–æ–±–º–µ–Ω ‚Äî –±—ã—Å—Ç—Ä–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n\n"
            "üîπ –†–∞–±–æ—Ç–∞–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∏ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–æ–Ω–∞\n"
            "üîπ 17 —Ä–µ–≥–∏–æ–Ω–æ–≤ –†–§ ‚Äî —É–¥–æ–±–Ω–æ –∏ –±–ª–∏–∑–∫–æ –∫ –≤–∞–º\n"
            "üîπ –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏ ¬´—á–∏—Å—Ç—ã–µ¬ª —Å—Ä–µ–¥—Å—Ç–≤–∞\n"
            "üîπ –õ—é–±—ã–µ —Å—É–º–º—ã ‚Äî –æ—Ç —á–∞—Å—Ç–Ω—ã—Ö –¥–æ –æ–ø—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫\n\n"
            "üíº –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è –≤–∞—Å:\n"
            "‚úÖ –ë–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–∏—Å—Å–∏–π –∏ –ø–µ—Ä–µ–ø–ª–∞—Ç\n"
            "üöÄ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã\n"
            "üí∞ –í—ã–¥–∞—á–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—á—ë—Ç\n"
            "üõ° –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n\n"
            "üì© –î–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞–ø–∏—à–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üëâ @zhbankov_alex",
            reply_markup=ReplyKeyboardMarkup([["‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )
        return

    # üí∞ –ö—É–ø–∏—Ç—å
    if text == "üí∞ –ö—É–ø–∏—Ç—å":
        if user_id in get_allowed_users():
            await msg.reply_text("‚úÖ –£ —Ç–µ–±—è —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!", reply_markup=REPLY_MARKUP)
        else:
            await send_payment_link(update, context)
        return

    # ‚ÑπÔ∏è –û –±–æ—Ç–µ
    if text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        await msg.reply_text(
            "ü§ñ GPT-–¢—Ä–µ–π–¥–µ—Ä ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram –¥–ª—è –∫—Ä–∏–ø—Ç—ã –∏ —Ñ–æ—Ä–µ–∫—Å–∞.\n\n"
            "–ß—Ç–æ —É–º–µ–µ—Ç:\n"
            "‚Ä¢ –ü–æ —Å–∫—Ä–∏–Ω—É –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ 10 —Å–µ–∫: Entry / Stop / TakeProfit\n"
            "‚Ä¢ –ò–Ω–≤–µ—Å—Ç-–ø–ª–∞–Ω: –ø–æ–∫—É–ø–∫–∞, —É—Ä–æ–≤–Ω–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π (DCA), —Ü–µ–ª–∏ –∏ —Ä–∏—Å–∫–∏\n"
            "‚Ä¢ –ú–∞–∫—Ä–æ-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π (–∫–∞–ª–µ–Ω–¥–∞—Ä—å, CPI, –§–†–° –∏ –¥—Ä.)\n"
            "‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º –∏ —Å–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤\n"
            "‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞ –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞\n\n"
            "–ö–∞–∫ –Ω–∞—á–∞—Ç—å:\n"
            "1) –ù–∞–∂–º–∏ ¬´üí∞ –ö—É–ø–∏—Ç—å¬ª –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π –¥–æ—Å—Ç—É–ø.\n"
            "2) –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω ‚Äî –ø–æ–ª—É—á–∏ —É—Ä–æ–≤–Ω–∏ –∏ –ø–ª–∞–Ω.\n"
            "3) –ü—Ä–æ–≤–µ—Ä—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ ¬´üéØ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä¬ª.\n\n"
            f"–î–æ—Å—Ç—É–ø: ${MONTHLY_PRICE_USD}/–º–µ—Å –∏–ª–∏ ${LIFETIME_PRICE_USD} –Ω–∞–≤—Å–µ–≥–¥–∞ (USDT TRC20 —á–µ—Ä–µ–∑ CryptoCloud).\n"
            "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É –±—Ä–æ–∫–µ—Ä–∞ ‚Äî ¬´üîó –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –±—Ä–æ–∫–µ—Ä–∞¬ª.\n\n"
            "–í–∞–∂–Ω–æ: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ—Å–∏—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π.",
            reply_markup=REPLY_MARKUP
        )
        return

    # üîó –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –±—Ä–æ–∫–µ—Ä–∞
    if text == "üîó –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –±—Ä–æ–∫–µ—Ä–∞":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("Bybit", callback_data="ref_bybit")],
            [InlineKeyboardButton("Forex4You", callback_data="ref_forex4you")],
        ])
        await msg.reply_text(
            "üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–∫–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ:\n"
            "- –î–ª—è Bybit –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç $150\n"
            "- –î–ª—è Forex4You –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç $200\n\n"
            "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π UID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            reply_markup=keyboard
        )
        return

    # üìå –°–µ—Ç–∞–ø (–¥–ª—è –∞–¥–º–∏–Ω–∞)
    if text == "üìå –°–µ—Ç–∞–ø":
        if user_id not in ADMIN_IDS:
            await msg.reply_text("‚õîÔ∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
            return
        await msg.reply_text("‚úçÔ∏è –£–∫–∞–∂–∏ —Ç–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC/USDT):")
        return SETUP_1

    # ‚úÖ –û—Ç–∫—Ä—ã—Ç—ã–µ –¥–∏–∞–ª–æ–≥–∏ (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞–Ω–∏—è)
    if context.user_data.get("awaiting_invest_question"):
        return await handle_invest_question(update, context)
    if context.user_data.get("awaiting_definition_term"):
        return await handle_definition_term(update, context)
    if context.user_data.get("awaiting_therapy_input"):
        return await gpt_psychologist_response(update, context)
    if context.user_data.get("awaiting_uid"):
        return await handle_uid_submission(update, context)

    # ‚Ü©Ô∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥
    if text in ("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"):
        context.user_data.clear()
        await msg.reply_text("üîô –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=REPLY_MARKUP)
        return

    # üîÑ –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–∂–∏–¥–∞–µ–º ‚Äî –º—è–≥–∫–∏–π —Å–±—Ä–æ—Å
    saved = {k: v for k, v in context.user_data.items() if k in ("selected_market", "selected_strategy")}
    context.user_data.clear()
    context.user_data.update(saved)
    await msg.reply_text("üîÑ –°–±—Ä–æ—Å –≤—Å–µ—Ö –æ–∂–∏–¥–∞–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π.", reply_markup=REPLY_MARKUP)

async def start_therapy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã handle_main –ø–æ–Ω–∏–º–∞–ª, —á—Ç–æ –∞–∫—Ç–∏–≤–µ–Ω –ø—Å–∏—Ö–æ–ª–æ–≥
    context.user_data["awaiting_therapy_input"] = True

    therapy_keyboard = [["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]]
    reply_markup = ReplyKeyboardMarkup(therapy_keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üòµ‚Äçüí´ –ù—É —á—Ç–æ, –æ–ø—è—Ç—å —Ä—ã–Ω–æ–∫ –ø–æ–±—Ä–∏–ª –∫–∞–∫ –±–∞—Ä–±–µ—Ä –≤ –ø—è—Ç–Ω–∏—Ü—É? –ë—ã–≤–∞–µ—Ç, –¥—Ä—É–≥.\n\n"
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å ‚Äî GPT-–ø—Å–∏—Ö–æ–ª–æ–≥ —Å –¥–æ–±—Ä–æ–π –∏—Ä–æ–Ω–∏–µ–π –≤—ã—Å–ª—É—à–∞–µ—Ç, –ø–æ–¥–±–æ–¥—Ä–∏—Ç –∏ –≤—Å—Ç–∞–≤–∏—Ç –º–µ–º.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ¬´‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é¬ª.",
        reply_markup=reply_markup
    )

async def gpt_psychologist_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é
    if user_text == "‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é":
        context.user_data.pop("awaiting_therapy_input", None)
        await update.message.reply_text(
            "üîÅ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=REPLY_MARKUP
        )
        return

    prompt = (
        "You are a GPT-psychologist for traders. "
        "You respond with warm irony and light humor, helping them cope with gambling addiction tendencies, losing streaks, and emotional swings. "
        "Avoid gender-specific words like 'bro' or 'girl', use neutral terms such as 'friend', 'colleague', or 'trader'.\n\n"
        f"User's message:\n{user_text}\n\n"
        "üìå Follow this exact structure:\n\n"
        "1Ô∏è‚É£ React empathetically, but without pity. Show you understand the feeling of losses.\n\n"
        "2Ô∏è‚É£ Provide a metaphor to help the trader realize that a drawdown isn't the end. "
        "For example: 'it's like pulling back a slingshot before it fires.'\n\n"
        "3Ô∏è‚É£ Give a fact or story showing that even top traders have losing streaks (like Soros or Druckenmiller). "
        "This builds confidence that everyone experiences losses.\n\n"
        "4Ô∏è‚É£ Suggest one simple micro-action to feel in control right now, like closing the terminal, journaling emotions, or stepping outside.\n\n"
        "5Ô∏è‚É£ Finish with a trading meme or funny short quote, e.g.: '‚Äî Are you holding a position? ‚Äî No, I'm holding back tears üò≠.'\n\n"
        "‚ö†Ô∏è Avoid generic phrases like 'don't worry' or 'everything will be fine'. Be specific, warm, and slightly ironic.\n"
        "Answer everything strictly in Russian."
    )

    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )

        reply_markup = ReplyKeyboardMarkup([["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]], resize_keyboard=True)

        await update.message.reply_text(
            f"üßò GPT-–ø—Å–∏—Ö–æ–ª–æ–≥:\n{response.choices[0].message.content.strip()}",
            reply_markup=reply_markup
        )

    except Exception as e:
        logging.error(f"[GPT_PSYCHOLOGIST] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardMarkup([["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )

def extract_tx_id(d: dict) -> str:
    """–ü—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π IPN."""
    if not isinstance(d, dict):
        return ""
    # 1) –ü—Ä—è–º—ã–µ –∫–ª—é—á–∏
    for k in ("tx_id", "txid", "txn_id", "tx_hash", "hash", "transaction_id", "payment_id", "id"):
        v = d.get(k)
        if v:
            return str(v)

    # 2) –ß–∞—Å—Ç—ã–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    for container in ("transaction", "payment"):
        sub = d.get(container)
        if isinstance(sub, dict):
            for k in ("id", "tx_id", "txid", "hash"):
                v = sub.get(k)
                if v:
                    return str(v)

    return ""


def parse_order_id(raw: str) -> tuple[int | None, str, str]:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã:
      user_{user_id}_{username}_{plan}
      user_{user_id}_{plan}
      user_{user_id}
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (user_id, username, plan)
    """
    if not isinstance(raw, str) or not raw.startswith("user_"):
        raise ValueError(f"Unexpected order_id prefix: {raw}")

    rest = raw[len("user_"):]
    # –æ—Ç–¥–µ–ª—è–µ–º user_id
    if "_" in rest:
        uid_str, remainder = rest.split("_", 1)
    else:
        uid_str, remainder = rest, ""

    try:
        user_id = int(uid_str)
    except Exception as e:
        raise ValueError(f"Bad user_id in order_id: {uid_str}") from e

    username = ""
    plan = "unknown"

    if remainder:
        # –µ—Å–ª–∏ –µ—Å—Ç—å –∏ username, –∏ plan ‚Äî –∑–∞–±–∏—Ä–∞–µ–º –ø–ª–∞–Ω –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç
        if "_" in remainder:
            username, plan = remainder.rsplit("_", 1)
        else:
            username, plan = "", remainder

    username = (username or "").lstrip("@").strip()
    plan = (plan or "unknown").strip().lower()
    if plan not in {"monthly", "lifetime"}:
        plan = "unknown"

    return user_id, username, plan


def validate_payment_fields(data: dict, plan: str) -> tuple[bool, str, Decimal, str, str]:
    """
    –ñ—ë—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã/–≤–∞–ª—é—Ç—ã/—Å–µ—Ç–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–ª–∞–Ω—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (ok, reason, amount, currency, network_norm)

    –ü—Ä–∞–≤–∏–ª–∞:
    - –°—É–º–º–∞: —Å—Ç—Ä–æ–≥–æ —Ä–∞–≤–Ω–∞ –æ–∂–∏–¥–∞–µ–º–æ–π –ø–æ –ø–ª–∞–Ω—É (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 0.01).
    - –í–∞–ª—é—Ç–∞: —Å—Ç—Ä–æ–≥–æ —Ä–∞–≤–Ω–∞ PAY_CURRENCY (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞).
    - –°–µ—Ç—å: –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø—Ä–∏—Å–ª–∞–ª, —Å–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (TRC20‚â°TRON, BEP20‚â°BSC).
            –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ –ø—Ä–∏—Å–ª–∞–Ω–∞, –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.
    """
    # 1) –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞ –ø–æ –ø–ª–∞–Ω—É
    plan_map = {
        "monthly": Decimal(str(MONTHLY_PRICE_USD)),
        "lifetime": Decimal(str(LIFETIME_PRICE_USD)),
    }
    expected = plan_map.get(plan)
    if expected is None:
        return False, "unknown plan", Decimal(0), "", ""

    # 2) –°—É–º–º–∞ (–º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ —á–∏—Å–ª–æ–º/—Å—Ç—Ä–æ–∫–æ–π/—Å –∑–∞–ø—è—Ç–æ–π)
    raw_amount = data.get("amount") if isinstance(data, dict) else None
    if raw_amount is None:
        return False, "missing amount", Decimal(0), "", ""
    try:
        # –¥–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—è—Ç—É—é –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        amount = Decimal(str(raw_amount).replace(",", ".")).quantize(Decimal("0.01"))
    except InvalidOperation:
        return False, f"bad amount: {raw_amount}", Decimal(0), "", ""

    # 3) –í–∞–ª—é—Ç–∞/—Å–µ—Ç—å
    currency = (data.get("currency") or "").strip().upper()
    network_raw = (data.get("network") or data.get("chain") or "").strip().upper()

    # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–µ–π
    aliases = {
        "TRC20": "TRON", "TRON": "TRON",
        "BEP20": "BSC",  "BSC": "BSC",
        "ERC20": "ERC20",
        "TON": "TON",
    }
    network_norm = aliases.get(network_raw, network_raw)

    # 4) –û–∂–∏–¥–∞–µ–º—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏/None)
    pay_curr = (PAY_CURRENCY or "").strip().upper()
    pay_net = (PAY_NETWORK or "").strip().upper()
    pay_net_norm = aliases.get(pay_net, pay_net)

    # 5) –°—Ç—Ä–æ–≥–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if amount != expected:
        return False, f"amount mismatch {amount} != {expected}", amount, currency, network_norm

    if pay_curr and currency != pay_curr:
        return False, f"currency mismatch {currency} != {PAY_CURRENCY}", amount, currency, network_norm

    # –ï—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø—Ä–∏—Å–ª–∞–ª network –ò —É –Ω–∞—Å –∑–∞–¥–∞–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è —Å–µ—Ç—å ‚Äî —Å–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    if network_norm and pay_net_norm and network_norm != pay_net_norm:
        return False, f"network mismatch {network_norm} != {PAY_NETWORK}", amount, currency, network_norm

    return True, "ok", amount, currency, network_norm


# ‚úÖ Webhook –æ—Ç CryptoCloud
@app_flask.route("/cryptocloud_webhook", methods=["POST"])
def cryptocloud_webhook():
    body = request.get_data()  # bytes
    signature_hdr = (request.headers.get("X-Signature-SHA256") or "").strip().lower()
    calc_sig = hmac.new(API_SECRET.encode(), body, hashlib.sha256).hexdigest().lower()

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
    if not hmac.compare_digest(signature_hdr, calc_sig):
        logging.warning("‚ö† –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å IPN")
        return jsonify({"status": "invalid signature"}), 400

    data = request.json or {}
    if not isinstance(data, dict):
        logging.warning("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ç–µ–ª–æ IPN (–Ω–µ dict)")
        return jsonify({"status": "bad payload"}), 400

    status = str(data.get("status") or "").lower()
    raw_order_id = (data.get("order_id") or "").strip()
    tx_id = extract_tx_id(data)

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (–±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    logging.info(
        "‚úÖ IPN: status=%s, order_id='%s', tx_id='%s', amount='%s', currency='%s', network='%s'",
        status,
        raw_order_id,
        tx_id,
        data.get("amount"),
        data.get("currency"),
        (data.get("network") or data.get("chain")),
    )

    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    if status != "paid":
        return jsonify({"status": "ignored (not paid)"}), 200

    if not raw_order_id:
        return jsonify({"status": "missing order_id"}), 400

    # –ü–∞—Ä—Å–∏–º order_id ‚Üí (user_id, username, plan)
    try:
        user_id, username, plan = parse_order_id(raw_order_id)
    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ order_id='%s': %s", raw_order_id, e)
        return jsonify({"status": "bad order_id"}), 400

    # –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å TTL: –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ–¥–Ω—É –∏ —Ç—É –∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é/–ø–ª–∞—Ç—ë–∂
    unique_key = tx_id or f"{raw_order_id}:{data.get('amount')}:{data.get('currency')}"
    now = time.time()
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π
    for k, ts in list(PROCESSED_PAYMENTS.items()):
        if now - ts > PROCESSED_TTL_SEC:
            PROCESSED_PAYMENTS.pop(k, None)
    if unique_key in PROCESSED_PAYMENTS:
        logging.info("‚ôªÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ IPN, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º. key='%s'", unique_key)
        return jsonify({"status": "duplicate ignored"}), 200
    PROCESSED_PAYMENTS[unique_key] = now

    # –ñ—ë—Å—Ç–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã/–≤–∞–ª—é—Ç—ã/—Å–µ—Ç–∏ (—Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–µ—Ç–µ–π –≤–Ω—É—Ç—Ä–∏)
    ok, reason, amount, currency, network = validate_payment_fields(data, plan)
    if not ok:
        logging.error("‚õî –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: %s. plan=%s, tx_id='%s'", reason, plan, tx_id)
        return jsonify({"status": "validation failed", "reason": reason}), 400

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –ª–æ–∫–∞–ª—å–Ω–æ + –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
    try:
        ALLOWED_USERS.add(user_id)
        # –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º TTL –∫–µ—à–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞—Ç—ë—Ä—Å—è –¥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        global ALLOWED_USERS_TIMESTAMP
        ALLOWED_USERS_TIMESTAMP = time.time()

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ Sheets –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º loop (—á–µ—Ä–µ–∑ —Ç—Ä–µ–¥-–ø—É–ª)
        loop = getattr(app_flask, "loop", None) or asyncio.get_event_loop()
        asyncio.run_coroutine_threadsafe(
            asyncio.to_thread(log_payment, user_id, username),
            loop
        )
    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: %s", e)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ loop –±–æ—Ç–∞
    try:
        loop = getattr(app_flask, "loop", None) or asyncio.get_event_loop()
        asyncio.run_coroutine_threadsafe(
            notify_user_payment(user_id),
            loop
        )
    except Exception as e:
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ %s: %s", user_id, e)

    logging.info(
        "üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: user_id=%s, plan=%s, amount=%s %s%s, tx_id='%s'",
        user_id,
        plan,
        amount,
        currency,
        ("/" + network) if network else "",
        tx_id
    )

    return jsonify({"ok": True}), 200

def sanitize_username(u: str | None) -> str:
    if not u:
        return "nouser"
    # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ [A-Za-z0-9_], —Ä–µ–∂–µ–º –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤
    return re.sub(r"[^\w]+", "", u)[:32]

# üöÄ –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ POS: –º–µ—Å—è—Ü –∏ –Ω–∞–≤—Å–µ–≥–¥–∞ (—Å username –≤ order_id)
async def send_payment_link(update, context):
    user_id = update.effective_user.id
    uname = sanitize_username(update.effective_user.username)

    monthly_qs = urlencode({
        "amount": MONTHLY_PRICE_USD,
        "currency": PAY_CURRENCY,
        "network": PAY_NETWORK,
        "order_id": f"user_{user_id}_{uname}_monthly",
        "desc": "GPT_Trader_Monthly"
    })
    lifetime_qs = urlencode({
        "amount": LIFETIME_PRICE_USD,
        "currency": PAY_CURRENCY,
        "network": PAY_NETWORK,
        "order_id": f"user_{user_id}_{uname}_lifetime",
        "desc": "GPT_Trader_Lifetime"
    })

    monthly_link  = f"https://pay.cryptocloud.plus/pos/{CRYPTOCLOUD_SHOP_ID}?{monthly_qs}"
    lifetime_link = f"https://pay.cryptocloud.plus/pos/{CRYPTOCLOUD_SHOP_ID}?{lifetime_qs}"

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å ${MONTHLY_PRICE_USD}/–º–µ—Å", url=monthly_link)],
        [InlineKeyboardButton(f"üèÜ –†–∞–∑–æ–≤–æ ${LIFETIME_PRICE_USD} –Ω–∞–≤—Å–µ–≥–¥–∞", url=lifetime_link)]
    ])
    await update.message.reply_text("üíµ –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ GPT‚Äë–¢—Ä–µ–π–¥–µ—Ä—É:", reply_markup=keyboard)

# üöÄ –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å loop
def run_flask(loop):
    app_flask.loop = loop
    port = int(os.environ.get("PORT", 5000))
    print(f"[render-port] Server bound to PORT={port}")
    app_flask.run(host="0.0.0.0", port=port)

# üëá –í–°–¢–ê–í–¨ –ó–î–ï–°–¨:
ADMIN_IDS = {407721399}  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π user_id

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PHOTO_PATH = os.path.join(BASE_DIR, "GPT-–¢—Ä–µ–π–¥–µ—Ä –ø–æ–º–æ—â–Ω–∏–∫.png")

# Health-check –¥–ª—è Render
@app_flask.route("/", methods=["GET", "HEAD"])
def render_health_ok():
    return "OK", 200

async def publish_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
        return

    # –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    bot_url = globals().get("BOT_URL", "https://t.me/CtyptorobBot")

    caption = (
        "üöÄ *–¢–í–• (–¢–≤–æ—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞)* ‚Äî —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞: ü§ñ GPT-–±–æ—Ç, üì¢ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª, üí¨ —á–∞—Ç —Å —Ç–æ–ø–∏–∫–∞–º–∏ –∏ üîí VIP-—Å–∏–≥–Ω–∞–ª—ã.\n\n"
        "üìä –ß—Ç–æ –¥–∞—ë—Ç –±–æ—Ç –¢–í–•:\n"
        "‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ —Å–∫—Ä–∏–Ω—É –∑–∞ 10 —Å–µ–∫—É–Ω–¥\n"
        "‚Ä¢ –ß—ë—Ç–∫–∏–µ —É—Ä–æ–≤–Ω–∏: –≤—Ö–æ–¥, —Å—Ç–æ–ø, —Ç–µ–π–∫–∏\n"
        "‚Ä¢ –†—ã–Ω–∫–∏: Crypto, Forex –∏ MOEX\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π (–§–†–°, ETF, —Ö–∞—Ä–¥—Ñ–æ—Ä–∫–∏, –º–∞–∫—Ä–æ)\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ GPT-–ø—Å–∏—Ö–æ–ª–æ–≥–∞ üòÖ\n\n"
        "üì∞ –ü–ª—é—Å: —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ ‚Äî –±–µ–∑ —à—É–º–∞, –ª—É–¥–æ–º–∞–Ω–æ–≤ –∏ –∏–Ω—Ñ–æ—Ü—ã–≥–∞–Ω\n"
        "‚ö°Ô∏è –ü—Ä–µ–º–∏—É–º: –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Å–∫–∞–ª—å–ø–µ—Ä—Å–∫–∏–µ —Å–µ—Ç–∞–ø—ã + ¬´–ª—é–∫—Å–æ–≤—ã–µ¬ª —Å–∏–≥–Ω–∞–ª—ã –ò–ò (—Å PRO TradingView)\n\n"
        f"üî• –ü–æ–¥–∫–ª—é—á–∏ –¢–í–• ‚Äî –≤—Å–µ–≥–æ ${MONTHLY_PRICE_USD}/–º–µ—Å –∏–ª–∏ ${LIFETIME_PRICE_USD} –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"
        "üë• –ß–∞—Ç —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ üëâ [TBX Chat](https://t.me/+yUYqG8JuwuZiZmUy)\n"
        "üí¨ –í–æ–ø—Ä–æ—Å—ã üëâ [@zhbankov_alex](https://t.me/zhbankov_alex)\n\n"
        "‚ú® –ò —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ. –ú—ã —Å –±–æ—Ç–æ–º –±—É–¥–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ, —á—Ç–æ–±—ã —Ç—ã —Ä–æ—Å –≤–º–µ—Å—Ç–µ —Å –∫–æ–º—å—é–Ω–∏—Ç–∏. "
        "–¢–í–• ‚Äî —ç—Ç–æ —Ç–≤–æ—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –∏ —Ç–≤–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. üöÄ"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", url=bot_url)]
    ])

    try:
        chat_id = "@TBXtrade"

        # —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –∑–∞–∫—Ä–µ–ø, –µ—Å–ª–∏ –µ—Å—Ç—å
        chat_obj = await context.bot.get_chat(chat_id)
        if getattr(chat_obj, "pinned_message", None):
            await context.bot.unpin_chat_message(
                chat_id=chat_id,
                message_id=chat_obj.pinned_message.message_id
            )

        # –ø—É–±–ª–∏–∫—É–µ–º –æ–¥–Ω—É –∏ —Ç—É –∂–µ –∞–Ω–∏–º–∞—Ü–∏—é, —á—Ç–æ –∏ –≤ /start; –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî —Ñ–æ—Ç–æ
        try:
            with open(VIDEO_PATH, "rb") as anim:
                message = await context.bot.send_animation(
                    chat_id=chat_id,
                    animation=anim,
                    caption=caption,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
        except Exception as e_anim:
            logging.warning(f"[publish_post] send_animation failed, fallback to photo. err={e_anim}")
            with open(PHOTO_PATH, "rb") as photo:
                message = await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=caption,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )

        # –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –ø–æ—Å—Ç
        await context.bot.pin_chat_message(
            chat_id=chat_id,
            message_id=message.message_id,
            disable_notification=True
        )

        await update.message.reply_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –≤ –∫–∞–Ω–∞–ª–µ.")
    except Exception as e:
        logging.error(f"[PUBLISH] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª, –ø—Ä–∞–≤–∞ –∏ –ª–æ–≥–∏.")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
        return

    args = context.args
    if not args:
        await update.message.reply_text("‚úçÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫:\n/broadcast –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è VIP –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        return

    message_text = " ".join(args)
    success_count = 0
    failed_users = []

    for vip_id in ALLOWED_USERS:
        try:
            await context.bot.send_message(
                chat_id=vip_id,
                text=f"üöÄ *VIP-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞:*\n\n{message_text}",
                parse_mode="Markdown"
            )
            success_count += 1
        except Exception as e:
            logging.error(f"[BROADCAST] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å VIP {vip_id}: {e}")
            failed_users.append(vip_id)

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        f"{'‚ö†Ô∏è –û—à–∏–±–∫–∏ —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.' if failed_users else ''}"
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º message
    msg = getattr(update, "message", None)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    user_id = update.effective_user.id if update and update.effective_user else None
    if user_id not in ADMIN_IDS:
        if msg:
            await msg.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
        return

    try:
        # –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ Google Sheets –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ event loop
        records = await asyncio.to_thread(sheet.get_all_records)
        total_records = len(records)
        allowed_count = len(ALLOWED_USERS)

        last_entry = records[-1] if records else {}
        # –û–≥—Ä–∞–Ω–∏—á–∏–º —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ (–Ω–∞ —Å–ª—É—á–∞–π –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
        try:
            last_entry_str = json.dumps(last_entry, ensure_ascii=False, indent=2)
            if len(last_entry_str) > 3000:
                last_entry_str = last_entry_str[:3000] + "‚Ä¶"
        except Exception:
            last_entry_str = str(last_entry)[:3000] + "‚Ä¶"

        text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ ALLOWED_USERS: {allowed_count}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ Google Sheets: {total_records}\n\n"
            "üìù –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å:\n"
            f"{last_entry_str}"
        )

        if msg:
            await msg.reply_text(text)

    except Exception as e:
        logging.error(f"[STATS] –û—à–∏–±–∫–∞: {e}")
        if msg:
            await msg.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")


async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º message
    msg = getattr(update, "message", None)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    user_id = update.effective_user.id if update and update.effective_user else None
    if user_id not in ADMIN_IDS:
        if msg:
            await msg.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
        return

    try:
        # –ß—Ç–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏–∑ Google Sheets –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ event loop
        records = await asyncio.to_thread(sheet.get_all_records)

        # –ì–æ—Ç–æ–≤–∏–º CSV –≤ –ø–∞–º—è—Ç–∏
        import csv
        from io import StringIO, BytesIO

        csv_text = StringIO()
        writer = csv.DictWriter(csv_text, fieldnames=["user_id", "username", "email", "date"])
        writer.writeheader()
        for row in records:
            writer.writerow({
                "user_id": row.get("user_id", ""),
                "username": row.get("username", ""),
                "email": row.get("email", ""),
                "date": row.get("date", ""),
            })

        # –í PTB v21 –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–¥–∞—ë–º —Ñ–∞–π–ª –∫–∞–∫ BytesIO —Å –∏–º–µ–Ω–µ–º
        data = csv_text.getvalue().encode("utf-8")
        bio = BytesIO(data)
        bio.name = "users_export.csv"

        if msg:
            await msg.reply_document(
                document=bio,
                caption="üì• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ email –∏–∑ Google Sheets"
            )

    except Exception as e:
        logging.error(f"[EXPORT] –û—à–∏–±–∫–∞: {e}")
        if msg:
            await msg.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (photo –∏–ª–∏ document-–∫–∞—Ä—Ç–∏–Ω–∫–∞)
async def _extract_image_bytes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> BytesIO | None:
    msg = update.effective_message
    file_id = None

    if getattr(msg, "photo", None):
        file_id = msg.photo[-1].file_id
    elif getattr(msg, "document", None):
        doc = msg.document
        if (doc.mime_type or "").lower().startswith("image/"):
            file_id = doc.file_id

    if not file_id:
        return None

    tg_file = await context.bot.get_file(file_id)
    bio = BytesIO()
    await tg_file.download_to_memory(out=bio)  # PTB 21.x —Ç—Ä–µ–±—É–µ—Ç keyword-–∞—Ä–≥—É–º–µ–Ω—Ç out=
    bio.seek(0)
    return bio

def _to_jpeg_base64(bio: BytesIO) -> str:
    bio.seek(0)
    im = Image.open(bio).convert("RGB")
    out = BytesIO()
    im.save(out, format="JPEG", quality=90, optimize=True)
    out.seek(0)
    return base64.b64encode(out.read()).decode("ascii")


# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –Ω–µ –ø–∞–¥–∞–µ–º)
async def _call_if_exists(fn_name: str, update: Update, context: ContextTypes.DEFAULT_TYPE, fallback_text: str | None = None):
    fn = globals().get(fn_name)
    if callable(fn):
        if inspect.iscoroutinefunction(fn):
            return await fn(update, context)
        return fn(update, context)
    if fallback_text:
        await update.effective_message.reply_text(fallback_text)
    return None

# –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ handle_photo, –∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —É —Ç–µ–±—è –≤ —Ñ–∞–π–ª–µ
def _fallback_strategy() -> str:
    return "–ö—Ä–∞—Ç–∫–∏–π –ø–ª–∞–Ω –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω ‚Äî –ø—Ä–∏—à–ª–∏ –±–æ–ª–µ–µ —á–∏—Å—Ç—ã–π —Å–∫—Ä–∏–Ω (LuxAlgo SMC + —É—Ä–æ–≤–Ω–∏ S/R)."

async def unified_text_handler(update, context):
    """
    –ï–¥–∏–Ω—ã–π —Ä–æ—É—Ç–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (PTB 21.x, async).

    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:
    1) awaiting_calendar_photo  -> –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–∑–∞–≥–ª—É—à–∫–∞)
    2) awaiting_strategy == 'photo' -> –≤—ã—Ç–∞—â–∏—Ç—å –±–∞–π—Ç—ã –∏ –≤—ã–∑–≤–∞—Ç—å handle_strategy_photo
    3) –µ—Å–ª–∏ —Ñ–æ—Ç–æ/–¥–æ–∫-–∫–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äî handle_photo
    4) –∏–Ω–∞—á–µ ‚Äî handle_main

    –í–æ –≤—Å–µ—Ö –≤–µ—Ç–∫–∞—Ö: —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ None, –∫–æ—Ä–æ—Ç–∫–∏–µ RU-—Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.
    """
    try:
        msg = update.effective_message if update else None
        if not msg:
            return

        text = (getattr(msg, "text", "") or "").strip()
        doc = getattr(msg, "document", None)
        is_image_doc = bool(doc and (doc.mime_type or "").startswith("image/"))
        has_photo = bool(getattr(msg, "photo", None)) or is_image_doc

        # ‚Ü©Ô∏è –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ ¬´–æ–∂–∏–¥–∞–ª–∫–∏¬ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∏ –≤—ã—Ö–æ–¥–∏–º
        if text in ("‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"):
            for k in (
                "awaiting_calendar_photo",
                "awaiting_strategy",
                "awaiting_strategy_mode",
                "awaiting_potential",
                "awaiting_definition_term",
                "awaiting_invest_question",
                "awaiting_uid",
            ):
                try:
                    context.user_data.pop(k, None)
                except Exception:
                    pass

            # –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            try:
                await msg.reply_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=_get_main_markup())
            except Exception:
                await msg.reply_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

            # –≤—ã–≤–µ—Å—Ç–∏ —Å–∞–º–æ –º–µ–Ω—é (–µ—Å–ª–∏ –µ—Å—Ç—å handle_main) –∏ –Ω–µ –ø–∞–¥–∞—Ç—å –¥–∞–ª—å—à–µ
            await _call_if_exists(
                "handle_main",
                update, context,
                fallback_text="üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
            )
            return

        # 1) –≠–∫–æ–Ω–æ–º–∫–∞–ª–µ–Ω–¥–∞—Ä—å (—Ñ–æ—Ç–æ/–¥–æ–∫-–∫–∞—Ä—Ç–∏–Ω–∫–∞)
        if context.user_data.get("awaiting_calendar_photo"):
            bio = await _extract_image_bytes(update, context)
            context.user_data.pop("awaiting_calendar_photo", None)
            if not bio:
                await msg.reply_text("–ù–µ –≤–∏–∂—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç-–∫–∞—Ä—Ç–∏–Ω–∫—É.")
                return
            # –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–≤–æ–π handle_calendar_photo(...)
            await msg.reply_text("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–ª—É—á–µ–Ω. –ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–æ–¥—É–ª–µ.")
            return

        # 2) –ò–Ω–≤–µ—Å—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ —Ñ–æ—Ç–æ
        if context.user_data.get("awaiting_strategy") == "photo":
            bio = await _extract_image_bytes(update, context)
            context.user_data.pop("awaiting_strategy", None)
            if not bio:
                await msg.reply_text("–ù–µ –≤–∏–∂—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç-–∫–∞—Ä—Ç–∏–Ω–∫—É.")
                return
            await handle_strategy_photo(update, context, image_bytes=bio)
            return  # –≤–∞–∂–Ω–æ: –Ω–µ —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è –ø–æ—Ç–æ–º –≤ handle_main

        # 3) –û–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ/–¥–æ–∫-–∫–∞—Ä—Ç–∏–Ω–∫–∞ -> —Ç—Ä–µ–π–¥–µ—Ä—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä
        if has_photo:
            await handle_photo(update, context)
            return  # –≤–∞–∂–Ω–æ: –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞

        # 4) –ò–Ω–∞—á–µ ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await _call_if_exists(
            "handle_main",
            update, context,
            fallback_text="–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞."
        )
        return

    except Exception:
        logging.exception("unified_text_handler failed")
        try:
            await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        except Exception:
            pass


async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=REPLY_MARKUP)
    return ConversationHandler.END

async def post_init(app: Application) -> None:
    try:
        info = await app.bot.get_webhook_info()
        if info and info.url:
            await app.bot.delete_webhook(drop_pending_updates=True)
            logging.info(f"üîå Webhook –æ—Ç–∫–ª—é—á—ë–Ω: –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {info.url}")
        else:
            logging.info("üîå Webhook –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ polling.")
    except Exception as e:
        # –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å/—Å–Ω—è—Ç—å webhook ‚Äî –Ω–µ –≤–∞–ª–∏–º –∑–∞–ø—É—Å–∫
        logging.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/—Å–Ω—è—Ç—å webhook: {e}")

def main():
    global global_bot, ALLOWED_USERS, ALLOWED_USERS_TIMESTAMP

    # üîÑ –ö–µ—à –¥–æ–ø—É—Å–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã)
    ALLOWED_USERS = load_allowed_users()
    ALLOWED_USERS_TIMESTAMP = time.time()
    logging.info(f"üì• ALLOWED_USERS –∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {len(ALLOWED_USERS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    # ‚úÖ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (post_init —Å–Ω–∏–º–µ—Ç webhook, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ 409)
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(post_init).build()
    logging.info("üöÄ GPT-–¢—Ä–µ–π–¥–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª!")

    # ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π bot –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –≤–µ–±—Ö—É–∫–∞
    global_bot = app.bot

    # üöÄ –û–±—â–∏–π asyncio-loop (–µ–≥–æ –ø–µ—Ä–µ–¥–∞—ë–º –≤–æ Flask-–ø–æ—Ç–æ–∫ –¥–ª—è run_coroutine_threadsafe)
    loop = asyncio.get_event_loop()

    # üåê Flask (CryptoCloud webhook) –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –¥–µ–º–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    svc_type = (os.getenv("RENDER_SERVICE_TYPE", "web") or "web").lower()
    if svc_type in ("web", "web_service", "webservice"):
        threading.Thread(target=run_flask, args=(loop,), daemon=True).start()
        logging.info("[render-port] Flask started (Web Service).")
    else:
        logging.info("[render-port] Worker mode detected ‚Äî Flask server is not started.")

    # ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π error handler
    async def error_handler(update, context):
        logging.exception("‚ùå Unhandled exception in handler")
        try:
            msg = getattr(update, "message", None)
            if msg:
                await msg.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception:
            pass
    app.add_error_handler(error_handler)

    # üîÑ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø–Ω 12:00)
    CRON_TIME = os.getenv("CRON_TIME", "0 12 * * mon")

    @aiocron.crontab(CRON_TIME)
    async def weekly_broadcast():
        message_text = (
            "üöÄ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä:\n"
            "‚Ä¢ BTC —Å–µ–π—á–∞—Å –æ–∫–æ–ª–æ $108,700 ‚Äî –∑–æ–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞ $108,000‚Äì109,000.\n"
            "‚Ä¢ ETH –¥–µ—Ä–∂–∏—Ç—Å—è –Ω–∞ $2,576 ‚Äî –∏—â–µ–º –ø–æ–∫—É–ø–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ $2,520‚Äì2,600.\n"
            "‚Ä¢ –°—Ç–æ–ø—ã –¥–µ—Ä–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ, —Ü–µ–ª–∏ —Ñ–∏–∫—Å–∏—Ä—É–π –ø–æ R:R ~2:1."
        )
        success, fails = 0, []
        for vip_id in get_allowed_users():
            try:
                await app.bot.send_message(chat_id=vip_id, text=message_text)
                success += 1
            except Exception as e:
                logging.error(f"[WEEKLY BROADCAST] {vip_id}: {e}")
                fails.append(vip_id)
        logging.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success} —É—Å–ø–µ—Ö–æ–≤, {len(fails)} –æ—à–∏–±–æ–∫.")

    # üßò GPT-–ü—Å–∏—Ö–æ–ª–æ–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥)
    therapy_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üßò –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ$"), start_therapy)],
        states={
            WAITING_FOR_THERAPY_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, gpt_psychologist_response)
            ]
        },
        fallbacks=[
            CommandHandler("start", start, block=False),
            CommandHandler("restart", restart, block=False),
            MessageHandler(filters.Regex("^üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), restart),
        ],
    )

    # üìè –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞ (–≤—Ö–æ–¥ –∏ –ø–æ –∫–Ω–æ–ø–∫–µ, –∏ –ø–æ inline-–∫–æ–ª–±—ç–∫—É)
    risk_calc_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(r"^üìè –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞$|^üéØ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä$"), start_risk_calc),
            CallbackQueryHandler(start_risk_calc, pattern="^start_risk_calc$"),
        ],
        states={
            RISK_CALC_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, risk_calc_deposit)],
            RISK_CALC_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, risk_calc_risk_percent)],
            RISK_CALC_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, risk_calc_stoploss)],
        },
        fallbacks=[
            CommandHandler("start", start, block=False),
            CommandHandler("restart", restart, block=False),
            MessageHandler(filters.Regex("^üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), restart),
        ],
    )

    # üìå –°–µ—Ç–∞–ø (–º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥)
    setup_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìå –°–µ—Ç–∞–ø$"), handle_main)],
        states={
            SETUP_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, setup_instrument)],
            SETUP_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, setup_risk_area)],
            SETUP_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, setup_targets)],
            SETUP_4: [MessageHandler(filters.TEXT & ~filters.COMMAND, setup_stoploss)],
            SETUP_5: [MessageHandler(filters.PHOTO, setup_photo)],
        },
        fallbacks=[
            CommandHandler("start", start, block=False),
            CommandHandler("restart", restart, block=False),
            MessageHandler(filters.Regex("^üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), restart),
        ],
    )

    # ‚úÖ –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start, block=False))
    app.add_handler(CommandHandler("restart", restart, block=False))
    app.add_handler(CommandHandler("publish", publish_post, block=False))
    app.add_handler(CommandHandler("broadcast", broadcast, block=False))
    app.add_handler(CommandHandler("grant", grant, block=False))
    app.add_handler(CommandHandler("reload_users", reload_users, block=False))
    app.add_handler(CommandHandler("stats", stats, block=False))
    app.add_handler(CommandHandler("export", export, block=False))

    # ‚úÖ –î–∏–∞–ª–æ–≥–∏
    app.add_handler(therapy_handler)
    app.add_handler(risk_calc_handler)
    app.add_handler(setup_handler)

    # ‚úÖ CallbackQuery –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞/—Ñ–æ—Ç–æ/–¥–æ–∫-–∫–∞—Ä—Ç–∏–Ω–æ–∫
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(
        MessageHandler(
            (filters.TEXT | filters.PHOTO | filters.Document.IMAGE) & ~filters.COMMAND,
            unified_text_handler
        )
    )

    # üöÄ –ó–∞–ø—É—Å–∫ polling (post_init —É–∂–µ —Å–Ω—è–ª webhook —Å drop_pending_updates=True)
    app.run_polling()

def log_payment(user_id, username):
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        safe_append_row([str(user_id), username, timestamp])
        logging.info(f"üßæ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ Google Sheets: {user_id}, {username}, {timestamp}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

async def notify_user_payment(user_id):
    try:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="start_menu")],
            [
                InlineKeyboardButton("üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="back_to_signal"),
                InlineKeyboardButton("üß† –ò–Ω–≤–µ—Å—Ç‚Äë—Å—Ç—Ä–∞—Ç–µ–≥–∏—è", callback_data="strategy_photo")
            ],
            [
                InlineKeyboardButton("üìè –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞", callback_data="start_risk_calc"),
                InlineKeyboardButton("üîí VIP‚Äë–∫–∞–Ω–∞–ª", url="https://t.me/+your_invite_hash")
            ]
        ])

        await global_bot.send_message(
            chat_id=user_id,
            text=(
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ üéâ\n\n"
                "–ß—Ç–æ –¥–∞–ª—å—à–µ:\n"
                "1) –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω –≥—Ä–∞—Ñ–∏–∫–∞ ‚Äî –Ω–∞–π–¥—É Entry / Stop / TP –∑–∞ 10 —Å–µ–∫—É–Ω–¥.\n"
                "2) –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏ —Å–∫—Ä–∏–Ω –¥–ª—è –∏–Ω–≤–µ—Å—Ç‚Äë–ø–ª–∞–Ω–∞: –ø–æ–∫—É–ø–∫–∞, —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (DCA) –∏ —Ü–µ–ª–∏.\n"
                "3) –ü—Ä–æ–≤–µ—Ä—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞.\n\n"
                "üì¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É —Å VIP‚Äë—Å–µ—Ç–∞–ø–∞–º–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç:\n"
                "üëâ [–ü–µ—Ä–µ–π—Ç–∏ –≤ VIP‚Äë–∫–∞–Ω–∞–ª](https://t.me/+TAbYnYSzHYI0YzVi)\n\n"
                "üéÅ –ë–æ–Ω—É—Å: –∫—É—Ä—Å –ø–æ —Å–∫–∞–ª—å–ø–∏–Ω–≥—É –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∫–µ\n"
                "üëâ [–û—Ç–∫—Ä—ã—Ç—å –∫—É—Ä—Å –≤ Google Drive](https://drive.google.com/drive/folders/1EEryIr4RDtqM4WyiMTjVP1XiGYJVxktA?clckid=3f56c187)"
            ),
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        logging.info(f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

if __name__ == '__main__':
    main()









