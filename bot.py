import os
import logging
import asyncio
import threading
import time
import re
import json
import requests
from datetime import datetime
import io
import base64
from io import BytesIO  # üëà –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ –≤ setup_photo

from telegram import (
    Update, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters, ConversationHandler
)

from config import (
    TELEGRAM_TOKEN, OPENAI_API_KEY, TON_API_TOKEN,
    CRYPTOCLOUD_API_KEY, CRYPTOCLOUD_SHOP_ID
)
from openai import AsyncOpenAI
from PIL import Image

# üìä Google Sheets API
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# üî• Flask –¥–ª—è webhook –æ—Ç CryptoCloud
from flask import Flask, request, jsonify

# ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(os.getenv("GOOGLE_CREDS"))

# üîê –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–ª—é—á–µ
creds_dict["private_key"] = creds_dict["private_key"].replace("\\n", "\n")

creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gc = gspread.authorize(creds)

SPREADSHEET_ID = "1s_KQLyekb-lQjt3fMlBO39CTBuq0ayOIeKkXEhDjhbs"
sheet = gc.open_by_key(SPREADSHEET_ID).sheet1

client = AsyncOpenAI(api_key=OPENAI_API_KEY)
logging.basicConfig(level=logging.INFO)

TON_WALLET = "UQC4nBKWF5sO2UIP9sKl3JZqmmRlsGC5B7xM7ArruA61nTGR"
ALLOWED_USERS = {407721399, 592270446}
PENDING_USERS = {}
RECEIVED_MEMOS = set()

reply_keyboard = [
    ["üîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –º–æ–Ω–µ—Ç—ã", "üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∞–∫—Ç–∏–≤—É", "üß† –ü–æ–º–æ—â—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞"],
    ["üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", "üßò –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"],
    ["üìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞", "üìè –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞"],
    ["üí∞ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞ $25", "üíµ –û –ø–æ–¥–ø–∏—Å–∫–µ"],
    ["üìå –°–µ—Ç–∞–ø"]
]
REPLY_MARKUP = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

CHAT_DISCUSS_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üí¨ –û–±—Å—É–¥–∏—Ç—å –≤ —á–∞—Ç–µ", url="https://t.me/ai4traders_chat")]
])

# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ username
RECEIVED_MEMOS = set()


INTERPRET_NEWS, ASK_EVENT, ASK_FORECAST, ASK_ACTUAL, GENERAL_QUESTION, FOLLOWUP_1, FOLLOWUP_2, FOLLOWUP_3 = range(8)
user_inputs = {}

WAITING_FOR_PHOTO = set()
WAITING_FOR_THERAPY_INPUT = 100

RISK_CALC_1, RISK_CALC_2, RISK_CALC_3 = range(101, 104)
SETUP_1, SETUP_2, SETUP_3, SETUP_4, SETUP_5 = range(301, 306)

async def setup_instrument(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["instrument"] = update.message.text.strip()
    await update.message.reply_text("üìâ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –æ–±–ª–∞—Å—Ç—å —Ä–∏—Å–∫–∞ (–∑–æ–Ω–∞ –ø–æ–∫—É–ø–∫–∏):")
    return SETUP_2

async def setup_risk_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["risk_area"] = update.message.text.strip()
    await update.message.reply_text("üéØ –ö–∞–∫–∏–µ —Ü–µ–ª–∏ (—Ç–µ–π–∫–∏) –ø–æ —Å–¥–µ–ª–∫–µ?")
    return SETUP_3

async def setup_targets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["targets"] = update.message.text.strip()
    await update.message.reply_text("üö® –ì–¥–µ —Å—Ç–æ–∏—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å?")
    return SETUP_4

async def setup_stoploss(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["stoploss"] = update.message.text.strip()
    await update.message.reply_text("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏ —Å–∫—Ä–∏–Ω —Å–µ—Ç–∞–ø–∞.")
    return SETUP_5



async def start_risk_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "üìä –í–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ $:",
        reply_markup=REPLY_MARKUP
    )
    return RISK_CALC_1

async def risk_calc_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["deposit"] = float(update.message.text.strip())
        await update.message.reply_text("üí° –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É (%):")
        return RISK_CALC_2
    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 1000")
        return RISK_CALC_1

async def risk_calc_risk_percent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["risk_percent"] = float(update.message.text.strip())
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å –ø–æ —Å–¥–µ–ª–∫–µ (%):")
        return RISK_CALC_3
    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 2")
        return RISK_CALC_2

async def risk_calc_stoploss(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        stoploss_percent = float(update.message.text.strip())
        deposit = context.user_data["deposit"]
        risk_percent = context.user_data["risk_percent"]

        risk_amount = deposit * risk_percent / 100
        position_size = risk_amount / (stoploss_percent / 100)

        await update.message.reply_text(
            f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
            f"‚Ä¢ –î–µ–ø–æ–∑–∏—Ç: ${deposit:.2f}\n"
            f"‚Ä¢ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {risk_percent:.2f}% (${risk_amount:.2f})\n"
            f"‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: {stoploss_percent:.2f}%\n\n"
            f"üìå –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–±—ä—ë–º –ø–æ–∑–∏—Ü–∏–∏: **${position_size:.2f}**",
            reply_markup=REPLY_MARKUP,
            parse_mode="Markdown"
        )
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 1.5")
        return RISK_CALC_3

async def check_access(update: Update):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ü–æ–¥–∫–ª—é—á–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞ –∑–∞ $25.", reply_markup=REPLY_MARKUP)
        return False
    return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª –≤ GPT-–¢—Ä–µ–π–¥–µ—Ä–∞ ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞—Ä–∞–≤–Ω–µ —Å —Ñ–æ–Ω–¥–∞–º–∏.\n\n"
        "üí• –°–µ–≥–æ–¥–Ω—è –∫—Ä–∏–ø—Ç—É —Å–∫—É–ø–∞—é—Ç BlackRock, Fidelity –∏ –∫—Ä—É–ø–Ω–µ–π—à–∏–µ —Ñ–æ–Ω–¥—ã —á–µ—Ä–µ–∑ ETF. "
        "–ê —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ö–æ–¥–∏—Ç—å —Ç—É–¥–∞ –∂–µ, –Ω–æ –±–µ–∑ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–æ–≤ –∏ —Å–æ —Å–≤–æ–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–æ–º.\n\n"
        "üß† –ß—Ç–æ —É–º–µ–µ—Ç GPT-–¢—Ä–µ–π–¥–µ—Ä:\n"
        "‚Ä¢ –î–µ–ª–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Ç–≤–æ–µ–º—É —Å–∫—Ä–∏–Ω—É –∑–∞ 10 —Å–µ–∫—É–Ω–¥\n"
        "‚Ä¢ –û–±—ä—è—Å–Ω—è–µ—Ç –º–∞–∫—Ä–æ-–Ω–æ–≤–æ—Å—Ç–∏ –∏ –¥–∞—ë—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏\n"
        "‚Ä¢ –î–∞—ë—Ç VIP-—Å–∏–≥–Ω–∞–ª—ã\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏—Ç –º–µ–º–æ–º, –µ—Å–ª–∏ —Ä—ã–Ω–æ–∫ –ø–æ–±—Ä–∏–ª üòÖ",
        reply_markup=REPLY_MARKUP
    )
    await update.message.reply_text(
        "üëá –í—ã–±–µ—Ä–∏, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=REPLY_MARKUP
    )
    return ConversationHandler.END


async def help_pro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update): return ConversationHandler.END
    context.user_data.clear()  # <‚Äî –¥–æ–±–∞–≤—å —ç—Ç–æ
    await update.message.reply_text("–¢—ã —Ö–æ—á–µ—à—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å? (–¥–∞/–Ω–µ—Ç)", reply_markup=ReplyKeyboardRemove())
    return INTERPRET_NEWS

async def interpret_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    if text == "–¥–∞":
        await update.message.reply_text("–ß—Ç–æ –∑–∞ –Ω–æ–≤–æ—Å—Ç—å?")
        return ASK_EVENT
    elif text == "–Ω–µ—Ç":
        await update.message.reply_text("–•–æ—Ä–æ—à–æ. –î–ª—è —Ç–æ—á–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n1. –¢–≤–æ–π —Å—Ç–∏–ª—å —Ç–æ—Ä–≥–æ–≤–ª–∏? (—Å–∫–∞–ª—å–ø–∏–Ω–≥, –ø–æ–∑–∏—Ü–∏–æ–Ω–∫–∞ –∏–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏)")
        return FOLLOWUP_1
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")
        return INTERPRET_NEWS

async def followup_strategy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["style"] = update.message.text.strip()
    await update.message.reply_text("2. –ù–∞ –∫–∞–∫–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ —Ç—ã —á–∞—â–µ –≤—Å–µ–≥–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å —Å–¥–µ–ª–∫–∏?")
    return FOLLOWUP_2

async def followup_timeframe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["timeframe"] = update.message.text.strip()
    await update.message.reply_text("3. –ù–∞ –∫–∞–∫–æ–º —Ä—ã–Ω–∫–µ —Ç—ã —Ç–æ—Ä–≥—É–µ—à—å? (–∫—Ä–∏–ø—Ç–∞, —Ñ–æ—Ä–µ–∫—Å, —Ñ–æ–Ω–¥–æ–≤—ã–π, —Å—ã—Ä—å—ë –∏ —Ç.–¥.)")
    return FOLLOWUP_3

async def followup_market(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["market"] = update.message.text.strip()
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
    return GENERAL_QUESTION

async def ask_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_inputs[update.effective_user.id] = {"event": update.message.text.strip()}
    await update.message.reply_text("–ö–∞–∫–æ–π –±—ã–ª –ø—Ä–æ–≥–Ω–æ–∑?")
    return ASK_FORECAST

async def ask_actual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_inputs[update.effective_user.id]["forecast"] = update.message.text.strip()
    await update.message.reply_text("–ö–∞–∫–æ–π —Ñ–∞–∫—Ç? (—Ä–µ–∑—É–ª—å—Ç–∞—Ç)")
    return ASK_ACTUAL

async def generate_interpretation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_inputs[update.effective_user.id]["actual"] = update.message.text.strip()
    data = user_inputs[update.effective_user.id]
    prompt = (
        f"–°–æ–±—ã—Ç–∏–µ: {data['event']}\n"
        f"–ü—Ä–æ–≥–Ω–æ–∑: {data['forecast']}\n"
        f"–§–∞–∫—Ç: {data['actual']}\n\n"
        f"–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä —Å 10+ –≥–æ–¥–∞–º–∏ –æ–ø—ã—Ç–∞ –∏–º–µ–Ω–Ω–æ –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–µ.\n"
        f"1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –∏ —Ç–µ—Ö–Ω–∏–∫—É: –∫–∞–∫ —Å–æ–±—ã—Ç–∏–µ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã BTC/ETH?\n"
        f"2. –†–∞–∑–ª–æ–∂–∏ –æ–±–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π. –í –∫–∞–∂–¥–æ–º ‚Äî —É–∫–∞–∂–∏ –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–æ–ª–ø—ã/–∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª–æ–≤.\n"
        f"3. –°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–∞ 1‚Äì3 –¥–Ω—è –≤–ø–µ—Ä—ë–¥. –ö–∞–∫—É—é —Ä–µ–∞–∫—Ü–∏—é –≤—ã–∑–æ–≤–µ—Ç —É —Ä–æ–∑–Ω–∏—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –°–ú–ò?\n"
        f"4. –ó–∞–≤–µ—Ä—à–∏ –∫—Ä–∞—Ç–∫–∏–º —Ç–æ—Ä–≥–æ–≤—ã–º –ø–ª–∞–Ω–æ–º: —Å—Ç–æ–∏—Ç –ª–∏ –≤—Ö–æ–¥–∏—Ç—å, –≥–¥–µ, –∫–∞–∫–∏–º –æ–±—ä—ë–º–æ–º –∏ —Å –∫–∞–∫–∏–º —Å—Ç–æ–ø–æ–º.\n"
        f"5. –ß—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–∂–∞–ª–µ—Ç—å, –µ—Å–ª–∏ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å?\n\n"
        f"–ü–∏—à–∏ –ª–æ–≥–∏—á–Ω–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ. –í –∫–æ–Ω—Ü–µ ‚Äî —Ä–µ–∑—é–º–µ –≤ —Å—Ç–∏–ª–µ —á–∞—Ç–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ (1-2 —Å—Ç—Ä–æ–∫–∏)."
    )
    
    response = await client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    await update.message.reply_text(f"üìö GPT:\n{response.choices[0].message.content.strip()}", reply_markup=REPLY_MARKUP)
    return ConversationHandler.END


async def general_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip()
    style = context.user_data.get("style", "—Ç—Ä–µ–π–¥–∏–Ω–≥")
    tf = context.user_data.get("timeframe", "–ª—é–±–æ–º")
    market = context.user_data.get("market", "–æ–±—â–∏–π")

    prompt = (
        f"–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä –∏ —Ñ–æ–Ω–¥–æ–≤—ã–π —Ç—Ä–µ–π–¥–µ—Ä —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 10 –ª–µ—Ç.\n"
        f"–û—Ç–≤–µ—á–∞–π —á—ë—Ç–∫–æ, –±–µ–∑ –≤–æ–¥—ã, –∏–∑–±–µ–≥–∞–π —Å–ª–æ–≤ '–≤–æ–∑–º–æ–∂–Ω–æ', '–ø–æ-–≤–∏–¥–∏–º–æ–º—É', '—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ'. –ì–æ–≤–æ—Ä–∏ –ø—Ä—è–º–æ –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ.\n\n"
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n"
        f"‚Ä¢ –°—Ç–∏–ª—å —Ç–æ—Ä–≥–æ–≤–ª–∏: {style}\n"
        f"‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: {tf}\n"
        f"‚Ä¢ –†—ã–Ω–æ–∫: {market}\n"
        f"‚Ä¢ –í–æ–ø—Ä–æ—Å: {user_text}\n\n"
        f"–û—Ç–≤–µ—Ç—å –ø–æ —à–∞–≥–∞–º:\n"
        f"1. –†–∞—Å—Å—Ç–∞–≤—å –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –ø–æ —Å—Ç–µ–ø–µ–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏.\n"
        f"2. –û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–µ–π—Å—Ç–≤–∏–π.\n"
        f"3. –ï—Å–ª–∏ –æ–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî —á—Ç–æ –¥–µ–ª–∞—Ç—å? –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.\n"
        f"4. –ö–∞–∫–∏–µ —Ä–∏—Å–∫–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤—ã–≥–æ–¥—ã?\n"
        f"5. –ß—Ç–æ –±—ã —Ç—ã —Å–¥–µ–ª–∞–ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –±—É–¥—å –Ω–∞ –º–µ—Å—Ç–µ —Ç—Ä–µ–π–¥–µ—Ä–∞?\n"
        f"6. –ù–∞–ø–∏—à–∏, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—â—ë —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è.\n\n"
        f"–û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    )

    try:
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        await update.message.reply_text(
            f"üìö GPT:\n{response.choices[0].message.content.strip()}",
            reply_markup=REPLY_MARKUP,
            parse_mode="Markdown"
        )
        return ConversationHandler.END

    except Exception as e:
        logging.error(f"[GENERAL_RESPONSE] GPT –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è GPT –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if query.data == "show_wallet":
        await query.edit_message_text(
            "üí∏ –û—Ç–ø—Ä–∞–≤—å USDT (TON) –Ω–∞ –∞–¥—Ä–µ—Å:\n\n"
            "`UQC4nBKWF5sO2UIP9sKl3JZqmmRlsGC5B7xM7ArruA61nTGR`\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å TX hash –∞–¥–º–∏–Ω—É –∏–ª–∏ –ø—Ä—è–º–æ —Å—é–¥–∞.",
            parse_mode="Markdown"
        )

    elif query.data == "forecast_by_image":
        WAITING_FOR_PHOTO.add(user_id)
        context.user_data["awaiting_macro_for_image"] = True
        await query.edit_message_text(
            "üì∏ –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω –≥—Ä–∞—Ñ–∏–∫–∞ (4H —Ç–∞–π–º—Ñ—Ä–µ–π–º), –∏ —è –¥–∞–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
        )

    elif query.data == "forecast_by_price":
        context.user_data["awaiting_asset_name"] = True
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üî¢ –í–≤–µ–¥–∏ —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, XRP):"
        )

    elif query.data == "style_smc":
        context.user_data["selected_strategy"] = "smc"
        await query.edit_message_text(
            "üìà *Smart Money Concepts (SMC)*\n\n"
            "üìå –î–ª—è SMC –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã 15m, 30m, 1H –∏ 4H.\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–ª–æ–∂–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä Smart Money Concepts (LuxAlgo –∏–ª–∏ WeloTrades), "
            "—á—Ç–æ–±—ã —è —Å—Ä–∞–∑—É —É–≤–∏–¥–µ–ª BOS, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ OTE.\n\n"
            "üñº –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω ‚Äî —è –¥–∞–º –ø–ª–∞–Ω –≤—Ö–æ–¥–∞, —Å—Ç–æ–ø –∏ —Ç–µ–π–∫–∏ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º.",
            parse_mode="Markdown"
        )

    elif query.data == "style_swing":
        context.user_data["selected_strategy"] = "swing"
        await query.edit_message_text(
            "üìà *–ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ swing —Å–¥–µ–ª–∫–∏*\n\n"
            "üìå –î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –∏ —É—Ä–æ–≤–Ω–µ–π –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã 4H –∏ 1D.\n\n"
            "üñº –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω ‚Äî —è –¥–∞–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º.",
            parse_mode="Markdown"
        )

    elif query.data == "style_breakout":
        context.user_data["selected_strategy"] = "breakout"
        await query.edit_message_text(
            "üìà *–ü—Ä–æ–±–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω–∞*\n\n"
            "üìå –î–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–ª—ç—Ç–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö breakout –ø–æ–¥–æ–π–¥—É—Ç 5m, 15m –∏ 1H.\n\n"
            "üñº –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω ‚Äî —è –Ω–∞–π–¥—É –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—é –∏ –¥–∞–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–±–æ—è.",
            parse_mode="Markdown"
        )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    photo = update.message.photo[-1]
    file = await photo.get_file()
    original_photo_bytes = await file.download_as_bytearray()

    # –°–∂–∏–º–∞–µ–º –¥–ª—è Vision
    image = Image.open(io.BytesIO(original_photo_bytes)).convert("RGB")
    buffer = io.BytesIO()
    image.save(buffer, format="JPEG", quality=80)
    image_base64 = base64.b64encode(buffer.getvalue()).decode()

    selected_style = context.user_data.get("selected_strategy")

    if selected_style == "smc":
        prompt_text = (
            "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä Smart Money Concepts (SMC) —Å 10+ –ª–µ—Ç –Ω–∞ –∫—Ä–∏–ø—Ç–µ, —Ñ–æ—Ä–µ–∫—Å–µ –∏ MOEX.\n\n"
            "‚ùóÔ∏è–í–ê–ñ–ù–û: –µ—Å–ª–∏ –Ω–∞ —Å–∫—Ä–∏–Ω–µ –≤–∏–¥–Ω–æ, —á—Ç–æ DV (–¥–Ω–µ–≤–Ω–æ–π –æ–±—ä—ë–º) –º–µ–Ω—å—à–µ 200M ‚Äî –Ω–∞–ø–∏—à–∏ –∫—Ä—É–ø–Ω–æ üö´, —á—Ç–æ —Å–µ—Ç–∞–ø –ó–ê–ü–†–ï–©–Å–ù –∏ –Ω–µ –±—É–¥–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏.\n"
            "–î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–µ—Ç–∞–ø–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:\n"
            "- Smart Money Concepts (BOS, CHoCH, OTE, Liquidity)\n"
            "- EMA 14 –∏ EMA 30\n\n"
            "–ï—Å–ª–∏ DV > 200M –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –µ—Å—Ç—å:\n"
            "1. –ù–∞–π–¥–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (—Å—Ç–æ–ø—ã, —ç–∫—Å—Ç—Ä–µ–º—É–º—ã).\n"
            "2. BOS/CHoCH, imbalance, OTE.\n"
            "3. –î–∞–π –ø–ª–∞–Ω —Å–¥–µ–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "üìà Setup:\n"
            "- Entry: $_____\n"
            "- StopLoss: $_____\n"
            "- TakeProfit: $_____\n\n"
            "–û–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —Ç—É—Ç –≤—Ö–æ–¥ –∏ –∫–∞–∫ –∑–∞–π–¥—É—Ç –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—ã."
        )
    elif selected_style == "swing":
        prompt_text = (
            "–¢—ã ‚Äî —Ç—Ä–µ–π–¥–µ—Ä –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ swing —Ç–∏–ø–∞ —Å –æ–ø—ã—Ç–æ–º –Ω–∞ –∫—Ä–∏–ø—Ç–µ, —Ñ–æ—Ä–µ–∫—Å–µ –∏ MOEX.\n\n"
            "‚ùóÔ∏è–í–ê–ñ–ù–û: –µ—Å–ª–∏ –Ω–∞ —Å–∫—Ä–∏–Ω–µ –≤–∏–¥–Ω–æ, —á—Ç–æ DV < 200M ‚Äî –Ω–∞–ø–∏—à–∏ üö´, —á—Ç–æ —Å–µ—Ç–∞–ø —Å—Ç—Ä–æ–∏—Ç—å –Ω–µ–ª—å–∑—è.\n"
            "–î–ª—è —Ç–æ—á–Ω–æ–≥–æ swing-—Å–µ—Ç–∞–ø–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:\n"
            "- –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è\n"
            "- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ–±—ä—ë–º–∞ (Volume Profile –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ)\n\n"
            "–ï—Å–ª–∏ DV > 200M:\n"
            "1. –ù–∞–π–¥–∏ –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏.\n"
            "2. –ó–æ–Ω—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π.\n"
            "3. –î–∞–π –ø–ª–∞–Ω —Å–¥–µ–ª–∫–∏:\n"
            "üìà Setup:\n"
            "- Entry: $_____\n"
            "- StopLoss: $_____\n"
            "- TakeProfit: $_____\n\n"
            "–ò —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –≤–∞–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å."
        )
    elif selected_style == "breakout":
        prompt_text = (
            "–¢—ã ‚Äî —Å–∫–∞–ª—å–ø–µ—Ä/–∏–Ω—Ç—Ä–∞–¥–µ–π —Ç—Ä–µ–π–¥–µ—Ä —Å –æ–ø—ã—Ç–æ–º –Ω–∞ –∫—Ä–∏–ø—Ç–µ, —Ñ–æ—Ä–µ–∫—Å–µ –∏ MOEX.\n\n"
            "‚ùóÔ∏è–í–ê–ñ–ù–û: –µ—Å–ª–∏ DV –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –º–µ–Ω—å—à–µ 200M ‚Äî –Ω–∞–ø–∏—à–∏ üö´ –∫—Ä—É–ø–Ω–æ, —á—Ç–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è.\n"
            "–î–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ breakout –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:\n"
            "- –ó–æ–Ω—ã –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ (range)\n"
            "- –û–±—ä—ë–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä OBV –∏–ª–∏ –æ–±—ã—á–Ω—ã–π Volume)\n\n"
            "–ï—Å–ª–∏ DV > 200M:\n"
            "1. –ù–∞–π–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω.\n"
            "2. –î–∞–π —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–±–æ—è –≤–≤–µ—Ä—Ö –∏ –≤–Ω–∏–∑:\n"
            "üìà Breakout Up:\n"
            "- Entry: $_____\n"
            "- StopLoss: $_____\n"
            "- TakeProfit: $_____\n\n"
            "üìâ Breakout Down:\n"
            "- Entry: $_____\n"
            "- StopLoss: $_____\n"
            "- TakeProfit: $_____\n\n"
            "–ò —á—Ç–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (–¥–µ–ª—å—Ç–∞, –∫–ª–∞—Å—Ç–µ—Ä–∞, COT)."
        )
    else:
        prompt_text = (
            "–¢—ã ‚Äî —Ç—Ä–µ–π–¥–µ—Ä —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 10 –ª–µ—Ç.\n"
            "–ù–∞ –≥—Ä–∞—Ñ–∏–∫–µ –æ–ø—Ä–µ–¥–µ–ª–∏ —Ç—Ä–µ–Ω–¥, —É—Ä–æ–≤–Ω–∏, —Ä–∏—Å–∫–∏ –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø–ª–∞–Ω —Å–¥–µ–ª–∫–∏.\n"
            "‚ùóÔ∏è–í–ê–ñ–ù–û: –µ—Å–ª–∏ DV < 200M ‚Äî —Å–∫–∞–∂–∏ –∫—Ä—É–ø–Ω–æ üö´, —á—Ç–æ —Å–µ—Ç–∞–ø –Ω–µ —Å—Ç—Ä–æ–∏–º."
        )

    try:
        vision_response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{
                "role": "user",
                "content": [
                    {"type": "text", "text": prompt_text},
                    {"type": "image_url", "image_url": {
                        "url": f"data:image/jpeg;base64,{image_base64}"
                    }}
                ]
            }],
            max_tokens=700
        )

        analysis = vision_response.choices[0].message.content.strip()
        await update.message.reply_text(
            f"üìâ –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n\n{analysis}",
            reply_markup=REPLY_MARKUP
        )
    except Exception as e:
        logging.error(f"[handle_photo] Vision error: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–Ω."
        )


async def setup_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    photo = update.message.photo[-1]
    file = await photo.get_file()
    photo_bytes = await file.download_as_bytearray()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ BytesIO –¥–ª—è Telegram API
    image_stream = BytesIO(photo_bytes)
    image_stream.name = "setup.jpg"  # –≤–∞–∂–Ω–æ –¥–ª—è Telegram

    # –°–æ–±–∏—Ä–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ context.user_data
    instrument = context.user_data.get("instrument", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    risk_area = context.user_data.get("risk_area", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    targets = context.user_data.get("targets", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    stoploss = context.user_data.get("stoploss", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    caption = (
        f"üöÄ *–ù–æ–≤—ã–π —Å–µ—Ç–∞–ø –æ—Ç –∞–¥–º–∏–Ω–∞*\n\n"
        f"‚Ä¢ üìå *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:* {instrument}\n"
        f"‚Ä¢ üí∞ *–û–±–ª–∞—Å—Ç—å —Ä–∏—Å–∫–∞:* {risk_area}\n"
        f"‚Ä¢ üéØ *–¶–µ–ª–∏:* {targets}\n"
        f"‚Ä¢ üö® *–°—Ç–æ–ø-–ª–æ—Å—Å:* {stoploss}\n\n"
        f"üßÆ [–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é](https://t.me/ai4traders_bot)"
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        chat_id = '@ai4traders'
        message = await context.bot.send_photo(
            chat_id=chat_id,
            photo=image_stream,
            caption=caption,
            parse_mode="Markdown"
        )

        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º
        await context.bot.pin_chat_message(
            chat_id=chat_id,
            message_id=message.message_id,
            disable_notification=True
        )

        await update.message.reply_text("‚úÖ –°–µ—Ç–∞–ø –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –≤ –∫–∞–Ω–∞–ª–µ!", reply_markup=REPLY_MARKUP)

    except Exception as e:
        logging.error(f"[SETUP_PHOTO] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ—Ç–∞–ø. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ –∏ –ª–æ–≥–∏."
        )

    return ConversationHandler.END

async def handle_macro_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_macro_text"):
        return

    macro = update.message.text.strip()
    image_base64 = context.user_data.pop("graph_image_base64", None)
    context.user_data.pop("awaiting_macro_text")

    if not image_base64:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    prompt = (
        "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä —Å 10+ –ª–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ.\n"
        "–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ ‚Äî –≥—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ 4H —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ.\n\n"
        "üìä –†–∞–∑–±–µ—Ä–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ –ø—É–Ω–∫—Ç–∞–º:\n"
        "1) –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã: —Ç—Ä–µ–Ω–¥, —É—Ä–æ–≤–Ω–∏, –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –æ–±—ä—ë–º—ã.\n"
        "2) –ï—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è, —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –∏–ª–∏ –∏–º–ø—É–ª—å—Å–∞?\n"
        "3) –ü–æ—Ö–æ–∂–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞?\n"
        f"üåê –£—á–∏—Ç—ã–≤–∞–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ñ–æ–Ω: {macro}\n"
        "üîÅ –î–∞–π –¥–≤–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è: –ø—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö –∏ –ø—Ä–æ–±–æ–π –≤–Ω–∏–∑ (—É—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞, —Å—Ç–æ–ø–∞, —Ü–µ–ª–µ–π, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å).\n"
        "üìå –í –∫–æ–Ω—Ü–µ –ø–æ—Å–æ–≤–µ—Ç—É–π, —á—Ç–æ –µ—â—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (–æ–±—ä—ë–º—ã, —Å—Ç–∞–∫–∞–Ω, –Ω–æ–≤–æ—Å—Ç–∏).\n\n"
        "Also add short English bullet summary if needed for accuracy."
    )

    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{
                "role": "user",
                "content": [
                    {"type": "text", "text": prompt},
                    {"type": "image_url", "image_url": {
                        "url": f"data:image/jpeg;base64,{image_base64}"
                    }}
                ]
            }],
            max_tokens=700
        )

        await update.message.reply_text(
            f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É + –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
            f"{response.choices[0].message.content.strip()}\n\n"
            f"üì∞ –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n"
            f"‚Ä¢ [Forklog](https://t.me/forklog)\n"
            f"‚Ä¢ [Bits.media](https://bits.media/news/)\n"
            f"‚Ä¢ [RBC Crypto](https://www.rbc.ru/crypto/)\n"
            f"‚Ä¢ [Investing](https://ru.investing.com/news/cryptocurrency-news/)",
            reply_markup=CHAT_DISCUSS_KEYBOARD,
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"[MACRO_GRAPH] Vision error: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏ –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–Ω."
        )

def fetch_price_from_coingecko(coin_symbol: str) -> float | None:
    try:
        coin_map = {
            "BTC": "bitcoin",
            "ETH": "ethereum",
            "BNB": "binancecoin",
            "XRP": "ripple",
            "SOL": "solana",
            "TON": "the-open-network",
            "DOGE": "dogecoin",
            "ADA": "cardano",
            "TRX": "tron"
        }
        coin_id = coin_map.get(coin_symbol.upper())
        if not coin_id:
            return None

        url = f"https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies=usd"
        response = requests.get(url, timeout=20)
        data = response.json()
        return data[coin_id]["usd"]
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {coin_symbol}: {e}")
        return None


async def handle_potential(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop("awaiting_potential", None)
    coin = update.message.text.strip().upper()
    coin = re.sub(r'[^A-Z0-9]', '', coin)  # —É–±–∏—Ä–∞–µ–º / –∏ –ø—Ä–æ—á–µ–µ

    price = fetch_price_from_coingecko(coin)
    if price:
        price_line = f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {coin} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${price:.2f}.\n\n"
    else:
        price_line = f"(‚ùóÔ∏è –¶–µ–Ω–∞ {coin} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –£—Ç–æ—á–Ω–∏ –µ—ë –Ω–∞ CoinMarketCap, Binance –∏–ª–∏ TradingView.)\n\n"

    prompt = (
        price_line +
        f"–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 10 –ª–µ—Ç –Ω–∞ –∫—Ä–∏–ø—Ç–µ, —Ñ–æ—Ä–µ–∫—Å–µ –∏ —Ñ–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ.\n\n"
        f"üìä –†–∞–∑–±–µ—Ä–∏ {coin} –ø–æ—à–∞–≥–æ–≤–æ:\n"
        f"1. –ö–∞–∫–∏–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–æ—Å—Ç –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–µ —Å–µ–π—á–∞—Å? –†–∞—Å—Å—Ç–∞–≤—å –∏—Ö –ø–æ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏.\n"
        f"2. –ù–∞–π–¥–∏ –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω—ã, –æ–±—ä—ë–º—É, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏.\n"
        f"3. –î–∞–π —Ç—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è:\n"
        f"   - –°–∫–∞–ª—å–ø–∏–Ω–≥ –Ω–∞ 1-2 –¥–Ω—è\n"
        f"   - –°–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥ –Ω–∞ 3-7 –¥–Ω–µ–π\n"
        f"   - –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ 1-3 –º–µ—Å—è—Ü–∞\n"
        f"–î–ª—è –∫–∞–∂–¥–æ–≥–æ ‚Äî –æ–±–æ–∑–Ω–∞—á—å –∑–æ–Ω—ã –≤—Ö–æ–¥–∞, —Å—Ç–æ–ø–∞ –∏ —Ü–µ–ª–∏.\n"
        f"4. –ù–∞–ø–∏—à–∏, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—É —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –î–û –≤—Ö–æ–¥–∞ (—Å—Ç–∞–∫–∞–Ω, –æ—Ç–∫—Ä—ã—Ç—ã–π –∏–Ω—Ç–µ—Ä–µ—Å, –æ—Ç—á—ë—Ç—ã –∫–∏—Ç–æ–≤, –Ω–æ–≤–æ—Å—Ç–∏).\n"
        f"5. –í –∫–æ–Ω—Ü–µ —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ –Ω–∞ 2 —Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç–∏–ª–µ —Ç—Ä–µ–π–¥-—á–∞—Ç–∞: —Å—Ç–æ–∏—Ç –ª–∏ –∑–∞—Ö–æ–¥–∏—Ç—å –∏ –∫—É–¥–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–æ–ø.\n"
        f"6. –î–æ–±–∞–≤—å –∫–æ—Ä–æ—Ç–∫—É—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é —Ç—Ä–µ–π–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ emoji (–ø—Ä–∏–º–µ—Ä: üöÄ, üêª, ü§î, üò±).\n\n"
        f"–û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    )

    try:
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        await update.message.reply_text(
            f"üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª {coin}:\n\n"
            f"{response.choices[0].message.content.strip()}\n\n"
            f"üì∞ –î–ª—è —á—Ç–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:\n"
            f"‚Ä¢ [Forklog](https://t.me/forklog)\n"
            f"‚Ä¢ [Bits.media](https://bits.media/news/)\n"
            f"‚Ä¢ [RBC Crypto](https://www.rbc.ru/crypto/)\n"
            f"‚Ä¢ [Investing](https://ru.investing.com/news/cryptocurrency-news/)",
            reply_markup=CHAT_DISCUSS_KEYBOARD,
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"[POTENTIAL] GPT –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–µ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


async def handle_definition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop("awaiting_definition_term", None)
    term = update.message.text.strip()

    prompt = f"–û–±—ä—è—Å–Ω–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ —Ç–∞–∫–æ–µ: {term}. –ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä. –°—Ç–∏–ª—å ‚Äî –∫–∞–∫ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞."

    try:
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        await update.message.reply_text(
            f"üìò –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:\n{response.choices[0].message.content.strip()}",
            reply_markup=REPLY_MARKUP
        )
    except Exception as e:
        logging.error(f"[DEFINITION] GPT –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ—Ä–º–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


async def handle_forecast_by_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop("awaiting_asset_name", None)
    coin = update.message.text.strip().upper()
    price = fetch_price_from_coingecko(coin)

    if price:
        price_line = f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {coin} ‚Äî ${price:.2f}.\n"
    else:
        price_line = f"(‚ùóÔ∏è –¶–µ–Ω–∞ {coin} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Ç–æ—á–Ω–∏ –µ—ë –Ω–∞ CoinMarketCap –∏–ª–∏ Binance.)\n"

    prompt = (
        price_line +
        f"–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 10 –ª–µ—Ç.\n"
        f"1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ç—Ä–µ–Ω–¥, —Ä–∞—Å—Å—Ç–∞–≤—å —Ñ–∞–∫—Ç–æ—Ä—ã –ø–æ —Å—Ç–µ–ø–µ–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏.\n"
        f"2. –£–∫–∞–∂–∏ –±–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
        f"3. –î–∞–π –¥–≤–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ 1‚Äì3 –¥–Ω—è (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∏ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π).\n"
        f"4. –û–ø—Ä–µ–¥–µ–ª–∏ —Ä–∏—Å–∫–∏ –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏–ª—å –≤—Ö–æ–¥–∞ (–∏–Ω—Ç—Ä–∞–¥–µ–π / —Å–≤–∏–Ω–≥).\n"
        f"5. –ó–∞–≤–µ—Ä—à–∏ –∫—Ä–∞—Ç–∫–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –≤ 1-2 —Å—Ç—Ä–æ–∫–∞—Ö.\n"
        f"–ï—Å–ª–∏ –≤–∏–¥–∏—à—å –ø–æ—Ö–æ–∂–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –Ω–∞–ø–æ–º–Ω–∏ –æ –Ω–∏—Ö.\n"
        f"–í –∫–æ–Ω—Ü–µ –Ω–∞–ø–∏—à–∏, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—â—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–µ–π–¥–µ—Ä—É.\n\n"
        f"–û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    )

    try:
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        await update.message.reply_text(
            f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∞–∫—Ç–∏–≤—É {coin}:\n\n"
            f"{response.choices[0].message.content.strip()}",
            reply_markup=CHAT_DISCUSS_KEYBOARD,
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"[FORECAST_BY_PRICE] GPT –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


async def handle_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    username = update.effective_user.username

    reset_commands = [
        "üìè –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞", "üßò –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "üß† –ü–æ–º–æ—â—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞",
        "üìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞", "üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", "üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∞–∫—Ç–∏–≤—É",
        "üí∞ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞ $25", "üíµ –û –ø–æ–¥–ø–∏—Å–∫–µ", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", "üîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –º–æ–Ω–µ—Ç—ã"
    ]
    if text in reset_commands:
        context.user_data.clear()

    if text == "üîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –º–æ–Ω–µ—Ç—ã":
        if user_id not in ALLOWED_USERS:
            await update.message.reply_text("üîí –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ $25.", reply_markup=REPLY_MARKUP)
            return
        context.user_data["awaiting_potential"] = True
        await update.message.reply_text("üí° –í–≤–µ–¥–∏ —Ç–∏–∫–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC):")
        return

    if text == "üìè –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞":
        return

    if text == "üßò –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ":
        return await start_therapy(update, context)

    if text == "üß† –ü–æ–º–æ—â—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞":
        if user_id not in ALLOWED_USERS:
            await update.message.reply_text("üîí –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ $25.", reply_markup=REPLY_MARKUP)
            return
        context.user_data.clear()
        context.user_data["awaiting_pro_question"] = True
        await update.message.reply_text("üßë‚Äçüíº –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî GPT-–∞–Ω–∞–ª–∏—Ç–∏–∫ –æ—Ç–≤–µ—Ç–∏—Ç.", reply_markup=REPLY_MARKUP)
        return

    if text == "üìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞":
        context.user_data.clear()
        context.user_data["awaiting_definition_term"] = True
        await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ—Ä–º–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å.")
        return

    if text == "üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("Smart Money", callback_data="style_smc")],
            [InlineKeyboardButton("–ü–æ–∑–∏—Ü–∏–æ–Ω–∫–∞", callback_data="style_swing")],
            [InlineKeyboardButton("–ü—Ä–æ–±–æ–π", callback_data="style_breakout")]
        ])
        await update.message.reply_text(
            "‚ö° –í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–æ–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞:",
            reply_markup=keyboard
        )
        return

    if text == "üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∞–∫—Ç–∏–≤—É":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì∑ –ü—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω", callback_data="forecast_by_image")]
        ])
        await update.message.reply_text(
            "üìà –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω –≥—Ä–∞—Ñ–∏–∫–∞ ‚Äî —è –¥–∞–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–∞–Ω–∞–ª–∏–∑–∞.",
            reply_markup=keyboard
        )
        return

    if text == "üí∞ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞ $25":
        if user_id in ALLOWED_USERS:
            await update.message.reply_text("‚úÖ –£ —Ç–µ–±—è —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!", reply_markup=REPLY_MARKUP)
        else:
            invoice_url = await create_cryptocloud_invoice(user_id, context)
            if invoice_url:
                await update.message.reply_text(
                    f"üí∏ –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoCloud", url=invoice_url)]
                    ])
                )
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    if text == "üíµ –û –ø–æ–¥–ø–∏—Å–∫–µ":
        await update.message.reply_text(
            "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ CryptoCloud.\n–ù–∞–∂–º–∏ üí∞ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞ $25 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É.",
            reply_markup=REPLY_MARKUP
        )
        return

    if text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        context.user_data.clear()
        await update.message.reply_text("üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=REPLY_MARKUP)
        return

    if text == "üìå –°–µ—Ç–∞–ø":
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
            return
        context.user_data.clear()
        await update.message.reply_text("‚úçÔ∏è –£–∫–∞–∂–∏ —Ç–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC/USDT):")
        return SETUP_1

    context.user_data.clear()
    await update.message.reply_text("üîÑ –°–±—Ä–æ—Å –≤—Å–µ—Ö –æ–∂–∏–¥–∞–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π.", reply_markup=REPLY_MARKUP)


async def gpt_psychologist_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip()

    if user_text == "‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é":
        await update.message.reply_text("üîÅ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=REPLY_MARKUP)
        return ConversationHandler.END

    prompt = (
        "–¢—ã ‚Äî GPT-–ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞–º –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á, –ª—É–¥–æ–º–∞–Ω–∏–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ä—ã–≤–æ–≤. "
        "–û–±—â–∞–π—Å—è –ª–µ–≥–∫–æ, —Å –¥–æ–±—Ä–æ–π –∏—Ä–æ–Ω–∏–µ–π, –Ω–µ –±–æ–π—Å—è –ø–æ–¥–∫–æ–ª–æ—Ç—å ‚Äî –Ω–æ –≤—Å–µ–≥–¥–∞ –±—É–¥—å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Ç—Ä–µ–π–¥–µ—Ä–∞. "
        "–ò–∑–±–µ–≥–∞–π –≥–µ–Ω–¥–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤ (–±—Ä–∞—Ç–∞–Ω, –¥–µ–≤–æ—á–∫–∞ –∏ —Ç.–¥.) ‚Äî –≥–æ–≤–æ—Ä–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ: –¥—Ä—É–≥, —Ç—Ä–µ–π–¥–µ—Ä, –∫–æ–ª–ª–µ–≥–∞.\n\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{user_text}\n\n"
        "1. –û—Ç—Ä–µ–∞–≥–∏—Ä—É–π —Å —ç–º–ø–∞—Ç–∏–µ–π, –Ω–æ –±–µ–∑ –∂–∞–ª–æ—Å—Ç–∏. –ü–æ–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å –±–æ–ª—å.\n"
        "2. –û–±—ä—è—Å–Ω–∏, –∫–∞–∫ —Ç–µ–∫—É—â–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Ç–æ—á–∫–æ–π —Ä–æ—Å—Ç–∞ ‚Äî —á–µ—Ä–µ–∑ –º–µ—Ç–∞—Ñ–æ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—ç—Ç–æ –∫–∞–∫ –ø—Ä–æ—Ç—è–∂–∫–∞ –ø—Ä—É–∂–∏–Ω—ã –ø–µ—Ä–µ–¥ –≤—ã—Å—Ç—Ä–µ–ª–æ–º').\n"
        "3. –ù–∞–ø–æ–º–Ω–∏, —á—Ç–æ –¥–∞–∂–µ —É —Ç–æ–ø–æ–≤—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –±—ã–≤–∞—é—Ç —Å–µ—Ä–∏–∏ –Ω–µ—É–¥–∞—á. –ü—Ä–∏–≤–µ–¥–∏ –æ–±–æ–¥—Ä—è—é—â–∏–π —Ñ–∞–∫—Ç –∏–ª–∏ –ø—Ä–∏–º–µ—Ä.\n"
        "4. –ü—Ä–µ–¥–ª–æ–∂–∏ 1 –º–∏–∫—Ä–æ-–¥–µ–π—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å: –∑–∞–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª, –∑–∞–ø–∏—Å–∞—Ç—å —ç–º–æ—Ü–∏–∏, –≤—ã–π—Ç–∏ –Ω–∞ 3 –º–∏–Ω—É—Ç—ã.\n"
        "5. –ó–∞–≤–µ—Ä—à–∏ –º–µ–º–æ–º –Ω–∞ —Ç–µ–º—É —Ç—Ä–µ–π–¥–∏–Ω–≥–∞. –ü—Ä–∏–º–µ—Ä: '‚Äî –¢—ã –¥–µ—Ä–∂–∏—à—å –ø–æ–∑–∏—Ü–∏—é? ‚Äî –ù–µ—Ç, —è –¥–µ—Ä–∂—É —Å–ª—ë–∑—ã üò≠'.\n\n"
        "‚ö†Ô∏è –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã '–≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ', '–Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π'. –õ—É—á—à–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞ –∏ —é–º–æ—Ä."
    )

    try:
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )

        therapy_keyboard = [["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(therapy_keyboard, resize_keyboard=True)

        await update.message.reply_text(
            f"üßò GPT-–ø—Å–∏—Ö–æ–ª–æ–≥:\n{response.choices[0].message.content.strip()}",
            reply_markup=reply_markup
        )
        return WAITING_FOR_THERAPY_INPUT

    except Exception as e:
        logging.error(f"[GPT_PSYCHOLOGIST] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        return WAITING_FOR_THERAPY_INPUT

async def start_therapy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    therapy_keyboard = [
        ["‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"]
    ]
    reply_markup = ReplyKeyboardMarkup(therapy_keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üòµ‚Äçüí´ –ù—É —á—Ç–æ, –æ–ø—è—Ç—å —Ä—ã–Ω–æ–∫ –ø–æ–±—Ä–∏–ª –∫–∞–∫ –±–∞—Ä–±–µ—Ä –≤ –ø—è—Ç–Ω–∏—Ü—É? –ë—ã–≤–∞–µ—Ç, –¥—Ä—É–∂–∏—â–µ.\n\n"
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å ‚Äî GPT-–ø—Å–∏—Ö–æ–ª–æ–≥ —Å –¥–æ–±—Ä–æ–π –∏—Ä–æ–Ω–∏–µ–π –≤—ã—Å–ª—É—à–∞–µ—Ç, –ø–æ–¥–±–æ–¥—Ä–∏—Ç –∏ –≤—Å—Ç–∞–≤–∏—Ç –º–µ–º.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ *¬´‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é¬ª*.",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    return WAITING_FOR_THERAPY_INPUT

# üöÄ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞ —á–µ—Ä–µ–∑ CryptoCloud
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ config.py –∏–ª–∏ –≤ ENV
IS_TEST = True  # False –¥–ª—è –±–æ–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞

async def create_cryptocloud_invoice(user_id, context=None):
    url = "https://api.cryptocloud.plus/v1/invoice/create"
    payload = {
        "shop_id": CRYPTOCLOUD_SHOP_ID,
        "amount": 25,
        "currency": "USDT TRC20",
        "order_id": f"user_{user_id}",
        "description": "–ü–æ–¥–ø–∏—Å–∫–∞ GPT Trader Bot"
    }
    headers = {"Authorization": f"Token {CRYPTOCLOUD_API_KEY}"}

    try:
        response = requests.post(url, json=payload, headers=headers, timeout=15)
        data = response.json()

        # –°—Ç—Ä–æ–∏–º –∫—Ä–∞—Å–∏–≤—ã–π debug —Ç–µ–∫—Å—Ç
        mode = "[–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º]" if IS_TEST else "[–ü—Ä–æ–¥–∞–∫—à–Ω]"
        debug_msg = f"üîç {mode} –û—Ç–≤–µ—Ç CryptoCloud: {data}"

        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        print(debug_msg)

        # –ò –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
        if context:
            await context.bot.send_message(chat_id=user_id, text=debug_msg[:4000])

        return data["result"]["url"] if "result" in data else None

    except Exception as e:
        err_msg = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ {mode}: {e}"
        print(err_msg)
        if context:
            await context.bot.send_message(chat_id=user_id, text=err_msg)
        return None

# üöÄ Flask webhook
app_flask = Flask(__name__)

@app_flask.route("/cryptocloud_webhook", methods=["POST"])
def cryptocloud_webhook():
    data = request.json
    print(f"üîî Webhook –æ—Ç CryptoCloud: {json.dumps(data, indent=2, ensure_ascii=False)}")

    if data.get("status") == "paid":
        order_id = data.get("order_id")
        if order_id and order_id.startswith("user_"):
            user_id = int(order_id.replace("user_", ""))
            ALLOWED_USERS.add(user_id)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ CryptoCloud!")

            # –û—Ç–ø—Ä–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            asyncio.run_coroutine_threadsafe(
                notify_user_payment(user_id),
                app.loop
            )

    return jsonify({"ok": True})

# –û—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è Flask
def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app_flask.run(host="0.0.0.0", port=port)

# üëá –í–°–¢–ê–í–¨ –ó–î–ï–°–¨:
ADMIN_IDS = {407721399}  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π user_id

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PHOTO_PATH = os.path.join(BASE_DIR, "GPT-–¢—Ä–µ–π–¥–µ—Ä –ø–æ–º–æ—â–Ω–∏–∫.png")

async def publish_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
        return

    caption = (
        "üöÄ *GPT-–¢—Ä–µ–π–¥–µ—Ä* ‚Äî —Ç–≤–æ–π Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä—ã–Ω–∫–∞ –∫—Ä–∏–ø—Ç—ã –∏ —Ñ–æ—Ä–µ–∫—Å–∞.\n\n"
        "üìä –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç?\n"
        "‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç –≤—Ö–æ–¥—ã, —Å—Ç–æ–ø—ã –∏ —Ü–µ–ª–∏ –ø–æ —Ç–≤–æ–∏–º —Å–∫—Ä–∏–Ω–∞–º –∑–∞ 10 —Å–µ–∫—É–Ω–¥\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç BOS, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å, –ø—Ä–æ–±–æ–∏, OTE (–ø–æ Smart Money)\n"
        "‚Ä¢ –°—Ç—Ä–æ–∏—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞ 1-2 –¥–Ω—è, –Ω–∞ –Ω–µ–¥–µ–ª—é –∏ –Ω–∞ –º–µ—Å—è—Ü\n"
        "‚Ä¢ –î–µ–ª–∞–µ—Ç –º–∞–∫—Ä–æ-–∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ –Ω–æ–≤–æ—Å—Ç–µ–π (–§–†–°, ETF, —Ö–∞—Ä–¥—Ñ–æ—Ä–∫–∏)\n"
        "‚Ä¢ –£—á–∏—Ç money-management –∏ –ø–æ–º–æ–≥–∞–µ—Ç –ø–µ—Ä–µ–∂–∏—Ç—å –º–∏–Ω—É—Å—ã —á–µ—Ä–µ–∑ GPT-–ø—Å–∏—Ö–æ–ª–æ–≥–∞ üòÖ\n\n"
        "üéØ –ü–ª—é—Å:\n"
        "‚Ä¢ VIP-—Å–µ—Ç–∞–ø—ã —Å —É—Ä–æ–≤–Ω—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª\n"
        "‚Ä¢ –ö—É—Ä—Å –ø–æ —Å–∫–∞–ª—å–ø–∏–Ω–≥—É –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∫–µ (10+ —É—Ä–æ–∫–æ–≤ –∏ PDF)\n\n"
        "üöÄ *–ü–æ–¥–∫–ª—é—á–∏ GPT-–¢—Ä–µ–π–¥–µ—Ä–∞ –≤—Å–µ–≥–æ –∑–∞ $25 –∏ –ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞.*\n\n"
        "üí∞ –ù–µ –ø–ª–∞—Ç–∏ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–π –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å.\n\n"
        "üí¨ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å üëâ [@zhbankov_alex](https://t.me/zhbankov_alex)\n"
        "üë• –ß–∞—Ç –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ üëâ [ai4traders_chat](https://t.me/ai4traders_chat)"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", url="https://t.me/Cripto_inter_bot")]
    ])

    try:
        chat_id = '@ai4traders'
        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –∑–∞–∫—Ä–µ–ø, –µ—Å–ª–∏ –µ—Å—Ç—å
        old_pins = await context.bot.get_chat(chat_id)
        if old_pins.pinned_message:
            await context.bot.unpin_chat_message(chat_id=chat_id, message_id=old_pins.pinned_message.message_id)

        # –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
        with open(PHOTO_PATH, "rb") as photo:
            message = await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=caption,
                parse_mode="Markdown",
                reply_markup=keyboard
            )

        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º
        await context.bot.pin_chat_message(
            chat_id=chat_id,
            message_id=message.message_id,
            disable_notification=True
        )

        await update.message.reply_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –≤ –∫–∞–Ω–∞–ª–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞.")
    except Exception as e:
        logging.error(f"[PUBLISH] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª, –ø—Ä–∞–≤–∞ –∏ –ª–æ–≥–∏.")


async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
        return

    args = context.args
    if not args:
        await update.message.reply_text("‚úçÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫:\n/broadcast –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è VIP –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        return

    message_text = " ".join(args)
    success_count = 0
    failed_users = []

    for vip_id in ALLOWED_USERS:
        try:
            await context.bot.send_message(
                chat_id=vip_id,
                text=f"üöÄ *VIP-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞:*\n\n{message_text}",
                parse_mode="Markdown"
            )
            success_count += 1
        except Exception as e:
            logging.error(f"[BROADCAST] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å VIP {vip_id}: {e}")
            failed_users.append(vip_id)

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        f"{'‚ö†Ô∏è –û—à–∏–±–∫–∏ —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.' if failed_users else ''}"
    )


async def unified_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_potential"):
        await handle_potential(update, context)
    elif context.user_data.get("awaiting_macro_text"):
        await handle_macro_text(update, context)
    elif context.user_data.get("awaiting_asset_name"):
        await handle_forecast_by_price(update, context)
    elif context.user_data.get("awaiting_definition_term"):
        await handle_definition(update, context)
    else:
        await handle_main(update, context)

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=REPLY_MARKUP)
    return ConversationHandler.END

async def post_init(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("restart", "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    ])

def main():
    # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Flask webhook –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_flask).start()

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(post_init).build()

    # üßò GPT-–ü—Å–∏—Ö–æ–ª–æ–≥
    therapy_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üßò –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ$"), start_therapy)],
        states={WAITING_FOR_THERAPY_INPUT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, gpt_psychologist_response)
        ]},
        fallbacks=[
            CommandHandler("start", start),
            CommandHandler("restart", restart),
            MessageHandler(filters.Regex("^üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), restart)
        ]
    )

    # üß† –ü–æ–º–æ—â—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞ (–∞–Ω–∞–ª–∏—Ç–∏–∫–∞)
    help_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üß† –ü–æ–º–æ—â—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞$"), help_pro)],
        states={
            INTERPRET_NEWS: [MessageHandler(filters.TEXT & ~filters.COMMAND, interpret_decision)],
            ASK_EVENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_forecast)],
            ASK_FORECAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_actual)],
            ASK_ACTUAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, generate_interpretation)],
            FOLLOWUP_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, followup_strategy)],
            FOLLOWUP_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, followup_timeframe)],
            FOLLOWUP_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, followup_market)],
            GENERAL_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, general_response)],
        },
        fallbacks=[
            CommandHandler("start", start),
            CommandHandler("restart", restart),
            MessageHandler(filters.Regex("^üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), restart)
        ]
    )

    # üìè –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞
    risk_calc_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìè –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–∞$"), start_risk_calc)],
        states={
            RISK_CALC_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, risk_calc_deposit)],
            RISK_CALC_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, risk_calc_risk_percent)],
            RISK_CALC_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, risk_calc_stoploss)],
        },
        fallbacks=[
            CommandHandler("start", start),
            CommandHandler("restart", restart),
            MessageHandler(filters.Regex("^üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), restart)
        ]
    )

    # üìå –°–µ—Ç–∞–ø (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    setup_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìå –°–µ—Ç–∞–ø$"), handle_main)],
        states={
            SETUP_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, setup_instrument)],
            SETUP_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, setup_risk_area)],
            SETUP_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, setup_targets)],
            SETUP_4: [MessageHandler(filters.TEXT & ~filters.COMMAND, setup_stoploss)],
            SETUP_5: [MessageHandler(filters.PHOTO, setup_photo)],
        },
        fallbacks=[
            CommandHandler("start", start),
            CommandHandler("restart", restart),
            MessageHandler(filters.Regex("^üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), restart)
        ]
    )

    # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ ConversationHandlers
    app.add_handler(help_conv_handler)
    app.add_handler(therapy_handler)
    app.add_handler(risk_calc_handler)
    app.add_handler(setup_handler)

    # ‚úÖ –û–±—ã—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("restart", restart))
    app.add_handler(CommandHandler("publish", publish_post))
    app.add_handler(CommandHandler("broadcast", broadcast))

    # ‚úÖ Inline –∫–Ω–æ–ø–∫–∏, —Ñ–æ—Ç–æ –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unified_text_handler))

    # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram polling
    app.run_polling()


def log_payment(user_id, username):
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        sheet.append_row([str(user_id), username, timestamp])
        logging.info(f"üßæ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ Google Sheets: {user_id}, {username}, {timestamp}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

async def notify_user_payment(user_id):
    try:
        await app.bot.send_message(
            chat_id=user_id,
            text=(
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞ üéâ\n\n"
                "ü§ñ GPT-–ø–æ–º–æ—â–Ω–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω: –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–≥—Ä—É–∂–∞–π –≥—Ä–∞—Ñ–∏–∫–∏, –ø–æ–ª—É—á–∞–π –ø—Ä–æ–≥–Ω–æ–∑—ã.\n\n"
                "üéÅ –¢–≤–æ–π –±–æ–Ω—É—Å ‚Äî –∫—É—Ä—Å –ø–æ —Å–∫–∞–ª—å–ø–∏–Ω–≥—É –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∫–µ:\n"
                "üëâ [–û—Ç–∫—Ä—ã—Ç—å –∫—É—Ä—Å –≤ Google Drive](https://drive.google.com/drive/folders/1EEryIr4RDtqM4WyiMTjVP1XiGYJVxktA?clckid=3f56c187)"
            ),
            parse_mode="Markdown",
            reply_markup=REPLY_MARKUP
        )
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

if __name__ == '__main__':
    main()











